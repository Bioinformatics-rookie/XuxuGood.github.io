<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo NexT主题之代码块Mac Panel特效</title>
    <url>/posts/d7399e80.html</url>
    <content><![CDATA[<!-- build time:Fri Nov 01 2019 01:20:36 GMT+0000 (Coordinated Universal Time) --><p>&emsp;&emsp;偶然间发现一款不错的文章代码块样式，类似Mac的面板效果。能设置阴影效果和实现文本编辑功能，不过文本只存在浏览器页面上，不会真正保存。配置的方式也很简单，觉得不错的朋友可以试一下。</p><h1 id="引入-JS"><a href="#引入-JS" class="headerlink" title="引入 JS"></a><em>引入 JS</em></h1><p>&emsp;&emsp;这里需要新建两个 js 文件 <code>events.js</code> 和 <code>codeblock.js</code> ，路径位于 <code>/themes/next/scripts/</code> 包下。</p><div class="note success"><p><strong><em>events.js 代码：</em></strong></p></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mac Panel效果代码块相关</span></span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 后自动打开编辑器</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  exec(<span class="string">'open -a MacDown '</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;这个js会在你敲 <code>hexo new xxx</code> 命令后，调用本地的MarkDown编辑器打开新建的md文件 <code>xxx</code></p><div class="note success"><p><strong><em>codeblock.js 代码：</em></strong></p></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mac Panel效果代码块相关</span></span><br><span class="line"><span class="keyword">var</span> attributes = [</span><br><span class="line">  <span class="string">'autocomplete="off"'</span>,</span><br><span class="line">  <span class="string">'autocorrect="off"'</span>,</span><br><span class="line">  <span class="string">'autocapitalize="off"'</span>,</span><br><span class="line">  <span class="string">'spellcheck="false"'</span>,</span><br><span class="line">  <span class="string">'contenteditable="true"'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> attributesStr = attributes.join(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="regexp">/&lt;figure class="highlight ([a-zA-Z]+)"&gt;.*?&lt;\/figure&gt;/</span>.test(data.content)) &#123;</span><br><span class="line">    data.content = data.content.replace(<span class="regexp">/&lt;figure class="highlight ([a-zA-Z]+)"&gt;.*?&lt;\/figure&gt;/</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> language = <span class="built_in">RegExp</span>.$<span class="number">1</span> || <span class="string">'plain'</span></span><br><span class="line">      <span class="keyword">var</span> lastMatch = <span class="built_in">RegExp</span>.lastMatch</span><br><span class="line">      lastMatch = lastMatch.replace(<span class="regexp">/&lt;figure class="highlight /</span>, <span class="string">'&lt;figure class="iseeu highlight /'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'&lt;div class="highlight-wrap"'</span> + attributesStr + <span class="string">'data-rel="'</span> + language.toUpperCase() + <span class="string">'"&gt;'</span> + lastMatch + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h1 id="引入-CSS"><a href="#引入-CSS" class="headerlink" title="引入 CSS"></a><em>引入 CSS</em></h1><p>&emsp;&emsp;在 <code>/themes/next/source/css/_common/components/highlight/</code> 目录下新建 <code>macPanel.styl</code> 文件，内容如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*mac Panel效果代码块相关*/</span></span><br><span class="line"><span class="selector-class">.highlight-wrap</span><span class="selector-attr">[data-rel]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="comment">/*box-shadow: 0 10px 30px 0px rgba(0, 0, 0, 0.4);*/</span></span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">18px</span> <span class="number">18px</span> <span class="number">15px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(0,0,0,.4);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">35px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">  ::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="selector-tag">height</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.3);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-rel);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#21252b</span>;</span><br><span class="line">    <span class="comment">/*background: #108414de;*/</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="comment">/*position: absolute;*/</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/*font-family: 'Source Sans Pro', sans-serif;*/</span></span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fc625d</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">20px</span> <span class="number">0px</span> <span class="number">#fdbc40</span>, <span class="number">40px</span> <span class="number">0px</span> <span class="number">#35cd4b</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">0px</span> <span class="number">#fdbc40</span>, <span class="number">40px</span> <span class="number">0px</span> <span class="number">#35cd4b</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;此css是根据我本地的样式做过调整，注释的代码为原有的，根据需要调整样式即可。</p><h1 id="配置引用"><a href="#配置引用" class="headerlink" title="配置引用"></a><em>配置引用</em></h1><p>&emsp;&emsp;在 <code>/themes/next/source/css/_common/components/highlight/highlight.styl</code> 中引入刚才新建的 <code>macPanel.styl</code>：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line">@require <span class="string">"macPanel"</span></span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;配置在文件的顶部位置即可。<br>&emsp;&emsp;到此Mac Panel配置完成，根据需要可调整主题配置文件中的 <code>highlight_theme</code> 的值，选择自己喜欢的样式。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Hexo</category>
        <category>Next</category>
      </categories>
      <tags>
        <tag>代码块</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客静态资源压缩</title>
    <url>/posts/495d0b23.html</url>
    <content><![CDATA[<!-- build time:Fri Nov 01 2019 01:20:36 GMT+0000 (Coordinated Universal Time) --><p>&emsp;&emsp;针对于博文静态资源压缩，介绍一下两种压缩方式，第一种方式是使用Gulp来进行压缩，<code>Gulp</code> 是 <code>Node.js</code> 下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。第二种方式就是使用由rozbo大佬开发的 <code>Hexo-Neat</code> 压缩插件，配置简单，无需额外命令。</p><p>&emsp;&emsp;附上大佬的 <code>Github</code> 链接：<br><a href="https://github.com/rozbo/hexo-neat" class="LinkCard" rel="external nofollow noopener noreferrer" target="_blank">Hexo-Neat</a></p><h1 id="Hexo-Neat使用"><a href="#Hexo-Neat使用" class="headerlink" title="Hexo-Neat使用"></a><em>Hexo-Neat使用</em></h1><p>1、在站点根目录下安装 <code>Hexo-Neat</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-neat --save</span><br></pre></td></tr></table></figure></div><p>2、在站点配置文件中末尾添加以下相关配置即可，也可以按照自己的需求去自定义配置。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line">neat_enable: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line">neat_html:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> exclude:</span><br><span class="line"><span class="comment"># 压缩css</span></span><br><span class="line">neat_css:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> exclude:</span><br><span class="line">   - <span class="string">'**/*.min.css'</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line">neat_js:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> mangle: <span class="literal">true</span></span><br><span class="line"> output:</span><br><span class="line"> compress:</span><br><span class="line"> exclude:</span><br><span class="line">   - <span class="string">'**/*.min.js'</span></span><br><span class="line">   - <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line">   - <span class="string">'**/index.js'</span></span><br></pre></td></tr></table></figure></div><h1 id="Gulp使用"><a href="#Gulp使用" class="headerlink" title="Gulp使用"></a><em>Gulp使用</em></h1><p>1、在站点的根目录下执行以下命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure></div><p>2、在博客根目录下新建 <code>gulpfile.js</code> ，并填入以下内容</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">var gulp = require(<span class="string">'gulp'</span>);</span><br><span class="line">var minifycss = require(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line">var uglify = require(<span class="string">'gulp-uglify'</span>);</span><br><span class="line">var htmlmin = require(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line">var htmlclean = require(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line">var imagemin = require(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line">// 压缩html</span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            collapseWhitespace: <span class="literal">true</span>, //从字面意思应该可以看出来，清除空格，压缩html，这一条比较重要，作用比较大，引起的改变压缩量也特别大</span><br><span class="line">            collapseBooleanAttributes: <span class="literal">true</span>, //省略布尔属性的值，比如：&lt;input checked=<span class="string">"checked"</span>/&gt;,那么设置这个属性后，就会变成 &lt;input checked/&gt;</span><br><span class="line">            removeComments: <span class="literal">true</span>, //清除html中注释的部分</span><br><span class="line">            removeEmptyAttributes: <span class="literal">true</span>, //清除所有的空属性</span><br><span class="line">            removeScriptTypeAttributes: <span class="literal">true</span>, //清除所有script标签中的<span class="built_in">type</span>=<span class="string">"text/javascript"</span>属性。</span><br><span class="line">            removeStyleLinkTypeAttributes: <span class="literal">true</span>, //清楚所有Link标签上的<span class="built_in">type</span>属性。</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩css</span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss(&#123;</span><br><span class="line">            compatibility: <span class="string">'ie8'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩js !代表排除的js,例如[<span class="string">'!./public/js/**/*min.js'</span>]</span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src([<span class="string">'./public/js/**/.js'</span>])</span><br><span class="line">        .pipe(uglify()) //压缩混淆</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩图片</span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">        [imagemin.gifsicle(&#123;<span class="string">'optimizationLevel'</span>: 3&#125;),</span><br><span class="line">        imagemin.jpegtran(&#123;<span class="string">'progressive'</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">        imagemin.optipng(&#123;<span class="string">'optimizationLevel'</span>: 7&#125;),</span><br><span class="line">        imagemin.svgo()],</span><br><span class="line">        &#123;<span class="string">'verbose'</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(<span class="string">'default'</span>,gulp.series(gulp.parallel(<span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span>,<span class="string">'minify-images'</span>)));</span><br></pre></td></tr></table></figure></div><p>3、生成博文时执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 <code>public</code> 目录中的静态资源文件进行压缩。</p><div class="note success">以上就是关于博文静态资源压缩的两种方式，欢迎自由选择引用，如有不明白的地方欢迎下方留言 o(^▽^)o ，谢谢阅读。</div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
        <tag>Hexo-Neat</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 TravisCI 实现 Hexo 在 Github 和 Coding 的同步部署</title>
    <url>/posts/3e5a3bb6.html</url>
    <content><![CDATA[<!-- build time:Fri Nov 01 2019 01:20:36 GMT+0000 (Coordinated Universal Time) --><p>&emsp;&emsp;关于TravisCI我这里简单介绍一下，TravisCI是一个在线的、分布式的持续集成服务，可以用来构建和测试托管在Github上的代码，并且其本身就是开源的。TravisCI提供了主流编程语言如C#、Java、JavaScript、Ruby、PHP、Node.js等的支持，相比Jenkins而言，它是一个轻量级的持续集成平台，它会在每次提交代码后，根据配置文件来创建一个虚拟机，并执行用户定义的Build任务，这个虚拟机提供版本控制(Git)、项目构建(Node.js)等，在此前提下，我们下面着手Hexo的自动化部署。</p><p>&emsp;&emsp;其原理就是Github和Coding（<code>小插曲：Coding现在已经被腾讯收购了</code>）各为TravisCI分配一个token，当我们向 Github 推送新的代码以后，TravisCI就会从代码仓库中拉取代码，并通过 npm 安装依赖生成静态页面，我们将这些静态页面推送到 master 分支，即可完成对Hexo的部署操作。</p><p>&emsp;&emsp;对于我个人博客是以 Github 作为代码的主仓库，其上面的 blog-source 分支存放博客的源代码，master 分支存放博客的静态页面，在此基础上，我们同时推送静态页面到 Github 和 Coding 的代码仓库，这样就可以实现两个平台的同步部署，这里的部署自然是指由 Travis 完成的自动化部署。整体的流程如下图所示：</p><p><img src="https://s2.ax1x.com/2019/10/21/KlNiCR.png" alt="Travis自动构建流程图"></p><h1 id="Github相关操作"><a href="#Github相关操作" class="headerlink" title="Github相关操作"></a><em>Github相关操作</em></h1><p>1、按规定仓库名称为 <code>XXXXX.github.io</code>，其中 <code>XXXXX</code> 为你的用户名，进行创建仓库。</p><p><img src="https://s2.ax1x.com/2019/10/21/Kl0wjI.png" alt="Github建库"><br>2、建好仓库以后我们在仓库中新建一个分支放博客源码，我这里命名为 <code>blog-source</code>，建好以后将源码提交到该分支下即可。</p><p><img src="https://s2.ax1x.com/2019/10/22/K3szy4.png" alt="blog-source"><br>3、为了使 Travis 能够将编译好的文件 push 回咱们的 Github，我们需要生成 <code>token</code>，步骤如下：<br>&emsp;&nbsp;&nbsp;&Delta;第一步，在 Github 上 Setting 中找到 <a href="https://github.com/settings/tokens" rel="external nofollow noopener noreferrer" target="_blank">Personal access tokens</a> 设置。<br>&emsp;&nbsp;&nbsp;&Delta;第二步，点 Generate new token，为 <code>token</code> 起一个名字，勾选 repo，然后点击生成一个新的 <code>token</code> ，并复制下来记录好，待会下面 Travis 配置会用到。（这个只会出现一次！！）</p><h1 id="Coding相关操作"><a href="#Coding相关操作" class="headerlink" title="Coding相关操作"></a><em>Coding相关操作</em></h1><p>1、因为腾讯云已经收购了 <a href="https://coding.net" rel="external nofollow noopener noreferrer" target="_blank">Coding</a> ，所以我们直接在 <a href="https://dev.tencent.com/production" rel="external nofollow noopener noreferrer" target="_blank">腾讯云开发者平台</a> 注册账号来管理我们的仓库。<br>2、注册完毕后我们新建一个名为 <code>XXXXX.coding.me</code> 的项目，其中 <code>XXXXX</code> 为你的用户名，基本操作与 Github 一致，实在不会的可以留言。<br>3、Coding可以和 Github 一样可以生成一个 <code>token</code> 如下图，成功以后将 <code>token</code> 保存好，一会下面会用到。</p><p><img src="https://s2.ax1x.com/2019/10/22/K34SXV.png" alt="blog-source"></p><h1 id="Travis相关操作"><a href="#Travis相关操作" class="headerlink" title="Travis相关操作"></a><em>Travis相关操作</em></h1><p>1、使用 <code>github</code> 帐号登录 <a href="https://travis-ci.org" rel="external nofollow noopener noreferrer" target="_blank">TravisCI</a> ，左上方按钮点击同步项目，下方打开需要集成的项目，最后点击齿轮进入项目配置页面</p><p><img src="https://s2.ax1x.com/2019/10/24/KN4q56.png" alt="Travis-首页"><br>2、具体 <code>Travis</code> 配置如下图</p><p><img src="https://s2.ax1x.com/2019/10/24/KN5IW8.png" alt="Travis-配置页"><br>3、配置好 <code>Travis</code> 后，回到终端，进入 <code>blog</code> 所在的文件夹下，新建 <code>.travis.yml</code> 文件，并添加以下内容</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">sudo: <span class="literal">false</span></span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定缓存模块，可选。缓存可加快编译速度。</span></span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定博客的仓库地址</span></span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   <span class="comment"># Github Pages</span></span><br><span class="line">   - GH_REF: github.com/XuxuGood/XuxuGood.github.io</span><br><span class="line">   <span class="comment"># Coding Pages</span></span><br><span class="line">   - CO_REF: git.dev.tencent.com/XuxuGood/XuxuGood.coding.me.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定博客分支</span></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - blog-source <span class="comment"># build master branch only</span></span><br><span class="line"></span><br><span class="line">before_install:</span><br><span class="line">  - npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start: Build Lifecycle</span></span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line">  - npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清缓存，生成网页操作</span></span><br><span class="line">script:</span><br><span class="line">  - hexo clean</span><br><span class="line">  - hexo generate</span><br><span class="line">  <span class="comment">#gulp压缩文件</span></span><br><span class="line">  - gulp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置git提交名，邮箱；替换真实token到_config.yml文件，最后depoy部署</span></span><br><span class="line">after_script:</span><br><span class="line">  - <span class="built_in">cd</span> ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name <span class="string">"xuxu"</span></span><br><span class="line">  - git config user.email <span class="string">"22476705@qq.com"</span></span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m <span class="string">"TravisCI 自动部署"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Github Pages</span></span><br><span class="line">  - git push --force --quiet <span class="string">"https://<span class="variable">$&#123;GH_TOKEN&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>"</span> master:master</span><br><span class="line">  <span class="comment"># Coding Pages</span></span><br><span class="line">  - git push --force --quiet <span class="string">"https://XuxuGood:<span class="variable">$&#123;CO_TOKEN&#125;</span>@<span class="variable">$&#123;CO_REF&#125;</span>"</span> master:master</span><br><span class="line">  - git tag v0.0.<span class="variable">$TRAVIS_BUILD_NUMBER</span> -a -m <span class="string">"Auto Taged By TravisCI With Build <span class="variable">$TRAVIS_BUILD_NUMBER</span>"</span></span><br><span class="line">  <span class="comment"># Github Pages</span></span><br><span class="line">  - git push --quiet <span class="string">"https://<span class="variable">$&#123;GH_TOKEN&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>"</span> master:master --tags</span><br><span class="line">  <span class="comment"># Coding Pages</span></span><br><span class="line">  - git push --quiet <span class="string">"https://XuxuGood:<span class="variable">$&#123;CO_TOKEN&#125;</span>@<span class="variable">$&#123;CO_REF&#125;</span>"</span> master:master --tags</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Build Salver Repository(Github Pages)</span></span><br><span class="line">  <span class="comment">#- git push --force --quiet "https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;" master:master</span></span><br><span class="line">  <span class="comment"># Build Salver Repository(Github Pages)</span></span><br><span class="line">  <span class="comment">#- git push --force --quiet "https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;" master:master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># End: Build LifeCycle</span></span><br></pre></td></tr></table></figure></div><p>4、然后，准备 <code>push</code> 该项目到 <code>github</code> ，看下是否成功，最终成功则会看到 <code>Travis</code> 构建页面显示如下图</p><p><img src="https://s2.ax1x.com/2019/10/24/KNo94P.png" alt="Travis-构建页面"></p><p>&emsp;&emsp;以上就是基于 TravisCI 实现 Hexo 在 Github 和 Coding 同步部署的全部介绍，如有不明白的地方欢迎下方留言 o(^▽^)o ，谢谢阅读。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Coding</tag>
        <tag>TravisCI</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建本地个人博客（基础篇）</title>
    <url>/posts/e1b9c6c5.html</url>
    <content><![CDATA[<!-- build time:Fri Nov 01 2019 01:20:36 GMT+0000 (Coordinated Universal Time) --><blockquote><p><strong>初识Hexo</strong></p></blockquote><p>&emsp;&emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" rel="external nofollow noopener noreferrer" target="_blank">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a><em>安装Hexo</em></h2><p>&emsp;&emsp;建立 Hexo 只需要几分钟，安装 Hexo 非常简单。但是，您首先需要安装其他一些东西。</p><ul><li><a href="http://nodejs.org/" rel="external nofollow noopener noreferrer" target="_blank">Node.js</a> &nbsp;&nbsp;(Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/" rel="external nofollow noopener noreferrer" target="_blank">Git</a></li></ul><p>&emsp;&emsp;如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;如果没有，那就一起来看下面吧 (<code>这里只说一下 windows 的安装，因为本人现在比较穷，买不起mac啊 テ_デ，其他相关教程大家就去搜搜很多的。</code>)</p><h3 id="emsp-emsp-安装git"><a href="#emsp-emsp-安装git" class="headerlink" title="&emsp;&emsp;安装git"></a>&emsp;&emsp;<em>安装git</em></h3><p><img src="https://s2.ax1x.com/2019/10/21/KlpZvD.md.png" alt="安装git"></p><div class="image-caption">安装git.png</div><a href="https://git-scm.com/downloads" class="LinkCard" rel="external nofollow noopener noreferrer" target="_blank">安装地址</a><p>&emsp;&emsp;一切按照默认走就行了，没什么特殊的地方，安装完成之后检查git是否安装成功（执行一下cmd命令），显示版本号即为成功！</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></div><h3 id="emsp-emsp-安装Node-js"><a href="#emsp-emsp-安装Node-js" class="headerlink" title="&emsp;&emsp;安装Node.js"></a>&emsp;&emsp;<em>安装Node.js</em></h3><p><img src="https://s2.ax1x.com/2019/10/21/KlpmKe.md.png" alt="安装Node.js"></p><div class="image-caption">安装Node.js.png</div><p><a href="https://nodejs.org/en/" class="LinkCard" rel="external nofollow noopener noreferrer" target="_blank">安装地址</a></p><p>&emsp;&emsp;我们这里简单点，直接下载并运行安装程序就完了，还是走默认就行，安装完成之后检查 node 是否安装成功（执行一下cmd命令），显示版本号即为成功！</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></div><h3 id="emsp-emsp-安装Hexo"><a href="#emsp-emsp-安装Hexo" class="headerlink" title="&emsp;&emsp;安装Hexo"></a>&emsp;&emsp;<em>安装Hexo</em></h3><p>&emsp;&emsp;所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div><h2 id="利用Hexo初始化我们的站点跟目录-文件"><a href="#利用Hexo初始化我们的站点跟目录-文件" class="headerlink" title="利用Hexo初始化我们的站点跟目录(文件)"></a><em>利用Hexo初始化我们的站点跟目录(文件)</em></h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;文件夹&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;文件夹&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;选择你想要的盘符来建立我们的博客站点文件,我这里选择 D:\blog ，这里的 blog 是你的文件夹名字（根据自己的喜好建一个文件夹）</p><p><img src="https://s2.ax1x.com/2019/10/21/KlPjo9.png" alt="init hexo"></p><p>&emsp;&emsp;cd 到你的站点目录下，然后 初始化站点 $ npm install，执行成功后到你的 blog 文件夹下看看是否这样的（一致就成功啦~~）</p><p><img src="https://s2.ax1x.com/2019/10/21/Klkwa4.png" alt="blog"></p><p>&emsp;&emsp;介绍几个个命令 ,以后经常要用到的</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">hexo g: 编译,生成静态文件，也就是public文件夹的东西。</span><br><span class="line">hexo s: 开启本地服务(以上两步的操作可以合并成hexo s -g)。</span><br><span class="line">hexo clean: 顾名思义就是清除缓存的意思了啦，这招一般在你改动之后网站没有变化时候用。</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;接下来看看 你博客的初步成果吧。</p><p>&emsp;&emsp;进入 <code>blog</code> 文件根目录:</p><p>&emsp;&emsp;&emsp;&emsp;执行命令: <code>hexo g</code> 和 <code>hexo s</code></p><p>&emsp;&emsp;然后在你的浏览器输入<code>http://localhost:4000</code>，查看你的博客。</p><p><img src="https://s2.ax1x.com/2019/10/21/KlAJFH.png" alt="blog首页"></p><p>&emsp;到此为止，你的个人博客就已经搭建完成了。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/27514.html</url>
    <content><![CDATA[<!-- build time:Fri Nov 01 2019 01:20:37 GMT+0000 (Coordinated Universal Time) --><p><font size="4">Welcome to <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</font></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p><!-- rebuild by neat -->]]></content>
  </entry>
</search>
