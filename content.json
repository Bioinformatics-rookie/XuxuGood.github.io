{"meta":{"title":"Xu's Blog","subtitle":"博观而约取，厚积而薄发","description":"<i class=\"fa fa-heartbeat\" id=\"myheartbeat\"></i>&nbsp;人生若只如初见&nbsp;<i class=\"fa fa-heartbeat\" id=\"myheartbeat\"></i>","author":"John Xu","url":"https://hasaik.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-03-18T08:08:35.856Z","updated":"2020-03-18T08:08:35.856Z","comments":false,"path":"/404.html","permalink":"https://hasaik.com//404.html","excerpt":"","text":"404 L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"model\":{\"jsonPath\":\"/live2dw/assets/wanko.model.json\"},\"display\":{\"position\":\"right\",\"width\":120,\"height\":220},\"mobile\":{\"show\":true},\"log\":false,\"tagMode\":false});!function(e){var r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function t(){for(var c=0;c"},{"title":"读书系列","date":"2019-10-28T13:03:18.000Z","updated":"2020-03-18T08:08:35.860Z","comments":false,"path":"books/index.html","permalink":"https://hasaik.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-10-10T16:43:26.000Z","updated":"2020-03-18T08:08:35.860Z","comments":false,"path":"categories/index.html","permalink":"https://hasaik.com/categories/index.html","excerpt":"","text":""},{"title":"游戏系列","date":"2019-10-30T16:27:23.000Z","updated":"2020-03-18T08:08:35.860Z","comments":false,"path":"games/index.html","permalink":"https://hasaik.com/games/index.html","excerpt":"","text":""},{"title":"生活日常","date":"2019-10-28T11:30:03.000Z","updated":"2020-03-18T08:08:35.860Z","comments":false,"path":"life/index.html","permalink":"https://hasaik.com/life/index.html","excerpt":"","text":"Life was like a box of chocolates, you never know what you’re going to get 游戏系列玩过的一些游戏 读书系列读过的一些书籍 观影系列看过的一些电影 相册系列生活的五彩斑斓 .posts-expand .post-body h3:before { content: \"\"; } .box { overflow: hidden; position: relative; z-index: 1; transition: all .5s; width: 40%; float: left; margin: 3% 5%; height: 220px } .box:hover { box-shadow: 3px 3px 5px #999 } .box:after, .box:before { content: \"\"; background: radial-gradient(circle at 23% 70%, rgba(255, 255, 255, .8), #fff 30%); width: 150%; height: 175%; opacity: 0; transform: rotate(45deg); position: absolute; top: -10.5%; right: -150%; z-index: 1; transition: all .35s ease } .box:after { background: rgba(255, 255, 255, .5); width: 50%; height: 69%; right: auto; left: -7%; top: -65% } .box:hover:before { opacity: 1; right: -85% } .box:hover:after { opacity: 1; top: -42% } .box img { width: 100%; height: auto; transition: all .5s ease } .box:hover img { transform: scale(1.2) } .box .box-content { text-align: right; transform: translateY(-50%); position: absolute; top: 50%; right: -100%; z-index: 2; transition: all .5s } .box:hover .box-content { right: 5% } .box .lay-title { color: #1e272e; font-size: 23px; font-weight: 700; text-transform: uppercase; margin: 0 0 3px 0; border-bottom: 0 } .box .lay-post { font-size: 16px; text-transform: capitalize; margin: 0 0 10px; display: block } .box .icon { padding: 0; margin: 0; list-style: none } .box .icon li { display: inline-block; margin: 0 4px } .box .icon li a { color: #fff; background-color: #1e272e; font-size: 18px; text-align: center; line-height: 35px; height: 35px; width: 35px; border-radius: 50%; display: block; transition: all .3s } .box .icon li a:hover { color: #1e272e; background-color: #fff; border-radius: 10%; border-bottom: 1px solid gray; box-shadow: 0 0 5px #1e272e inset } @media only screen and (max-width: 990px) { .box { margin: 0 0 30px } } @media only screen and (max-width: 479px) { .box .title { font-size: 20px } } @media (max-width: 767px) { .box { width: 90%; margin: 3% 5% } .box:hover:before { right: -105%; top: -19% } .box:after, .box:hover:after { / / opacity: 0; display: none } }"},{"title":"友情链接","date":"2019-10-18T16:46:39.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"links/index.html","permalink":"https://hasaik.com/links/index.html","excerpt":"","text":"友链格式 名称：John Xu的博客 地址：https://hasaik.com 描述：博观而约取，厚积而薄发！ 头像：https://hasaik.com/images/avatar.jpg 申请要求 谷歌、百度等搜索引擎收录 无广告推广，头像外链不 403 仅限 HTTPS 的个人域名非商业网站 友链申明 站点失效、停止维护、内容不当都可能被取消友链 禁链不尊重他人劳动成果，转载、引用不加出处，恶意行为的站点 本站会定期检查并清理无效的、单方面的友链，如更换信息请留言，谢谢合作 .posts-expand .post-body h2::before { display: none } .post-body a:hover{ border-bottom: 0px solid #fc6423; }"},{"title":"观影系列","date":"2019-10-28T13:07:54.000Z","updated":"2020-03-18T08:08:35.880Z","comments":false,"path":"movies/index.html","permalink":"https://hasaik.com/movies/index.html","excerpt":"","text":""},{"title":"","date":"2020-03-18T08:08:35.880Z","updated":"2020-03-18T08:08:35.880Z","comments":true,"path":"photos/BabyData.json","permalink":"https://hasaik.com/photos/BabyData.json","excerpt":"","text":"{\"list\":[{\"date\":\"2019-10\",\"arr\":{\"year\":2019,\"month\":10,\"link\":[\"2019-10-29_baby8.jpg\",\"2019-10-29_baby7.jpg\",\"2019-10-29_baby6.jpg\",\"2019-10-29_baby5.jpg\",\"2019-10-29_baby4.jpg\",\"2019-10-29_baby3.jpg\",\"2019-10-29_baby2.jpg\",\"2019-10-29_baby1.jpg\"],\"text\":[\"baby8\",\"baby7\",\"baby6\",\"baby5\",\"baby4\",\"baby3\",\"baby2\",\"baby1\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2019-09\",\"arr\":{\"year\":2019,\"month\":9,\"link\":[\"2019-09-29_baby8.jpg\",\"2019-09-29_baby7.jpg\",\"2019-09-29_baby6.jpg\",\"2019-09-29_baby5.jpg\",\"2019-09-29_baby4.jpg\",\"2019-09-29_baby3.jpg\",\"2019-09-29_baby2.jpg\",\"2019-09-29_baby1.jpg\"],\"text\":[\"baby8\",\"baby7\",\"baby6\",\"baby5\",\"baby4\",\"baby3\",\"baby2\",\"baby1\"],\"type\":[\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\",\"image\"]}}]}"},{"title":"","date":"2020-03-18T08:08:35.880Z","updated":"2020-03-18T08:08:35.880Z","comments":true,"path":"photos/OwnData.json","permalink":"https://hasaik.com/photos/OwnData.json","excerpt":"","text":"{\"list\":[{\"date\":\"2019-10\",\"arr\":{\"year\":2019,\"month\":10,\"link\":[\"2019-10-29_Me4.jpg\",\"2019-10-29_Me3.jpg\",\"2019-10-29_Me2.jpg\",\"2019-10-29_Me1.jpg\"],\"text\":[\"Me4\",\"Me3\",\"Me2\",\"Me1\"],\"type\":[\"image\",\"image\",\"image\",\"image\"]}}]}"},{"title":"","date":"2020-03-18T08:08:35.880Z","updated":"2020-03-18T08:08:35.880Z","comments":true,"path":"photos/SceneryData.json","permalink":"https://hasaik.com/photos/SceneryData.json","excerpt":"","text":"{\"list\":[{\"date\":\"2019-10\",\"arr\":{\"year\":2019,\"month\":10,\"link\":[\"2019-10-29_风景4.jpg\",\"2019-10-29_风景3.jpeg\",\"2019-10-29_风景2.jpeg\",\"2019-10-29_风景1.jpg\"],\"text\":[\"风景4\",\"风景3\",\"风景2\",\"风景1\"],\"type\":[\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2019-09\",\"arr\":{\"year\":2019,\"month\":9,\"link\":[\"2019-09-29_风景4.jpg\",\"2019-09-29_风景3.jpeg\",\"2019-09-29_风景2.jpg\",\"2019-09-29_风景1.jpg\"],\"text\":[\"风景4\",\"风景3\",\"风景2\",\"风景1\"],\"type\":[\"image\",\"image\",\"image\",\"image\"]}},{\"date\":\"2019-08\",\"arr\":{\"year\":2019,\"month\":8,\"link\":[\"2019-08-29_风景4.jpg\",\"2019-08-29_风景3.jpg\",\"2019-08-29_风景2.jpg\",\"2019-08-29_风景1.jpg\"],\"text\":[\"风景4\",\"风景3\",\"风景2\",\"风景1\"],\"type\":[\"image\",\"image\",\"image\",\"image\"]}}]}"},{"title":"相册系列","date":"2019-10-29T09:57:45.000Z","updated":"2020-03-18T08:08:35.880Z","comments":false,"path":"photos/index.html","permalink":"https://hasaik.com/photos/index.html","excerpt":"","text":"风景图片 个人图片 宝贝图片 图片正在加载中… 图片正在加载中… 图片正在加载中… (function () { var loadScript = function (path) { var $script = document.createElement('script') document.getElementsByTagName('body')[0].appendChild($script) $script.setAttribute('src', path) } setTimeout(function () { loadScript('./ins.js') }, 0) })() function loadPhotos(val) { $(\"#tagType\").val(val) //校验密码(个人和宝贝加密) if (val === 2 || val === 3) { //删除本页面的输入密码组件 $(\".description\").remove(); $(\".qiang\").remove(); $(\".ownPhotoPassword\").remove(); $(\".babyPhotoPassword\").remove(); checkPassword(val); } else { var loadScript = function (path) { var $script = document.createElement('script') document.getElementsByTagName('body')[0].appendChild($script) $script.setAttribute('src', path) } setTimeout(function () { loadScript('./ins.js') }, 0) } }"},{"title":"","date":"2020-03-18T08:08:35.880Z","updated":"2020-03-18T08:08:35.880Z","comments":true,"path":"photos/photoswipe.css","permalink":"https://hasaik.com/photos/photoswipe.css","excerpt":"","text":"/* build time:Wed Mar 18 2020 08:09:33 GMT+0000 (Coordinated Universal Time)*/ /*! PhotoSwipe main CSS by Dmitry Semenov | photoswipe.com | MIT license */.pswp{display:none;position:absolute;width:100%;height:100%;left:0;top:0;overflow:hidden;-ms-touch-action:none;touch-action:none;z-index:1500;-webkit-text-size-adjust:100%;-webkit-backface-visibility:hidden;outline:0}.pswp *{-webkit-box-sizing:border-box;box-sizing:border-box}.pswp img{max-width:none}.pswp--animate_opacity{opacity:.001;will-change:opacity;-webkit-transition:opacity 333ms cubic-bezier(.4,0,.22,1);transition:opacity 333ms cubic-bezier(.4,0,.22,1)}.pswp--open{display:block}.pswp--zoom-allowed .pswp__img{cursor:-webkit-zoom-in;cursor:-moz-zoom-in;cursor:zoom-in}.pswp--zoomed-in .pswp__img{cursor:-webkit-grab;cursor:-moz-grab;cursor:grab}.pswp--dragging .pswp__img{cursor:-webkit-grabbing;cursor:-moz-grabbing;cursor:grabbing}.pswp__bg{position:absolute;left:0;top:0;width:100%;height:100%;background:#000;opacity:0;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-backface-visibility:hidden;will-change:opacity}.pswp__scroll-wrap{position:absolute;left:0;top:0;width:100%;height:100%;overflow:hidden}.pswp__container,.pswp__zoom-wrap{-ms-touch-action:none;touch-action:none;position:absolute;left:0;right:0;top:0;bottom:0}.pswp__container,.pswp__img{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none}.pswp__zoom-wrap{position:absolute;width:100%;-webkit-transform-origin:left top;-ms-transform-origin:left top;transform-origin:left top;-webkit-transition:-webkit-transform 333ms cubic-bezier(.4,0,.22,1);transition:transform 333ms cubic-bezier(.4,0,.22,1)}.pswp__bg{will-change:opacity;-webkit-transition:opacity 333ms cubic-bezier(.4,0,.22,1);transition:opacity 333ms cubic-bezier(.4,0,.22,1)}.pswp--animated-in .pswp__bg,.pswp--animated-in .pswp__zoom-wrap{-webkit-transition:none;transition:none}.pswp__container,.pswp__zoom-wrap{-webkit-backface-visibility:hidden}.pswp__item{position:absolute;left:0;right:0;top:0;bottom:0;overflow:hidden}.pswp__img{position:absolute;width:auto;height:auto;top:0;left:0}.pswp__img--placeholder{-webkit-backface-visibility:hidden}.pswp__img--placeholder--blank{background:#222}.pswp--ie .pswp__img{width:100%!important;height:auto!important;left:0;top:0}.pswp__error-msg{position:absolute;left:0;top:50%;width:100%;text-align:center;font-size:14px;line-height:16px;margin-top:-8px;color:#ccc}.pswp__error-msg a{color:#ccc;text-decoration:underline} /* rebuild by neat */"},{"title":"标签","date":"2019-10-10T16:43:18.000Z","updated":"2020-03-18T08:08:35.880Z","comments":false,"path":"tags/index.html","permalink":"https://hasaik.com/tags/index.html","excerpt":"","text":""},{"title":"文章热度排行","date":"2019-11-03T14:37:48.000Z","updated":"2020-03-18T08:08:35.880Z","comments":false,"path":"top/index.html","permalink":"https://hasaik.com/top/index.html","excerpt":"","text":"AV.initialize(\"gYcUzERw1BSKyARbzWH2OQzu-gzGzoHsz\", \"7xvFncnnyG2QI60iDY3E4PuO\"); var time = 0 var title = \"\" var url = \"\" var query = new AV.Query('Counter'); query.notEqualTo('id', 0); query.descending('time'); query.limit(1000); query.find().then(function (todo) { for (var i = 0; i < 1000; i++) { var result = todo[i].attributes; time = result.time; title = result.title; url = result.url; var content = \"\" + \"\" + \"➤【热度: \" + \"\" + \"\" + time + \" ℃】\" + \"\" + \"\" + title + \"\" + \"\"; document.getElementById(\"top\").innerHTML += content } }, function (error) { console.log(\"error\"); }); .post-description { display: none; }"},{"title":"关于博主","date":"2019-10-10T16:43:04.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"about/index.html","permalink":"https://hasaik.com/about/index.html","excerpt":"","text":"关于博主： 博主姓名：徐旭 爱好：健身、接触新事物、打游戏 职业：90后小码农 博客主题：博观而约取，厚积而薄发 梦想：全栈工程师 简介：脚下的路如果不是你自己的选择.. 那旅程的终点在哪..也没人知道... --谢谢你们的照顾---^-^-- 亲爱的Ferry： I will always love you^-^ 优秀的人，不是不合群，而是他们合群的人里没有你 Your browser does not support the video tag. About me 90后小码农 Java 编程菜鸟 平常喜欢旅行、健身、接触新事物、打游戏 希望能赚很多钱，去干够风骚有意义的事 Contact Qmail： 22476705@qq.com Gmail： johnxuxuy@gmail.com GitHub： https://github.com/XuxuGood Note 欢迎转载，请在文章页面明显位置给出原文连接，感谢您的阅读 Donate 本站所有文章均免费开放，如您喜欢，可以请我喝杯咖啡 打赏 微信支付 支付宝 谢各位大佬赏~ (^__^) Y…… 赞助人 金额 时间 渠道 留言 小包小白 ￥ 0.96 2019-10-12 微信 Ricardo Li ￥ 6.66 2019-11-27 支付宝 玩家 ￥ 0.01 2019-11-28 微信 宝贝&nbsp; ￥ 5.21 2020-01-06 支付宝 有什么话要对我说吗？这里是你畅所欲言的地方，可以咨询，可以交流，可以感叹，可以发飙，但 不！可！以！订外卖 (function () { var windowWidth = $(window).width(); //为了防止不影响移动端的阅读体验，特意增加了屏幕宽度的判断，请根据需要决定是否添加，或者注释掉。 if (windowWidth < 767) { $(\".post-title\").hide() $(\"#wrap\").hide() } else { $(\"#mobile\").hide() } var canvas = $('#canvas1'); if (!canvas[0].getContext) { $(\"#error\").show(); return false; } var width = canvas.width(); var height = canvas.height(); canvas.attr(\"width\", width); canvas.attr(\"height\", height); var opts = { seed: { x: width / 2 - 20, color: \"rgb(190, 26, 37)\", scale: 2 }, branch: [ [535, 680, 570, 250, 500, 200, 30, 100, [ [540, 500, 455, 417, 340, 400, 13, 100, [ [450, 435, 434, 430, 394, 395, 2, 40] ]], [550, 445, 600, 356, 680, 345, 12, 100, [ [578, 400, 648, 409, 661, 426, 3, 80] ]], [539, 281, 537, 248, 534, 217, 3, 40], [546, 397, 413, 247, 328, 244, 9, 80, [ [427, 286, 383, 253, 371, 205, 2, 40], [498, 345, 435, 315, 395, 330, 4, 60] ]], [546, 357, 608, 252, 678, 221, 6, 100, [ [590, 293, 646, 277, 648, 271, 2, 80] ]] ]] ], bloom: { num: 700, width: 1080, height: 650, }, footer: { width: 1200, height: 5, speed: 10, } } var tree = new Tree(canvas[0], width, height, opts); var seed = tree.seed; var foot = tree.footer; var hold = 1; canvas.click(function (e) { var offset = canvas.offset(), x, y; x = e.pageX - offset.left; y = e.pageY - offset.top; if (seed.hover(x, y)) { hold = 0; canvas.unbind(\"click\"); canvas.unbind(\"mousemove\"); canvas.removeClass('hand'); } }).mousemove(function (e) { var offset = canvas.offset(), x, y; x = e.pageX - offset.left; y = e.pageY - offset.top; canvas.toggleClass('hand', seed.hover(x, y)); }); var seedAnimate = eval(Jscex.compile(\"async\", function () { seed.draw(); while (hold) { $await(Jscex.Async.sleep(10)); } while (seed.canScale()) { seed.scale(0.95); $await(Jscex.Async.sleep(10)); } while (seed.canMove()) { seed.move(0, 2); foot.draw(); $await(Jscex.Async.sleep(10)); } })); var growAnimate = eval(Jscex.compile(\"async\", function () { do { tree.grow(); $await(Jscex.Async.sleep(10)); } while (tree.canGrow()); })); var flowAnimate = eval(Jscex.compile(\"async\", function () { do { tree.flower(2); $await(Jscex.Async.sleep(10)); } while (tree.canFlower()); })); var moveAnimate = eval(Jscex.compile(\"async\", function () { tree.snapshot(\"p1\", 240, 0, 610, 680); while (tree.move(\"p1\", 320, 0)) { foot.draw(); $await(Jscex.Async.sleep(10)); } foot.draw(); tree.snapshot(\"p2\", 500, 0, 610, 680); // 会有闪烁不得意这样做, (＞﹏＜) canvas.parent().css(\"background\", \"url(\" + tree.toDataURL('image/png') + \")\"); // canvas.css(\"background\", \"#ffe\"); $await(Jscex.Async.sleep(300)); canvas.css(\"background\", \"none\"); })); var jumpAnimate = eval(Jscex.compile(\"async\", function () { var ctx = tree.ctx; while (true) { tree.ctx.clearRect(0, 0, width, height); tree.jump(); foot.draw(); $await(Jscex.Async.sleep(25)); } })); var textAnimate = eval(Jscex.compile(\"async\", function () { //一行一行输出字 $(\"#code\").show().each(function () { var $ele = $(this), str = $ele.html(), progress = 0; $ele.html(''); var timer = setInterval(function () { var current = str.substr(progress, 1); if (current == '', progress) + 1; } else { progress++; } $ele.html(str.substring(0, progress) + (progress & 1 ? '_' : '')); if (progress >= str.length) { clearInterval(timer); } }, 75); }); //时间 var together = new Date('2017/07/04 00:00:00');//时间年月日时分秒 $(\"#clock-box\").fadeIn(500); while (true) { timeElapse(together); $await(Jscex.Async.sleep(1000)); } })); var runAsync = eval(Jscex.compile(\"async\", function () { $await(seedAnimate()); $await(growAnimate()); $await(flowAnimate()); $await(moveAnimate()); textAnimate().start(); $await(jumpAnimate()); })); runAsync().start(); })(); function dashang() { var e = document.getElementById(\"QR\"); \"none\" === e.style.display ? e.style.display = \"block\" : e.style.display = \"none\" }"},{"title":"","date":"2020-03-18T08:08:35.880Z","updated":"2020-03-18T08:08:35.880Z","comments":true,"path":"photos/ins.css","permalink":"https://hasaik.com/photos/ins.css","excerpt":"","text":"/* build time:Wed Mar 18 2020 08:09:33 GMT+0000 (Coordinated Universal Time)*/ #post-instagram1{padding:30px}#post-instagram2{padding:30px}#post-instagram3{padding:30px}figure{margin:0}#post-instagram1 .article-entry{padding-right:0}#post-instagram2 .article-entry{padding-right:0}#post-instagram3 .article-entry{padding-right:0}.instagram1{position:relative;min-height:500px}.instagram2{position:relative;min-height:500px}.instagram3{position:relative;min-height:500px}.instagram1 img{width:100%}.instagram2 img{width:100%}.instagram3 img{width:100%}.posts-expand .post-body img{padding:0;border:0}.instagram1 .year{font-size:16px}.instagram2 .year{font-size:16px}.instagram3 .year{font-size:16px}.instagram1 .open-ins{padding:10px 0;color:#cdcdcd}.instagram2 .open-ins{padding:10px 0;color:#cdcdcd}.instagram3 .open-ins{padding:10px 0;color:#cdcdcd}.instagram1 .open-ins:hover{color:#657b83}.instagram2 .open-ins:hover{color:#657b83}.instagram3 .open-ins:hover{color:#657b83}.instagram1 .year{display:inline}.instagram2 .year{display:inline}.instagram3 .year{display:inline}.instagram1 .thumb{width:25%;height:0;padding-bottom:25%;position:relative;display:inline-block;text-align:center;background:#ededed;outline:1px solid #ddd}.instagram2 .thumb{width:25%;height:0;padding-bottom:25%;position:relative;display:inline-block;text-align:center;background:#ededed;outline:1px solid #ddd}.instagram3 .thumb{width:25%;height:0;padding-bottom:25%;position:relative;display:inline-block;text-align:center;background:#ededed;outline:1px solid #ddd}.instagram1 .thumb a{position:relative}.instagram2 .thumb a{position:relative}.instagram3 .thumb a{position:relative}.instagram1 .album h1 em{font-style:normal;font-size:14px;margin-left:10px}.instagram2 .album h1 em{font-style:normal;font-size:14px;margin-left:10px}.instagram3 .album h1 em{font-style:normal;font-size:14px;margin-left:10px}.instagram1 .album ul{margin-left:-39px;display:flex;flex-wrap:wrap;clear:both;width:100%;text-align:left}.instagram2 .album ul{margin-left:-39px;display:flex;flex-wrap:wrap;clear:both;width:100%;text-align:left}.instagram3 .album ul{margin-left:-39px;display:flex;flex-wrap:wrap;clear:both;width:100%;text-align:left}.instagram1 .album li{list-style:none;display:inline-block;box-sizing:border-box;padding:0 5px;margin-bottom:-10px;height:0;width:25%;position:relative;padding-bottom:25%}.instagram2 .album li{list-style:none;display:inline-block;box-sizing:border-box;padding:0 5px;margin-bottom:-10px;height:0;width:25%;position:relative;padding-bottom:25%}.instagram3 .album li{list-style:none;display:inline-block;box-sizing:border-box;padding:0 5px;margin-bottom:-10px;height:0;width:25%;position:relative;padding-bottom:25%}.instagram1 .album li:before{display:none}.instagram2 .album li:before{display:none}.instagram3 .album li:before{display:none}.instagram1 .album div.img-box{position:absolute;width:90%;height:90%;-webkit-box-shadow:0 1px 0 rgba(255,255,255,.4),0 1px 0 1px rgba(255,255,255,.1);-moz-box-shadow:0 1px 0 rgba(255,255,255,.4),0 1px 0 1px rgba(255,255,255,.1);box-shadow:0 1px 0 rgba(255,255,255,.4),0 1px 0 1px rgba(255,255,255,.1)}.instagram2 .album div.img-box{position:absolute;width:90%;height:90%;-webkit-box-shadow:0 1px 0 rgba(255,255,255,.4),0 1px 0 1px rgba(255,255,255,.1);-moz-box-shadow:0 1px 0 rgba(255,255,255,.4),0 1px 0 1px rgba(255,255,255,.1);box-shadow:0 1px 0 rgba(255,255,255,.4),0 1px 0 1px rgba(255,255,255,.1)}.instagram3 .album div.img-box{position:absolute;width:90%;height:90%;-webkit-box-shadow:0 1px 0 rgba(255,255,255,.4),0 1px 0 1px rgba(255,255,255,.1);-moz-box-shadow:0 1px 0 rgba(255,255,255,.4),0 1px 0 1px rgba(255,255,255,.1);box-shadow:0 1px 0 rgba(255,255,255,.4),0 1px 0 1px rgba(255,255,255,.1)}.instagram1 .album div.img-box img{width:100%;height:100%;position:absolute;z-index:2}.instagram2 .album div.img-box img{width:100%;height:100%;position:absolute;z-index:2}.instagram3 .album div.img-box img{width:100%;height:100%;position:absolute;z-index:2}.instagram1 .album div.img-box .img-bg{position:absolute;top:0;left:0;bottom:0;width:100%;margin:-5px;padding:5px;-webkit-box-shadow:0 0 0 1px rgba(0,0,0,.04),0 1px 5px rgba(0,0,0,.1);-moz-box-shadow:0 0 0 1px rgba(0,0,0,.04),0 1px 5px rgba(0,0,0,.1);box-shadow:0 0 0 1px rgba(0,0,0,.04),0 1px 5px rgba(0,0,0,.1);-webkit-transition:all .15s ease-out .1s;-moz-transition:all .15s ease-out .1s;-o-transition:all .15s ease-out .1s;transition:all .15s ease-out .1s;opacity:.2;cursor:pointer;display:block;z-index:3}.instagram2 .album div.img-box .img-bg{position:absolute;top:0;left:0;bottom:0;width:100%;margin:-5px;padding:5px;-webkit-box-shadow:0 0 0 1px rgba(0,0,0,.04),0 1px 5px rgba(0,0,0,.1);-moz-box-shadow:0 0 0 1px rgba(0,0,0,.04),0 1px 5px rgba(0,0,0,.1);box-shadow:0 0 0 1px rgba(0,0,0,.04),0 1px 5px rgba(0,0,0,.1);-webkit-transition:all .15s ease-out .1s;-moz-transition:all .15s ease-out .1s;-o-transition:all .15s ease-out .1s;transition:all .15s ease-out .1s;opacity:.2;cursor:pointer;display:block;z-index:3}.instagram3 .album div.img-box .img-bg{position:absolute;top:0;left:0;bottom:0;width:100%;margin:-5px;padding:5px;-webkit-box-shadow:0 0 0 1px rgba(0,0,0,.04),0 1px 5px rgba(0,0,0,.1);-moz-box-shadow:0 0 0 1px rgba(0,0,0,.04),0 1px 5px rgba(0,0,0,.1);box-shadow:0 0 0 1px rgba(0,0,0,.04),0 1px 5px rgba(0,0,0,.1);-webkit-transition:all .15s ease-out .1s;-moz-transition:all .15s ease-out .1s;-o-transition:all .15s ease-out .1s;transition:all .15s ease-out .1s;opacity:.2;cursor:pointer;display:block;z-index:3}.instagram1 .album div.img-box .icon{font-size:14px;position:absolute;left:50%;top:50%;margin-left:-7px;margin-top:-7px;color:#999;z-index:1}.instagram2 .album div.img-box .icon{font-size:14px;position:absolute;left:50%;top:50%;margin-left:-7px;margin-top:-7px;color:#999;z-index:1}.instagram3 .album div.img-box .icon{font-size:14px;position:absolute;left:50%;top:50%;margin-left:-7px;margin-top:-7px;color:#999;z-index:1}.instagram1 .album div.img-box .img-bg:hover{opacity:0}.instagram2 .album div.img-box .img-bg:hover{opacity:0}.instagram3 .album div.img-box .img-bg:hover{opacity:0}.photos-btn-wrap{border-bottom:1px solid #e5e5e5;margin-bottom:20px}.photos-btn{font-size:16px;color:#333;margin-bottom:-4px;padding:5px 8px 3px}.photos-btn.active{color:#08c;border:1px solid #e5e5e5;border-bottom:5px solid #fff}@media screen and (max-width:600px){.instagram1 .thumb{width:50%;padding-bottom:50%}.instagram1 .album li{width:100%;position:relative;padding-bottom:100%;text-align:center}.instagram1 .album div.img-box{margin:0;width:90%;height:90%}}@media screen and (max-width:600px){.instagram1 .thumb{width:50%;padding-bottom:50%}.instagram2 .thumb{width:50%;padding-bottom:50%}.instagram3 .thumb{width:50%;padding-bottom:50%}.instagram1 .album li{width:100%;position:relative;padding-bottom:100%;text-align:center}.instagram2 .album li{width:100%;position:relative;padding-bottom:100%;text-align:center}.instagram3 .album li{width:100%;position:relative;padding-bottom:100%;text-align:center}.instagram1 .album div.img-box{margin:0;width:90%;height:90%}.instagram2 .album div.img-box{margin:0;width:90%;height:90%}.instagram3 .album div.img-box{margin:0;width:90%;height:90%}} /* rebuild by neat */"},{"title":"","date":"2020-03-18T08:08:35.860Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"about/renxi/default.css","permalink":"https://hasaik.com/about/renxi/default.css","excerpt":"","text":"/* build time:Wed Mar 18 2020 08:09:33 GMT+0000 (Coordinated Universal Time)*/ #main{width:100%}#wrap{position:relative;margin:0 auto;width:900px;height:680px;margin-top:10px}#text{width:400px;height:425px;top:80px;position:absolute}#code{display:none;font-size:16px}#clock-box{position:absolute;top:520px;font-size:26px;display:none}#clock-box a{font-size:28px;text-decoration:none}#clock{margin-left:48px}#clock .digit{font-size:64px}#canvas1{margin:0 auto;width:100%;height:100%}#error{margin:0 auto;text-align:center;margin-top:60px;display:none}.hand{cursor:pointer}.say{margin-left:5px}.space{margin-right:150px}#dashang{animation:heartAnimate 1.33s ease-in-out infinite}#das{position:relative;width:50px;transition:all .3s}#das:before{content:'打'}#das:after{content:'赏'}#das:after,#das:before{position:absolute;left:25px;top:0;width:25px;height:40px;background:red;border-radius:40px 40px 0 0;transform:rotate(-45deg);transform-origin:0 100%}#das:after{left:0;top:0;transform:rotate(45deg);transform-origin:100% 100%}#QR p{margin:20px 0 10px 0;text-align:center} /* rebuild by neat */"},{"title":"","date":"2020-03-18T08:08:35.880Z","updated":"2020-03-18T08:08:35.880Z","comments":true,"path":"photos/default-skin/default-skin.css","permalink":"https://hasaik.com/photos/default-skin/default-skin.css","excerpt":"","text":"/* build time:Wed Mar 18 2020 08:09:33 GMT+0000 (Coordinated Universal Time)*/ /*! PhotoSwipe Default UI CSS by Dmitry Semenov | photoswipe.com | MIT license */.pswp__button{width:44px;height:44px;position:relative;background:0 0;cursor:pointer;overflow:visible;-webkit-appearance:none;display:block;border:0;padding:0;margin:0;float:right;opacity:.75;-webkit-transition:opacity .2s;transition:opacity .2s;-webkit-box-shadow:none;box-shadow:none}.pswp__button:focus,.pswp__button:hover{opacity:1}.pswp__button:active{outline:0;opacity:.9}.pswp__button::-moz-focus-inner{padding:0;border:0}.pswp__ui--over-close .pswp__button--close{opacity:1}.pswp__button,.pswp__button--arrow--left:before,.pswp__button--arrow--right:before{background:url(default-skin.png) 0 0 no-repeat;background-size:264px 88px;width:44px;height:44px}@media (-webkit-min-device-pixel-ratio:1.1),(-webkit-min-device-pixel-ratio:1.09375),(min-resolution:105dpi),(min-resolution:1.1dppx){.pswp--svg .pswp__button,.pswp--svg .pswp__button--arrow--left:before,.pswp--svg .pswp__button--arrow--right:before{background-image:url(default-skin.svg)}.pswp--svg .pswp__button--arrow--left,.pswp--svg .pswp__button--arrow--right{background:0 0}}.pswp__button--close{background-position:0 -44px}.pswp__button--share{background-position:-44px -44px}.pswp__button--fs{display:none}.pswp--supports-fs .pswp__button--fs{display:block}.pswp--fs .pswp__button--fs{background-position:-44px 0}.pswp__button--zoom{display:none;background-position:-88px 0}.pswp--zoom-allowed .pswp__button--zoom{display:block}.pswp--zoomed-in .pswp__button--zoom{background-position:-132px 0}.pswp--touch .pswp__button--arrow--left,.pswp--touch .pswp__button--arrow--right{visibility:hidden}.pswp__button--arrow--left,.pswp__button--arrow--right{background:0 0;top:50%;margin-top:-50px;width:70px;height:100px;position:absolute}.pswp__button--arrow--left{left:0}.pswp__button--arrow--right{right:0}.pswp__button--arrow--left:before,.pswp__button--arrow--right:before{content:'';top:35px;background-color:rgba(0,0,0,.3);height:30px;width:32px;position:absolute}.pswp__button--arrow--left:before{left:6px;background-position:-138px -44px}.pswp__button--arrow--right:before{right:6px;background-position:-94px -44px}.pswp__counter,.pswp__share-modal{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.pswp__share-modal{display:block;background:rgba(0,0,0,.5);width:100%;height:100%;top:0;left:0;padding:10px;position:absolute;z-index:1600;opacity:0;-webkit-transition:opacity .25s ease-out;transition:opacity .25s ease-out;-webkit-backface-visibility:hidden;will-change:opacity}.pswp__share-modal--hidden{display:none}.pswp__share-tooltip{z-index:1620;position:absolute;background:#fff;top:56px;border-radius:2px;display:block;width:auto;right:44px;-webkit-box-shadow:0 2px 5px rgba(0,0,0,.25);box-shadow:0 2px 5px rgba(0,0,0,.25);-webkit-transform:translateY(6px);-ms-transform:translateY(6px);transform:translateY(6px);-webkit-transition:-webkit-transform .25s;transition:transform .25s;-webkit-backface-visibility:hidden;will-change:transform}.pswp__share-tooltip a{display:block;padding:8px 12px;color:#000;text-decoration:none;font-size:14px;line-height:18px}.pswp__share-tooltip a:hover{text-decoration:none;color:#000}.pswp__share-tooltip a:first-child{border-radius:2px 2px 0 0}.pswp__share-tooltip a:last-child{border-radius:0 0 2px 2px}.pswp__share-modal--fade-in{opacity:1}.pswp__share-modal--fade-in .pswp__share-tooltip{-webkit-transform:translateY(0);-ms-transform:translateY(0);transform:translateY(0)}.pswp--touch .pswp__share-tooltip a{padding:16px 12px}a.pswp__share--facebook:before{content:'';display:block;width:0;height:0;position:absolute;top:-12px;right:15px;border:6px solid transparent;border-bottom-color:#fff;-webkit-pointer-events:none;-moz-pointer-events:none;pointer-events:none}a.pswp__share--facebook:hover{background:#3e5c9a;color:#fff}a.pswp__share--facebook:hover:before{border-bottom-color:#3e5c9a}a.pswp__share--twitter:hover{background:#55acee;color:#fff}a.pswp__share--pinterest:hover{background:#ccc;color:#ce272d}a.pswp__share--download:hover{background:#ddd}.pswp__counter{position:absolute;left:0;top:0;height:44px;font-size:13px;line-height:44px;color:#fff;opacity:.75;padding:0 10px}.pswp__caption{position:absolute;left:0;bottom:0;width:100%;min-height:44px}.pswp__caption small{font-size:11px;color:#bbb}.pswp__caption__center{text-align:left;max-width:420px;margin:0 auto;font-size:13px;padding:10px;line-height:20px;color:#ccc}.pswp__caption--empty{display:none}.pswp__caption--fake{visibility:hidden}.pswp__preloader{width:44px;height:44px;position:absolute;top:0;left:50%;margin-left:-22px;opacity:0;-webkit-transition:opacity .25s ease-out;transition:opacity .25s ease-out;will-change:opacity;direction:ltr}.pswp__preloader__icn{width:20px;height:20px;margin:12px}.pswp__preloader--active{opacity:1}.pswp__preloader--active .pswp__preloader__icn{background:url(preloader.gif) 0 0 no-repeat}.pswp--css_animation .pswp__preloader--active{opacity:1}.pswp--css_animation .pswp__preloader--active .pswp__preloader__icn{-webkit-animation:clockwise .5s linear infinite;animation:clockwise .5s linear infinite}.pswp--css_animation .pswp__preloader--active .pswp__preloader__donut{-webkit-animation:donut-rotate 1s cubic-bezier(.4,0,.22,1) infinite;animation:donut-rotate 1s cubic-bezier(.4,0,.22,1) infinite}.pswp--css_animation .pswp__preloader__icn{background:0 0;opacity:.75;width:14px;height:14px;position:absolute;left:15px;top:15px;margin:0}.pswp--css_animation .pswp__preloader__cut{position:relative;width:7px;height:14px;overflow:hidden}.pswp--css_animation .pswp__preloader__donut{-webkit-box-sizing:border-box;box-sizing:border-box;width:14px;height:14px;border:2px solid #fff;border-radius:50%;border-left-color:transparent;border-bottom-color:transparent;position:absolute;top:0;left:0;background:0 0;margin:0}@media screen and (max-width:1024px){.pswp__preloader{position:relative;left:auto;top:auto;margin:0;float:right}}@-webkit-keyframes clockwise{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes clockwise{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes donut-rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}50%{-webkit-transform:rotate(-140deg);transform:rotate(-140deg)}100%{-webkit-transform:rotate(0);transform:rotate(0)}}@keyframes donut-rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}50%{-webkit-transform:rotate(-140deg);transform:rotate(-140deg)}100%{-webkit-transform:rotate(0);transform:rotate(0)}}.pswp__ui{-webkit-font-smoothing:auto;visibility:visible;opacity:1;z-index:1550}.pswp__top-bar{position:absolute;left:0;top:0;height:44px;width:100%}.pswp--has_mouse .pswp__button--arrow--left,.pswp--has_mouse .pswp__button--arrow--right,.pswp__caption,.pswp__top-bar{-webkit-backface-visibility:hidden;will-change:opacity;-webkit-transition:opacity 333ms cubic-bezier(.4,0,.22,1);transition:opacity 333ms cubic-bezier(.4,0,.22,1)}.pswp--has_mouse .pswp__button--arrow--left,.pswp--has_mouse .pswp__button--arrow--right{visibility:visible}.pswp__caption,.pswp__top-bar{background-color:rgba(0,0,0,.5)}.pswp__ui--fit .pswp__caption,.pswp__ui--fit .pswp__top-bar{background-color:rgba(0,0,0,.3)}.pswp__ui--idle .pswp__top-bar{opacity:0}.pswp__ui--idle .pswp__button--arrow--left,.pswp__ui--idle .pswp__button--arrow--right{opacity:0}.pswp__ui--hidden .pswp__button--arrow--left,.pswp__ui--hidden .pswp__button--arrow--right,.pswp__ui--hidden .pswp__caption,.pswp__ui--hidden .pswp__top-bar{opacity:.001}.pswp__ui--one-slide .pswp__button--arrow--left,.pswp__ui--one-slide .pswp__button--arrow--right,.pswp__ui--one-slide .pswp__counter{display:none}.pswp__element--disabled{display:none!important}.pswp--minimal--dark .pswp__top-bar{background:0 0} /* rebuild by neat */"},{"title":"","date":"2020-03-18T08:08:35.880Z","updated":"2020-03-18T08:08:35.880Z","comments":true,"path":"photos/ins.js","permalink":"https://hasaik.com/photos/ins.js","excerpt":"","text":"/******/ (function (modules) { // webpackBootstrap /******/ // The module cache /******/ var installedModules = {}; /******/ /******/ // The require function /******/ function __webpack_require__(moduleId) { /******/ /******/ // Check if module is in cache /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports; /******/ /******/ // Create a new module (and put it into the cache) /******/ var module = installedModules[moduleId] = { /******/ exports: {}, /******/ id: moduleId, /******/ loaded: false /******/ }; /******/ /******/ // Execute the module function /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); /******/ /******/ // Flag the module as loaded /******/ module.loaded = true; /******/ /******/ // Return the exports of the module /******/ return module.exports; /******/ } /******/ /******/ /******/ // expose the modules object (__webpack_modules__) /******/ __webpack_require__.m = modules; /******/ /******/ // expose the module cache /******/ __webpack_require__.c = installedModules; /******/ /******/ // __webpack_public_path__ /******/ __webpack_require__.p = \"/dist/\"; /******/ /******/ // Load entry module and return exports /******/ return __webpack_require__(0); /******/ }) /************************************************************************/ /******/ ([ /* 0 */ /***/ function (module, exports, __webpack_require__) { 'use strict'; __webpack_require__(1); var _view = __webpack_require__(2); var _view2 = _interopRequireDefault(_view); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } /** * @name impush-client * @description 这个项目让我发家致富… * @date 2016-12-1 */ var _collection = []; var _count = 0; var searchData; function addMask(elem) { var rect = elem.getBoundingClientRect(); var style = getComputedStyle(elem, null); var mask = document.createElement('i'); mask.className = 'icon-film'; mask.style.color = '#fff'; mask.style.fontSize = '26px'; mask.style.position = 'absolute'; mask.style.right = '10px'; mask.style.bottom = '10px'; mask.style.zIndex = 1; elem.parentNode.appendChild(mask); } var createVideoIncon = function createVideoIncon() { var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]'); for (var i = 0, len = $videoImg.length; i < len; i++) { addMask($videoImg[i]); } }; var render = function render(tagType, res) { var ulTmpl = \"\"; for (var j = 0, len2 = res.list.length; j < len2; j++) { var data = res.list[j].arr; var liTmpl = \"\"; for (var i = 0, len = data.link.length; i < len; i++) { if (tagType === \"1\") { var minSrc = \"https://dev.tencent.com/u/XuxuGood/p/Blog_Back_Up/git/raw/master/SceneryPhotos/\" + data.link[i]; var src = \"https://dev.tencent.com/u/XuxuGood/p/Blog_Back_Up/git/raw/master/SceneryPhotos/\" + data.link[i]; } else if (tagType === \"2\") { var minSrc = \"https://dev.tencent.com/u/XuxuGood/p/Blog_Back_Up/git/raw/master/OwnPhotos/\" + data.link[i]; var src = \"https://dev.tencent.com/u/XuxuGood/p/Blog_Back_Up/git/raw/master/OwnPhotos/\" + data.link[i]; } else { var minSrc = \"https://dev.tencent.com/u/XuxuGood/p/Blog_Back_Up/git/raw/master/BabyPhotos/\" + data.link[i]; var src = \"https://dev.tencent.com/u/XuxuGood/p/Blog_Back_Up/git/raw/master/BabyPhotos/\" + data.link[i]; } var type = data.type[i]; var target = src + (type === 'video' ? '.mp4' : '.jpg'); src += ''; liTmpl += '\\ \\ \\ \\ ' + data.text[i] + '\\ '; } ulTmpl = ulTmpl + '' + data.year + '年' + data.month + '月\\ ' + liTmpl + '\\ '; } if (tagType === \"1\") { var box2 = document.getElementById(\"tagType2\"); if (box2 != null) { box2.remove(); } var box3 = document.getElementById(\"tagType3\"); if (box3 != null) { box3.remove(); } document.querySelector('.instagram1').innerHTML = '' + ulTmpl + ''; } else if (tagType === \"2\") { var box1 = document.getElementById(\"tagType1\"); if (box1 != null) { box1.remove(); } var box3 = document.getElementById(\"tagType3\"); if (box3 != null) { box3.remove(); } document.querySelector('.instagram2').innerHTML = '' + ulTmpl + ''; } else { var box1 = document.getElementById(\"tagType1\"); if (box1 != null) { box1.remove(); } var box2 = document.getElementById(\"tagType2\"); if (box2 != null) { box2.remove(); } document.querySelector('.instagram3').innerHTML = '' + ulTmpl + ''; } createVideoIncon(); _view2.default.init(); }; var replacer = function replacer(str) { var arr = str.split(\"/\"); return \"/assets/ins/\" + arr[arr.length - 1]; }; var ctrler = function ctrler(data) { var imgObj = {}; for (var i = 0, len = data.length; i < len; i++) { var y = data[i].y; var m = data[i].m; var src = replacer(data[i].src); var text = data[i].text; var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m); if (imgObj[key]) { imgObj[key].srclist.push(src); imgObj[key].text.push(text); } else { imgObj[key] = { year: y, month: m, srclist: [src], text: [text] }; } } render(imgObj); }; function loadData(tagType, success) { if (!searchData) { var xhr = new XMLHttpRequest(); if (tagType === \"1\") { xhr.open('GET', './SceneryData.json?t=' + new Date(), true); } else if (tagType === \"2\") { xhr.open('GET', './OwnData.json?t=' + new Date(), true); } else { xhr.open('GET', './BabyData.json?t=' + new Date(), true); } xhr.onload = function () { if (this.status >= 200 && this.status < 300) { var res = JSON.parse(this.response); searchData = res; success(searchData); } else { console.error(this.statusText); } }; xhr.onerror = function () { console.error(this.statusText); }; xhr.send(); } else { success(searchData); } } var Ins = { init: function init() { var tagType = $(\"#tagType\").val(); loadData(tagType, function (data) { render(tagType, data); }); } }; Ins.init(); // export default impush; /***/ }, /* 1 */ /***/ function (module, exports, __webpack_require__) { /* WEBPACK VAR INJECTION */ (function (global) { 'use strict'; var inViewport = __webpack_require__(3); var lazyAttrs = ['data-src']; global.lzld = lazyload(); // Provide libs using getAttribute early to get the good src // and not the fake data-src replaceGetAttribute('Image'); replaceGetAttribute('IFrame'); function registerLazyAttr(attr) { if (indexOf.call(lazyAttrs, attr) === -1) { lazyAttrs.push(attr); } } function lazyload(opts) { console.log(\"lazyload\") opts = merge({ 'offset': 333, 'src': 'data-src', 'container': false }, opts || {}); if (typeof opts.src === 'string') { registerLazyAttr(opts.src); } var elts = []; function show(elt) { var src = findRealSrc(elt); if (src) { elt.src = src; } elt.setAttribute('data-lzled', true); elts[indexOf.call(elts, elt)] = null; } function findRealSrc(elt) { if (typeof opts.src === 'function') { return opts.src(elt); } return elt.getAttribute(opts.src); } function register(elt) { elt.onload = null; elt.removeAttribute('onload'); elt.onerror = null; elt.removeAttribute('onerror'); if (indexOf.call(elts, elt) === -1) { inViewport(elt, opts, show); } } return register; } function replaceGetAttribute(elementName) { var fullname = 'HTML' + elementName + 'Element'; if (fullname in global === false) { return; } var original = global[fullname].prototype.getAttribute; global[fullname].prototype.getAttribute = function (name) { if (name === 'src') { var realSrc; for (var i = 0, max = lazyAttrs.length; i < max; i++) { realSrc = original.call(this, lazyAttrs[i]); if (realSrc) { break; } } return realSrc || original.call(this, name); } // our own lazyloader will go through theses lines // because we use getAttribute(opts.src) return original.call(this, name); }; } function merge(defaults, opts) { for (var name in defaults) { if (opts[name] === undefined) { opts[name] = defaults[name]; } } return opts; } // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html function indexOf(value) { for (var i = this.length; i-- && this[i] !== value;) { } return i; } module.exports = lazyload; // export default impush; /* WEBPACK VAR INJECTION */ }.call(exports, (function () { return this; }()))) /***/ }, /* 2 */ /***/ function (module, exports) { 'use strict'; var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) { // parse slide data (url, title, size ...) from DOM elements // (children of gallerySelector) var parseThumbnailElements = function parseThumbnailElements(el) { el = el.parentNode.parentNode; var thumbElements = el.getElementsByClassName('thumb'), numNodes = thumbElements.length, items = [], figureEl, linkEl, size, type, // video or not target, item; for (var i = 0; i < numNodes; i++) { figureEl = thumbElements[i]; // // include only element nodes if (figureEl.nodeType !== 1) { continue; } linkEl = figureEl.children[0]; // size = linkEl.getAttribute('data-size').split('x'); type = linkEl.getAttribute('data-type'); target = linkEl.getAttribute('data-target'); // create slide object item = { src: linkEl.getAttribute('href'), w: parseInt(size[0], 10), h: parseInt(size[1], 10) }; if (figureEl.children.length > 1) { item.title = figureEl.children[1].innerHTML; } if (linkEl.children.length > 0) { item.msrc = linkEl.children[0].getAttribute('src'); item.type = type; item.target = target; item.html = ''; if (type === 'video') { //item.src = null; } } item.el = figureEl; // save link to element for getThumbBoundsFn items.push(item); } return items; }; // find nearest parent element var closest = function closest(el, fn) { return el && (fn(el) ? el : closest(el.parentNode, fn)); }; // triggers when user clicks on thumbnail var onThumbnailsClick = function onThumbnailsClick(e) { e = e || window.event; e.preventDefault ? e.preventDefault() : e.returnValue = false; var eTarget = e.target || e.srcElement; // find root element of slide var clickedListItem = closest(eTarget, function (el) { return el.tagName && el.tagName.toUpperCase() === 'FIGURE'; }); if (!clickedListItem) { return; } // find index of clicked item by looping through all child nodes // alternatively, you may define index via data- attribute var clickedGallery = clickedListItem.parentNode, // childNodes = clickedListItem.parentNode.childNodes, // numChildNodes = childNodes.length, childNodes = document.getElementsByClassName('thumb'), numChildNodes = childNodes.length, nodeIndex = 0, index; for (var i = 0; i < numChildNodes; i++) { if (childNodes[i].nodeType !== 1) { continue; } if (childNodes[i] === clickedListItem) { index = nodeIndex; break; } nodeIndex++; } if (index >= 0) { // open PhotoSwipe if valid index found openPhotoSwipe(index, clickedGallery); } return false; }; // parse picture index and gallery index from URL (#&pid=1&gid=2) var photoswipeParseHash = function photoswipeParseHash() { var hash = window.location.hash.substring(1), params = {}; if (hash.length < 5) { return params; } var vars = hash.split('&'); for (var i = 0; i < vars.length; i++) { if (!vars[i]) { continue; } var pair = vars[i].split('='); if (pair.length < 2) { continue; } params[pair[0]] = pair[1]; } if (params.gid) { params.gid = parseInt(params.gid, 10); } return params; }; var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) { var pswpElement = document.querySelectorAll('.pswp')[0], gallery, options, items; items = parseThumbnailElements(galleryElement); // define options (if needed) options = { // define gallery index (for URL) galleryUID: galleryElement.getAttribute('data-pswp-uid'), getThumbBoundsFn: function getThumbBoundsFn(index) { // See Options -> getThumbBoundsFn section of documentation for more info var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail pageYScroll = window.pageYOffset || document.documentElement.scrollTop, rect = thumbnail.getBoundingClientRect(); return { x: rect.left, y: rect.top + pageYScroll, w: rect.width }; } }; // PhotoSwipe opened from URL if (fromURL) { if (options.galleryPIDs) { // parse real index when custom PIDs are used // http://photoswipe.com/documentation/faq.html#custom-pid-in-url for (var j = 0; j < items.length; j++) { if (items[j].pid == index) { options.index = j; break; } } } else { // in URL indexes start from 1 options.index = parseInt(index, 10) - 1; } } else { options.index = parseInt(index, 10); } // exit if index not found if (isNaN(options.index)) { return; } if (disableAnimation) { options.showAnimationDuration = 0; } // Pass data to PhotoSwipe and initialize it gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options); gallery.init(); var $tempVideo; var stopVideoHandle = function stopVideoHandle() { if ($tempVideo) { $tempVideo.remove(); $tempVideo = null; } }; var changeHandle = function changeHandle() { var item = gallery.currItem; stopVideoHandle(); if (item.type === 'video') { var $ctn = item.container; var style = $ctn.getElementsByClassName('pswp__img')[0].style; var $video = document.createElement('video'); $video.setAttribute('autoplay', 'autoplay'); $video.setAttribute('controls', 'controls'); $video.setAttribute('src', item.target); $video.style.width = style.width; $video.style.height = style.height; $video.style.position = 'absolute'; $video.style.zIndex = 2; $tempVideo = $video; $ctn.appendChild($video); } }; gallery.listen('initialZoomIn', changeHandle); gallery.listen('afterChange', changeHandle); gallery.listen('initialZoomOut', stopVideoHandle); }; // loop through all gallery elements and bind events var galleryElements = document.querySelectorAll(gallerySelector); for (var i = 0, l = galleryElements.length; i < l; i++) { galleryElements[i].setAttribute('data-pswp-uid', i + 1); galleryElements[i].onclick = onThumbnailsClick; } // Parse URL and open gallery if it contains #&pid=3&gid=1 var hashData = photoswipeParseHash(); if (hashData.pid && hashData.gid) { openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true); } }; var Viewer = function () { function init() { initPhotoSwipeFromDOM('.photos'); } return { init: init }; }(); module.exports = Viewer; /***/ }, /* 3 */ /***/ function (module, exports) { /* WEBPACK VAR INJECTION */ (function (global) { module.exports = inViewport; var instances = []; var supportsMutationObserver = typeof global.MutationObserver === 'function'; function inViewport(elt, params, cb) { var opts = { container: global.document.body, offset: 0 }; if (params === undefined || typeof params === 'function') { cb = params; params = {}; } var container = opts.container = params.container || opts.container; var offset = opts.offset = params.offset || opts.offset; for (var i = 0; i < instances.length; i++) { if (instances[i].container === container) { return instances[i].isInViewport(elt, offset, cb); } } return instances[ instances.push(createInViewport(container)) - 1 ].isInViewport(elt, offset, cb); } function addEvent(el, type, fn) { if (el.attachEvent) { el.attachEvent('on' + type, fn); } else { el.addEventListener(type, fn, false); } } function debounce(func, wait, immediate) { var timeout; return function () { var context = this, args = arguments; var callNow = immediate && !timeout; clearTimeout(timeout); timeout = setTimeout(later, wait); if (callNow) func.apply(context, args); function later() { timeout = null; if (!immediate) func.apply(context, args); } }; } // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708 var contains = function () { if (!global.document) { return true; } return global.document.documentElement.compareDocumentPosition ? function (a, b) { return !!(a.compareDocumentPosition(b) & 16); } : global.document.documentElement.contains ? function (a, b) { return a !== b && (a.contains ? a.contains(b) : false); } : function (a, b) { while (b = b.parentNode) { if (b === a) { return true; } } return false; }; } function createInViewport(container) { var watches = createWatches(); var scrollContainer = container === global.document.body ? global : container; var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15); addEvent(scrollContainer, 'scroll', debouncedCheck); if (scrollContainer === global) { addEvent(global, 'resize', debouncedCheck); } if (supportsMutationObserver) { observeDOM(watches, container, debouncedCheck); } // failsafe check, every 200ms we check for visible images // usecase: a hidden parent containing eleements // when the parent becomes visible, we have no event that the children // became visible setInterval(debouncedCheck, 150); function isInViewport(elt, offset, cb) { if (!cb) { return isVisible(elt, offset); } var remote = createRemote(elt, offset, cb); remote.watch(); return remote; } function createRemote(elt, offset, cb) { function watch() { watches.add(elt, offset, cb); } function dispose() { watches.remove(elt); } return { watch: watch, dispose: dispose }; } function watchInViewport(elt, offset, cb) { if (isVisible(elt, offset)) { watches.remove(elt); cb(elt); } } function isVisible(elt, offset) { if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) { return false; } // Check if the element is visible // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js if (!elt.offsetWidth || !elt.offsetHeight) { return false; } var eltRect = elt.getBoundingClientRect(); var viewport = {}; if (container === global.document.body) { viewport = { top: -offset, left: -offset, right: global.document.documentElement.clientWidth + offset, bottom: global.document.documentElement.clientHeight + offset }; } else { var containerRect = container.getBoundingClientRect(); viewport = { top: containerRect.top - offset, left: containerRect.left - offset, right: containerRect.right + offset, bottom: containerRect.bottom + offset }; } // The element must overlap with the visible part of the viewport var visible = ( (eltRect.right > viewport.left) && (eltRect.left < viewport.right) && (eltRect.bottom > viewport.top) && (eltRect.top < viewport.bottom) ); return visible; } return { container: container, isInViewport: isInViewport }; } function createWatches() { var watches = []; function add(elt, offset, cb) { if (!isWatched(elt)) { watches.push([elt, offset, cb]); } } function remove(elt) { var pos = indexOf(elt); if (pos !== -1) { watches.splice(pos, 1); } } function indexOf(elt) { for (var i = watches.length - 1; i >= 0; i--) { if (watches[i][0] === elt) { return i; } } return -1; } function isWatched(elt) { return indexOf(elt) !== -1; } function checkAll(cb) { return function () { for (var i = watches.length - 1; i >= 0; i--) { cb.apply(this, watches[i]); } }; } return { add: add, remove: remove, isWatched: isWatched, checkAll: checkAll }; } function observeDOM(watches, container, cb) { var observer = new MutationObserver(watch); var filter = Array.prototype.filter; var concat = Array.prototype.concat; observer.observe(container, { childList: true, subtree: true, // changes like style/width/height/display will be catched attributes: true }); function watch(mutations) { // some new DOM nodes where previously watched // we should check their positions if (mutations.some(knownNodes) === true) { setTimeout(cb, 0); } } function knownNodes(mutation) { var nodes = concat.call([], Array.prototype.slice.call(mutation.addedNodes), mutation.target ); return filter.call(nodes, watches.isWatched).length > 0; } } /* WEBPACK VAR INJECTION */ }.call(exports, (function () { return this; }()))) /***/ } /******/ ]);"}],"posts":[{"title":"Vue axios 刷新 Jwt","slug":"about-vue-jwt","date":"2020-03-03T11:52:04.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/fc31ea3.html","link":"","permalink":"https://hasaik.com/posts/fc31ea3.html","excerpt":"","text":"最近做项目，一个需求就是Jwt token的失效的时候，如果用户还在操作，那么希望无感刷新token，让用户的操作不受影响。 两种核心思路： 前端发起ajax请求 =&gt; 后端发现jwt已经过期,返回50014状态码 =&gt; 前端拦截响应数据,并发起刷新token的请求 =&gt; 拿到最新的jwt和refresh,保存到本地 =&gt; 拿到最新的jwt去进行刚刚未请求成功的接口 =&gt; 获取到刚刚请求的结果,覆盖第一次请求失败(状态码为50014)的响应数据 =&gt; 返回第二次请求的结果. 前端发起ajax请求 =&gt; 后端发现jwt已经过期,返回50014状态码 =&gt; 前端拦截响应数据,并发起刷新token的请求 =&gt; 后端返回了10007的状态码(这个时候代表refreshJwt也过期了,需要进行重新登录了) =&gt; 真正的过期了,需要跳转到登录界面. 新建一个refreshJwt.js文件代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445import &#123; getRefreshToken, setRefreshToken, setToken &#125; from './auth'import axios from 'axios'import store from '../store'import &#123; MessageBox &#125; from 'element-ui'import i18n from '@/lang'/** * 刷新JWT设计思路： * * 第一种情况: 前端发起ajax请求 =&gt; 后端发现jwt已经过期,返回50014状态码 =&gt; 前端拦截响应数据,并发起刷新token的请求 =&gt; 拿到最新的jwt和refresh,保存到本地 =&gt; 拿到最新的jwt去进行刚刚未请求成功的接口 =&gt; 获取到刚刚请求的结果,覆盖第一次请求失败(状态码为50014)的响应数据 =&gt; 返回第二次请求的结果. * 第一种情况: 前端发起ajax请求 =&gt; 后端发现jwt已经过期,返回50014状态码 =&gt; 前端拦截响应数据,并发起刷新token的请求 =&gt; 后端返回了10007的状态码(这个时候代表refreshJwt也过期了,需要进行重新登录了) =&gt; 真正的过期了,需要跳转到登录界面. * @returns &#123;Promise&lt;void&gt;&#125; */export default async() =&gt; &#123; // process.env.BASE_API是项目环境API const url = process.env.BASE_API + '/refreshJwt/' + getRefreshToken() await axios.post(url).then(res =&gt; &#123; if (res.data.code === 10007) &#123; // 身份过期，请重新登录 MessageBox.confirm( 'Token失效,你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', &#123; confirmButtonText: '重新登陆', cancelButtonText: '取消', type: 'warning' &#125; ).then(() =&gt; &#123; store.dispatch('FedLogOut').then(() =&gt; &#123; location.reload() // 为了重新实例化vue-router对象 避免bug &#125;) &#125;) &#125; else &#123; // 设置token setToken(res.data.data.token) store.commit('SET_TOKEN', res.data.data.token) // 设置refreshToken setRefreshToken(res.data.data.refreshToken) store.commit('SET_REFRESH_TOKEN', res.data.data.refreshToken) &#125; &#125;).catch(error =&gt; &#123; console.log(error) &#125;)&#125; 配置拦截器代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104import axios from 'axios'import i18n from '@/lang'import &#123; Message, MessageBox &#125; from 'element-ui'import store from '../store'import &#123; getToken, getRefreshToken &#125; from './auth'import refreshJwt from './refreshJwt'let isLock = true// 创建axios实例const service = axios.create(&#123; baseURL: process.env.BASE_API, // api 的 base_url timeout: 50000, // 请求超时时间, headers: &#123; 'Content-Type': 'application/json;charset=utf-8' &#125; // withCredentials : true&#125;)/** * 通用请求拦截配置 * @param &#123;*&#125; config */const axiosConf = (config) =&gt; &#123; if (store.getters.token) &#123; config.headers['X-Token'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改 &#125; return config&#125;// request 拦截器service.interceptors.request.use(axiosConf, error =&gt; &#123; console.log(error) return Promise.reject(error)&#125;)// response 拦截器service.interceptors.response.use( async response =&gt; &#123; /** * code为非0是抛错 可结合自己业务进行修改 */ let data = &#123;&#125; const res = response.data const code = Number(res.code) if (code !== 0) &#123; // 50014:Token 过期了; if (code === 50014) &#123; if ((getRefreshToken() !== 'undefined' &amp;&amp; getRefreshToken()) &amp;&amp; isLock) &#123; // 异步刷新JWT await refreshJwt() // 这里防止并发的时候造成死循环,所以要加锁 isLock = false // 刷新完成,继续之前的请求 response.config.headers['X-Token'] = getToken() const result = await axios.request(axiosConf(response.config)) if (result) &#123; data = result.data isLock = true &#125; &#125; else &#123; // 身份过期，请重新登录 MessageBox.confirm( 'Token失效,你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', &#123; confirmButtonText: '重新登陆', cancelButtonText: '取消', type: 'warning' &#125; ).then(() =&gt; &#123; store.dispatch('FedLogOut').then(() =&gt; &#123; location.reload() // 为了重新实例化vue-router对象 避免bug &#125;) &#125;) &#125; &#125; else &#123; // 消息提示 message(res.message) &#125; &#125; else &#123; data = response.data &#125; return data &#125;, error =&gt; &#123; console.log('错误信息：' + error) message('哎呀~ (ಥ﹏ಥ)网络又开小差了,请稍后刷新重试!') return Promise.reject(error) &#125;)/** * 消息提醒 * @param msg */export function message(msg) &#123; Message(&#123; message: msg, type: 'error', showClose: true, duration: 5 * 1000 &#125;)&#125;export default service 小生的刷新token思路如此，如阁下有更好的思路，方便分享，请留言哦。","categories":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/categories/Vue/"},{"name":"Jwt","slug":"Vue/Jwt","permalink":"https://hasaik.com/categories/Vue/Jwt/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/tags/Vue/"},{"name":"Jwt","slug":"Jwt","permalink":"https://hasaik.com/tags/Jwt/"}]},{"title":"使用SpringBoot AOP 记录操作日志、异常日志","slug":"about-springboot-aop","date":"2020-02-25T15:22:53.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/4598d3ed.html","link":"","permalink":"https://hasaik.com/posts/4598d3ed.html","excerpt":"","text":"平时我们在做项目时经常需要对一些重要功能操作记录日志，方便以后跟踪是谁在操作此功能；我们在操作某些功能时也有可能会发生异常，但是每次发生异常要定位原因我们都要到服务器去查询日志才能找到，而且也不能对发生的异常进行统计，从而改进我们的项目，要是能做个功能专门来记录操作日志和异常日志那就好了， 当然我们肯定有方法来做这件事情，而且也不会很难，我们可以在需要的方法中增加记录日志的代码，和在每个方法中增加记录异常的代码，最终把记录的日志存到数据库中。听起来好像很容易，但是我们做起来会发现，做这项工作很繁琐，而且都是在做一些重复性工作，还增加大量冗余代码，这种方式记录日志肯定是不可行的。 我们以前学过Spring 三大特性，IOC（控制反转），DI（依赖注入），AOP（面向切面），那其中AOP的主要功能就是将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来。今天我们就来用SpringBoot Aop 来做日志记录，好了，废话说了一大堆还是上货吧。 创建日志记录表、异常日志表，表结构如下：异常日志表 操作日志表 添加Maven依赖12345678910&lt;!-- Spring Boot 面向切面AOP --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.8.13&lt;/version&gt;&lt;/dependency&gt; 创建操作日志注解类Log.java1234567891011121314151617181920package com.scaffolding.demo.annotation;import java.lang.annotation.*;/** * 自定义操作日志注解 * * @author: Xuxu * @date: 2020-02-17 18:35项目日志 **/@Target(ElementType.METHOD) //注解放置的目标位置,METHOD是可注解在方法级别上@Retention(RetentionPolicy.RUNTIME) //注解在哪个阶段执行@Documentedpublic @interface Log &#123; String operationModule() default \"\"; // 操作模块 String operationType() default \"\"; // 操作类型 String operationDesc() default \"\"; // 操作说明&#125; 创建切面类记录操作日志和异常日志package com.scaffolding.demo.config;import com.alibaba.fastjson.JSON;import com.scaffolding.demo.annotation.Log;import com.scaffolding.demo.common.BaseController;import com.scaffolding.demo.sys.model.ExceptionLog;import com.scaffolding.demo.sys.model.OperationLog;import com.scaffolding.demo.sys.service.ExceptionLogService;import com.scaffolding.demo.sys.service.OperationLogService;import com.scaffolding.demo.sys.service.UserService;import com.scaffolding.demo.utils.IPUtil;import lombok.extern.slf4j.Slf4j;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.AfterThrowing;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.aspectj.lang.reflect.MethodSignature;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.DefaultParameterNameDiscoverer;import org.springframework.core.ParameterNameDiscoverer;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestAttributes;import org.springframework.web.context.request.RequestContextHolder;import javax.servlet.http.HttpServletRequest;import java.lang.reflect.Method;import java.time.LocalDateTime;import java.util.HashMap;import java.util.Map;import java.util.Objects;/** * 切面处理类，操作日志 异常日志记录处理 * * @author: Xuxu * @date: 2020-02-17 18:46 **/@Slf4j@Aspect@Componentpublic class OperationLogAspect extends BaseController &#123; /** * 操作版本号 */ @Value(\"$&#123;app.version&#125;\") private String version; @Autowired private OperationLogService operationLogService; @Autowired private ExceptionLogService exceptionLogService; @Autowired private UserService userService; /** * 设置操作日志切入点 记录操作日志 在注解的位置切入代码 */ @Pointcut(\"@annotation(com.scaffolding.demo.annotation.Log)\") public void operationLogPointCut() &#123; &#125; /** * 设置操作异常切入点记录异常日志 扫描所有controller包下操作 */ @Pointcut(\"execution(* com.scaffolding.demo.sys.controller..*.*(..))\") public void operationExceptionLogPointCut() &#123; &#125; /** * 正常返回通知，拦截用户操作日志，连接点正常执行完成后执行， 如果连接点抛出异常，则不会执行 * * @param joinPoint 切入点 * @param results 返回结果 */ @AfterReturning(value = \"operationLogPointCut()\", returning = \"results\") public void saveOperationLog(JoinPoint joinPoint, Object results) &#123; log.info(\"开始执行拦截用户操作日志\"); // 获取RequestAttributes RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes(); // 从获取RequestAttributes中获取HttpServletRequest的信息 HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes) .resolveReference(RequestAttributes.REFERENCE_REQUEST); OperationLog operationLog = new OperationLog(); try &#123; // 从切面织入点处通过反射机制获取织入点处的方法 MethodSignature signature = (MethodSignature) joinPoint.getSignature(); // 获取切入点所在的方法 Method method = signature.getMethod(); // 获取操作 Log log = method.getAnnotation(Log.class); if (log != null) &#123; // 操作模块 operationLog.setModule(log.operationModule()); // 操作类型 operationLog.setType(log.operationType()); // 操作描述 operationLog.setDescription(log.operationDesc()); &#125; // 获取请求的类名 String className = joinPoint.getTarget().getClass().getName(); // 获取请求的方法名 String methodName = method.getName(); // 请求方法 operationLog.setMethod(className + \".\" + methodName); // 请求的参数 Map&lt;String, Object&gt; rtnMap = convertMap(joinPoint, method); // 将参数所在的数组转换成json String params = JSON.toJSONString(rtnMap); // 请求参数 operationLog.setRequestParam(params); // 返回结果 operationLog.setResponseParam(JSON.toJSONString(results)); // 请求用户ID operationLog.setUserId(getUserId()); // 请求用户名称 operationLog.setUserName(userService.getById(getUserId()).getNickName()); // 请求IP operationLog.setIp(IPUtil.getRequestIpAddress(request)); // 请求URI operationLog.setUri(request.getRequestURI()); // 创建时间 operationLog.setCreateTime(LocalDateTime.now()); // 操作版本 operationLog.setVersion(version); operationLogService.save(operationLog); &#125; catch (Exception e) &#123; log.error(\"拦截用户操作日志异常\"); e.printStackTrace(); &#125; &#125; /** * 异常返回通知，用于拦截异常日志信息 连接点抛出异常后执行 * * @param joinPoint 切入点 * @param exception 异常信息 */ @AfterThrowing(pointcut = \"operationExceptionLogPointCut()\", throwing = \"exception\") public void saveExceptionLog(JoinPoint joinPoint, Throwable exception) &#123; log.info(\"开始拦截异常日志信息\"); // 获取RequestAttributes RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes(); // 从获取RequestAttributes中获取HttpServletRequest的信息 HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes) .resolveReference(RequestAttributes.REFERENCE_REQUEST); ExceptionLog exceptionLog = new ExceptionLog(); try &#123; // 从切面织入点处通过反射机制获取织入点处的方法 MethodSignature signature = (MethodSignature) joinPoint.getSignature(); // 获取切入点所在的方法 Method method = signature.getMethod(); // 获取请求的类名 String className = joinPoint.getTarget().getClass().getName(); // 获取请求的方法名 String methodName = method.getName(); // 请求的参数 Map&lt;String, Object&gt; rtnMap = convertMap(joinPoint, method); // 将参数所在的数组转换成json String params = JSON.toJSONString(rtnMap); // 请求参数 exceptionLog.setRequestParam(params); // 请求方法名 exceptionLog.setMethod(className + \".\" + methodName); // 异常名称 exceptionLog.setName(exception.getClass().getName()); // 异常信息 exceptionLog.setMessage(stackTraceToString(exception.getClass().getName(), exception.getMessage(), exception.getStackTrace())); // 操作员ID exceptionLog.setUserId(getUserId()); // 操作员名称 exceptionLog.setUserName(userService.getById(getUserId()).getNickName()); // 操作URI exceptionLog.setUri(request.getRequestURI()); // 操作员IP exceptionLog.setIp(IPUtil.getRequestIpAddress(request)); // 操作版本号 exceptionLog.setVersion(version); // 发生异常时间 exceptionLog.setCreateTime(LocalDateTime.now()); exceptionLogService.save(exceptionLog); &#125; catch (Exception e) &#123; log.error(\"拦截异常日志信息发生异常\"); e.printStackTrace(); &#125; &#125; /** * 转换request 请求参数 * * @param joinPoint * @param method * @return */ private Map&lt;String, Object&gt; convertMap(JoinPoint joinPoint, Method method) &#123; // 参数值 Object[] args = joinPoint.getArgs(); ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer(); String[] parameterNames = parameterNameDiscoverer.getParameterNames(method); Map&lt;String, Object&gt; paramMap = new HashMap&lt;&gt;(); for (int i = 0; i &lt; Objects.requireNonNull(parameterNames).length; i++) &#123; paramMap.put(parameterNames[i], args[i].toString()); &#125; return paramMap; &#125; /** * 转换异常信息为字符串 * * @param exceptionName 异常名称 * @param exceptionMessage 异常信息 * @param elements 堆栈信息 */ private String stackTraceToString(String exceptionName, String exceptionMessage, StackTraceElement[] elements) &#123; StringBuffer stringBuffer = new StringBuffer(); for (StackTraceElement stet : elements) &#123; stringBuffer.append(stet + \"\\n\"); &#125; return exceptionName + \":\" + exceptionMessage + \"\\n\\t\" + stringBuffer.toString(); &#125;&#125; 附上获取IP地址Util类： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.scaffolding.demo.utils;import org.apache.commons.lang3.StringUtils;import javax.servlet.http.HttpServletRequest;import java.net.InetAddress;import java.net.UnknownHostException;/** * @author: Xuxu * @date: 2020-02-17 20:05 **/public class IPUtil &#123; /** * 获取请求IP * * @param request * @return */ public static String getRequestIpAddress(HttpServletRequest request) &#123; String ipAddress = null; ipAddress = request.getHeader(\"X-Real_IP\"); if (StringUtils.isEmpty(ipAddress) || StringUtils.isBlank(ipAddress) || \"unknown\".equalsIgnoreCase(ipAddress)) &#123; ipAddress = request.getHeader(\"x-forwarded-for\"); &#125; if (StringUtils.isEmpty(ipAddress) || StringUtils.isBlank(ipAddress) || \"unknown\".equalsIgnoreCase(ipAddress)) &#123; ipAddress = request.getHeader(\"Proxy-Client-IP\"); &#125; if (StringUtils.isEmpty(ipAddress) || StringUtils.isBlank(ipAddress) || \"unknown\".equalsIgnoreCase(ipAddress)) &#123; ipAddress = request.getHeader(\"WL-Proxy-Client-IP\"); &#125; if (StringUtils.isEmpty(ipAddress) || StringUtils.isBlank(ipAddress) || \"unknown\".equalsIgnoreCase(ipAddress)) &#123; ipAddress = request.getRemoteAddr(); if (ipAddress.equals(\"127.0.0.1\")) &#123; // 根据网卡取本机配置的IP InetAddress inet = null; try &#123; inet = InetAddress.getLocalHost(); &#125; catch (UnknownHostException e) &#123; e.printStackTrace(); &#125; ipAddress = inet.getHostAddress(); &#125; &#125; // 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割 if (ipAddress != null &amp;&amp; ipAddress.length() &gt; 15) &#123; if (ipAddress.indexOf(\",\") &gt; 0) &#123; ipAddress = ipAddress.substring(0, ipAddress.indexOf(\",\")); &#125; &#125; return ipAddress; &#125;&#125; 在Controller层方法添加@Log注解 操作日志、异常日志查询功能","categories":[{"name":"Java","slug":"Java","permalink":"https://hasaik.com/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://hasaik.com/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hasaik.com/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://hasaik.com/tags/SpringBoot/"},{"name":"AOP","slug":"AOP","permalink":"https://hasaik.com/tags/AOP/"}]},{"title":"vue项目中，js根据文件名后缀，判断文件图片、视频、文档、pdf等类型的方法","slug":"about-vue-matchType","date":"2020-02-13T17:23:42.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/dc877e7a.html","link":"","permalink":"https://hasaik.com/posts/dc877e7a.html","excerpt":"","text":"vue项目中，在获得文件名信息，需要根据文件名的后缀来区分文件类型的方法如下：其中，文件后缀可自由拓展。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394// 根据文件名后缀区分 文件类型export function matchType(fileName) &#123; // 后缀获取 let suffix = '' // 获取类型结果 let result try &#123; const fileArr = fileName.split('.') suffix = fileArr[fileArr.length - 1] &#125; catch (err) &#123; suffix = '' &#125; // fileName无后缀返回 false if (!suffix) &#123; result = false return result &#125; // 图片格式 const imgList = ['png', 'jpg', 'jpeg', 'bmp', 'gif', 'svg', 'icon', 'ico'] // 进行图片匹配 result = imgList.some(function(item) &#123; return item === suffix &#125;) if (result) &#123; result = 'image' return result &#125; // 匹配txt const txtList = ['txt'] result = txtList.some(function(item) &#123; return item === suffix &#125;) if (result) &#123; result = 'txt' return result &#125; // 匹配 excel const excelList = ['xls', 'xlsx'] result = excelList.some(function(item) &#123; return item === suffix &#125;) if (result) &#123; result = 'excel' return result &#125; // 匹配 word const wordList = ['doc', 'docx'] result = wordList.some(function(item) &#123; return item === suffix &#125;) if (result) &#123; result = 'word' return result &#125; // 匹配 pdf const pdfList = ['pdf'] result = pdfList.some(function(item) &#123; return item === suffix &#125;) if (result) &#123; result = 'pdf' return result &#125; // 匹配 ppt const pptList = ['ppt', 'pptx'] result = pptList.some(function(item) &#123; return item === suffix &#125;) if (result) &#123; result = 'ppt' return result &#125; // 匹配 视频 const videoList = ['mp4', 'm2v', 'mkv'] result = videoList.some(function(item) &#123; return item === suffix &#125;) if (result) &#123; result = 'video' return result &#125; // 匹配 音频 const radioList = ['mp3', 'wav', 'wmv'] result = radioList.some(function(item) &#123; return item === suffix &#125;) if (result) &#123; result = 'radio' return result &#125; // 其他 文件类型 result = 'other' return result&#125; 在项目中进行调用，只需要在需要使用的地方使用： 1this.matchType('demo.png'); // 返回的结果为 'image' 根据返回结果可做对应操作。","categories":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/tags/Vue/"}]},{"title":"vue、react等单页应用在微信浏览器中修改标题","slug":"about-vue-site-title","date":"2020-02-05T12:07:51.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/a63fb3ae.html","link":"","permalink":"https://hasaik.com/posts/a63fb3ae.html","excerpt":"","text":"由于单页应用是通过路由切换展示不同页面的，而不是真正的跳转链接，然后在IOS系统，微信浏览器中直接用修改title的值不会有效果，所以需要使用特殊方式来修改微信标题，一言不合就上代码： 1234567891011121314151617181920/*** 微信浏览器中设置对应页面的标题* 解决：IOS微信浏览器中用document.title 设置标题无效* */export const setTitle = (title) =&gt; &#123; var body = document.getElementsByTagName('body')[0]; document.title = title; var iframe = document.createElement(\"iframe\"); iframe.setAttribute(\"src\", \"logo.png\"); iframe.setAttribute(\"style\", \"display:none\"); iframe.addEventListener('load', function() &#123; setTimeout(function() &#123; try&#123; iframe.removeEventListener('load'); &#125;catch (err)&#123;&#125; document.body.removeChild(iframe); &#125;, 0); &#125;); document.body.appendChild(iframe);&#125;;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/tags/Vue/"}]},{"title":"Vue 日期格式化","slug":"about-vue-date","date":"2020-01-15T09:39:22.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/c9b4cff2.html","link":"","permalink":"https://hasaik.com/posts/c9b4cff2.html","excerpt":"","text":"函数封装（将该函数封装成一个文件，或者加入自己项目的函数库）123456789101112131415161718192021222324// 这个函数网上随处可见，我也是应用了别人的。export function formatDate(date, fmt) &#123; if (/(y+)/.test(fmt)) &#123; fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length)) &#125; const o = &#123; 'M+': date.getMonth() + 1, 'd+': date.getDate(), 'h+': date.getHours(), 'm+': date.getMinutes(), 's+': date.getSeconds() &#125; for (const k in o) &#123; if (new RegExp(`($&#123;k&#125;)`).test(fmt)) &#123; const str = o[k] + '' fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? str : padLeftZero(str)) &#125; &#125; return fmt&#125;function padLeftZero(str) &#123; return ('00' + str).substr(str.length)&#125; 文件引入（注意：由于是函数，故名字要和函数的名字一致）1import &#123; formatDate &#125; from '@/common/commonUtil.js' 添加到过滤器中123456filters: &#123; formatDate(time) &#123; var date = new Date(time); return formatDate(date, 'yyyy-MM-dd hh:mm:ss'); &#125;&#125;, 使用场景一： 在HTML中使用12// item.createDate是后台数据~~&lt;div class=\"time\"&gt;&#123;&#123;item.createDate | formatDate&#125;&#125;&lt;/div&gt; 使用场景二： 在提交时候使用1let nowDate = formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss') 使用场景三： 在绑定属性中使用1&lt;mt-cell title=\"开始时间\" :value=\"startDate | formatDate\"&gt;&lt;/mt-cell&gt;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/categories/Vue/"},{"name":"工具类","slug":"Vue/工具类","permalink":"https://hasaik.com/categories/Vue/工具类/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/tags/Vue/"},{"name":"工具类","slug":"工具类","permalink":"https://hasaik.com/tags/工具类/"}]},{"title":"异常：java.security.InvalidKeyException:Illegal key size","slug":"about-java-IllegalKeySize","date":"2020-01-07T10:13:18.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/2b56997e.html","link":"","permalink":"https://hasaik.com/posts/2b56997e.html","excerpt":"","text":"今天在做接口测试的时候遇到个异常： java.security.InvalidKeyException: Illegal key size 123456KeyGenerator kgen = KeyGenerator.getInstance(&quot;aes&quot;);//此处解决mac，linux报错SecureRandom random = SecureRandom.getInstance(&quot;SHA1PRNG&quot;);random.setSeed(key.getBytes()); //mac笔记本当代码运行到这一行时就报错了。爆出上面的异常kgen.init(type.value, random);SecretKey secretKey = kgen.generateKey(); 感到一脸懵逼，还好网络是万能的，百度一下，简单对比一下，就找到了解决方案。然后测试之后发现也是没有问题的。 异常原因：如果密钥大于128, 会抛出java.security.InvalidKeyException: Illegal key size 异常. 因为密钥长度是受限制的, java运行时环境读到的是受限的policy文件. 文件位于${java_home}/jre/lib/security, 这种限制是因为美国对软件出口的控制. 解决方案：去官方下载JCE无限制权限策略文件。 JDK5的下载地址: http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-java-plat-419418.html#jce_policy-1.5.0-oth-JPR JDK6的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html JDK7的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html JDK8的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html 下载后解压，可以看到local_policy.jar和US_export_policy.jar以及readme.txt 如果安装了JRE，将两个jar文件放到%JRE_HOME%\\lib\\security目录下覆盖原来的文件 如果安装了JDK，还要将两个jar文件也放到%JDK_HOME%\\jre\\lib\\security目录下覆盖原来文件。 然后DuangDuangDuangDuang，就ok了。","categories":[{"name":"BUG","slug":"BUG","permalink":"https://hasaik.com/categories/BUG/"}],"tags":[{"name":"BUG","slug":"BUG","permalink":"https://hasaik.com/tags/BUG/"}]},{"title":"Element UI DatePicker 禁用当前日之前的时间","slug":"about-vue-datepicker","date":"2020-01-06T14:00:20.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/69ab28bb.html","link":"","permalink":"https://hasaik.com/posts/69ab28bb.html","excerpt":"","text":"这篇文章主要介绍了 vue element-ui el-date-picker 禁用当日之前时间,文中给大家提供了代码段和截图，非常不错，具有一定的参考借鉴价值，需要的朋友可以参考下。 1234567&lt;el-date-picker v-model=\"timingDay\" :picker-options=\"expireTimeOption\" format=\"yyyy-MM-dd\" type=\"date\" value-format=\"yyyy-MM-dd\" placeholder=\"选择时间\"/&gt; 其中 :picker-options=&quot;expireTimeOption&quot; 便是限制选择时间的属性，在data中可以这样写 123456789data：&#123; return&#123; timingDay: '', expireTimeOption: &#123; disabledDate(date) &#123; return date.getTime() &lt; Date.now() - 8.64e7 &#125; &#125;&#125; 这样便实现了禁用当日之前时间 以上所述是小编给大家介绍的vue element-ui el-date-picker限制选择时间为当天之前的代码，希望对大家有所帮助，如果大家有任何疑问请给我留言，小编会及时回复大家的。","categories":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/categories/Vue/"},{"name":"el-date-picker","slug":"Vue/el-date-picker","permalink":"https://hasaik.com/categories/Vue/el-date-picker/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/tags/Vue/"},{"name":"el-date-picker","slug":"el-date-picker","permalink":"https://hasaik.com/tags/el-date-picker/"}]},{"title":"Vue中Axios的封装与使用","slug":"about-vue-axios","date":"2019-12-04T10:05:38.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/4394a738.html","link":"","permalink":"https://hasaik.com/posts/4394a738.html","excerpt":"","text":"Axios是什么，为什么要统一封装？axios 是一个基于 promise 的 http 库，可运行在浏览器端和 node.js 中。他有很多优秀的特性，例如统一进行拦截请求和响应、取消请求、转换 json 、客户端防御 XSRF 等。所以在日常开发中可以直接推荐我们使用 axios 库。如果还对 axios 不了解的，可以移步 axios文档。回归正题，我们所要的说的 axios 的封装和 api 接口的统一管理，其实主要目的就是在帮助我们简化代码和利于后期的更新维护。 安装使用 npm： 1$ npm install axios 使用 bower： 1$ bower install axios 使用 cdn： 1&lt;script src=\"https://unpkg.com/axios/dist/axios.min.js\"&gt;&lt;/script&gt; 统一封装Axios拦截器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394import axios from 'axios' // 引入axiosimport &#123; Message, MessageBox &#125; from 'element-ui' // 这里我是使用elementUI的组件来给提示import store from '../store' //引入Vuex的Storeimport &#123; getToken &#125; from '@/utils/auth' //一个获取cookie中token的工具类import Cookies from 'js-cookie' //引入cookie// 创建axios实例，在这里可以设置请求的默认配置const service = axios.create(&#123; baseURL: process.env.BASE_API, //根据自己配置的反向代理去设置不同环境的baeUrl timeout: 50000, // 请求超时时间, headers: &#123; 'Content-Type': 'application/json;charset=utf-8' &#125; // withCredentials : true&#125;)// request 拦截器(言外之意就是在发起请求前做什么)service.interceptors.request.use( config =&gt; &#123; if (store.getters.token) &#123; config.headers['X-Token'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改 &#125; return config &#125;, error =&gt; &#123; // 对请求错误做些什么 console.log(error) // for debug return Promise.reject(error) &#125;)// response 拦截器service.interceptors.response.use( response =&gt; &#123; /** * code为非0是抛错 可结合自己业务进行修改 */ let message let title let confirmButtonText let cancelButtonText const res = response.data if (res.code !== 0) &#123; Message(&#123; message: res.message, type: 'error', duration: 5 * 1000 &#125;) // 50008:非法的token; 50012:其他客户端登录了; 50014:Token 过期了; if (res.code === 50008 || res.code === 50012 || res.code === '50014' || res.code === '333') &#123; if (Cookies.get('language') === 'zh') &#123; message = '登录超时，请重新登录!' title = '确定登出' confirmButtonText = '重新登录' cancelButtonText = '取消' &#125; MessageBox.confirm( message, title, &#123; confirmButtonText: confirmButtonText, cancelButtonText: cancelButtonText, type: 'warning', showCancelButton: false &#125; ).then(() =&gt; &#123; store.dispatch('FedLogOut').then(() =&gt; &#123; location.reload() // 为了重新实例化vue-router对象 避免bug &#125;) &#125;).catch(() =&gt; &#123; store.dispatch('FedLogOut').then(() =&gt; &#123; location.reload() // 为了重新实例化vue-router对象 避免bug &#125;) &#125;) &#125; return Promise.reject(new Error(res.message || 'Error')) &#125; else &#123; console.log(response) return response.data &#125; &#125;, error =&gt; &#123; console.log('err' + error) // for debug Message(&#123; message: error.message, type: 'error', duration: 5 * 1000 &#125;) return Promise.reject(error) &#125;)export default service 统一进行接口api管理12345678910// 每个模块都应该有自己的接口文件去统一管理apiimport request from '@/utils/request'export function login(data) &#123; return request(&#123; url: '/login', method: 'post', data: data &#125;)&#125; 页面上的使用1234567891011121314import &#123; login &#125; from '@/api/login'export default &#123; name: 'login', data () &#123; return &#123;&#125; &#125;, mounted () &#123; let params = &#123; userName: 'admin', password: '123456'&#125; login(params).then(res =&gt; &#123; console.log(res, '这是响应的结果') &#125;) &#125;&#125; 我的项目目录结构 总结以上就是这篇文章的全部内容了，希望本文的内容对大家的学习或者工作具有一定的参考学习价值，如果有疑问大家可以留言交流，谢谢大家的支持。","categories":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/categories/Vue/"},{"name":"Axios","slug":"Vue/Axios","permalink":"https://hasaik.com/categories/Vue/Axios/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://hasaik.com/tags/Vue/"},{"name":"Axios","slug":"Axios","permalink":"https://hasaik.com/tags/Axios/"}]},{"title":"为Hexo添加RSS订阅","slug":"about-hexo-rss","date":"2019-11-29T16:04:03.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/19c94341.html","link":"","permalink":"https://hasaik.com/posts/19c94341.html","excerpt":"","text":"配置首先添加功能插件，在 hexo 项目根目录下执行该命令 1npm install hexo-generator-feed --save 然后在 hexo 根目录下的 _config.yml 文件中添加配置 12345#订阅RSSfeed: type: atom path: atom.xml limit: false 配置含义： type: RSS的类型(atom/rss2) path: 文件路径，默认是 atom.xml/rss2.xml limit: 展示文章的数量,使用 0 或则 false 代表展示全部 hub: URL of the PubSubHubbub hubs (如果使用不到可以为空) content: （可选）设置 true 可以在 RSS 文件中包含文章全部内容，默认：false content_limit: （可选）摘要中使用的帖子内容的默认长度。 仅在内容设置为false且未显示自定义帖子描述时才使用。 content_limit_delim: （可选）如果content_limit用于缩短post内容，则仅在此分隔符的最后一次出现时进行剪切，然后才达到字符限制。默认不使用。 icon: （可选）自定义订阅图标，默认设置为主配置中指定的图标。 order_by: 订阅内容的顺序。 (默认: -date) 然后在 theme 目录下的 _config.yml 文件中添加配置 1rss: /atom.xml 随后重新生成博客静态文件 1$ hexo clean &amp;&amp; hexo g 在 public 文件夹中就会生成 atom.xml 文件，部署后直接在根目录中访问该文件即可 1https://hasaik.com/atom.xml 订阅下面以我博客为例子 订阅地址为：https://hasaik.com/atom.xml（PS：订阅地址改为自己的博客） 以上就是关于博客 RSS 订阅的全部介绍，如果您喜欢我发布的文章，亦可订阅小站，小站将第一时间为您奉上新发布的文章。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"},{"name":"Rss","slug":"Rss","permalink":"https://hasaik.com/tags/Rss/"}]},{"title":"SpringBoot两种打包方式","slug":"about-springboot-deploy","date":"2019-11-29T10:00:38.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/b4831a5e.html","link":"","permalink":"https://hasaik.com/posts/b4831a5e.html","excerpt":"","text":"相信所有人都喜欢简洁的打包方式，不需要去敲命令来执行打包，所以今天介绍两种常用的打包方式。 Maven插件打包在项目 pom.xml 文件中 build 标签的代码为朋友们奉上，其中的注意的点都有注释 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;build&gt; &lt;!--打包项目名（根据自己项目定）--&gt; &lt;finalName&gt;contests&lt;/finalName&gt; &lt;plugins&gt; &lt;!-- 设置jdk版本为1.8 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;compilerArguments&gt; &lt;!--如果是在Windows下面开发，$&#123;java.home&#125;/lib/rt.jar ; $&#123;java.home，这里中间是；号隔开，Linux中则是：号隔开，这是个很坑的地方我提一下。--&gt; &lt;bootclasspath&gt;$&#123;java.home&#125;/lib/rt.jar;$&#123;java.home&#125;/lib/jce.jar&lt;/bootclasspath&gt; &lt;/compilerArguments&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;!-- 如果没有该配置，devtools不会生效 --&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/$&#123;project.name&#125;&lt;/outputDirectory&gt; &lt;addResources&gt;false&lt;/addResources&gt; &lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy-resources&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;copy-resources&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;outputDirectory&gt; $&#123;project.build.directory&#125;/$&#123;project.name&#125; &lt;/outputDirectory&gt; &lt;!-- 表示把配置文件拷到和jar包同一个路径下 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources/&lt;/directory&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;copy-resources-classes&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;copy-resources&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;outputDirectory&gt; $&#123;project.build.directory&#125;/classes &lt;/outputDirectory&gt; &lt;!-- 表示把配置文件拷到和jar包同一个路径下 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources/&lt;/directory&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 在 pom.xml 中有一个这样的地方： 12345&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;!-- maven打包跳过测试阶段（有的数据库连接的是本地的，不是服务器的，打包过程会出现连接数据库失败的错误，设置跳过测试阶段就解决了，不影响发布） --&gt; &lt;skipTests&gt;true&lt;/skipTests&gt;&lt;/properties&gt; 在 pom.xml 中 &lt;packaging&gt;war&lt;/packaging&gt; 是选择打包的类型（war，jar） 配置好 pom.xml 之后，一定要是 Jdk1.8 ，在IDEA的右上角，有个 Maven Project。 先点Clean，然后点package然后项目目录多了个target文件夹，里面就生成了你要的jar包了，现在就可以去部署在服务器啦。 IDEA自带打包先在你项目的启动类中加入以下代码： 12345678910/** * springboot打包发布到tomcat需要 * * @param application * @return */@Overrideprotected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123; return application.sources(DemoApplication.class);&#125; 接下来快捷键 Ctrl+Alt+Shift+S 同时按会出现下图页面 点击 + 号！！！然后选择如图所示的 Empty 出现如下界面 设置完成后点击 OK。 接下来执行 Bulid ，选择你新建的打包方式名执行就 OK 啦。 以上就是介绍的两种打包方式，自行选择使用。","categories":[{"name":"Java","slug":"Java","permalink":"https://hasaik.com/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://hasaik.com/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hasaik.com/tags/Java/"},{"name":"SpringBoot打包","slug":"SpringBoot打包","permalink":"https://hasaik.com/tags/SpringBoot打包/"}]},{"title":"本站已开通订阅功能","slug":"about-hexo-subscribe","date":"2019-11-25T11:19:18.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/dd9d9f86.html","link":"","permalink":"https://hasaik.com/posts/dd9d9f86.html","excerpt":"","text":"小站新开通订阅功能，欢迎大家体验。 123456789101112131415161718 .::::. .::::::::. ::::::::::: ..:::::::::::' '::::::::::::' .:::::::::: '::::::::::::::.. ..::::::::::::. ``:::::::::::::::: ::::``:::::::::' .:::. ::::' ':::::' .::::::::. .::::' :::: .:::::::'::::. .:::' ::::: .:::::::::' ':::::. .::' :::::.:::::::::' ':::::. .::' ::::::::::::::' ``::::. ...::: ::::::::::::' ``::.````':. ':::::::::' ::::.. '.:::::' ':'````.. 订阅地址： 订阅地址 佛祖保佑永无BUG 神兽护体 代码注释(各种版本)： 佛祖保佑、永无BUG","categories":[{"name":"Hexo订阅","slug":"Hexo订阅","permalink":"https://hasaik.com/categories/Hexo订阅/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"},{"name":"邮件订阅","slug":"邮件订阅","permalink":"https://hasaik.com/tags/邮件订阅/"}]},{"title":"Hexo优化之lazyload图片懒加载","slug":"about-hexo-lazyload","date":"2019-11-19T14:54:16.000Z","updated":"2020-03-18T08:08:35.856Z","comments":true,"path":"posts/61913369.html","link":"","permalink":"https://hasaik.com/posts/61913369.html","excerpt":"","text":"前言Hexo 博客虽然功能很强大，但也越来越繁重了，访问速度上有了一些问题，这里我也考虑了许多，例如加 cdn，将国外的资源引用改为国内镜像等方式。今天又想到如果一个页面的图片很多，那么如何来提高博客的访问速度呢？ 经过一番寻找之后，找到一个方案，就是懒加载，通俗点讲就是当你翻到图片的时候再加载那张图片，而不是以下将本页面的所有图片都加载完。 配置在你的 Hexo 目录下，执行以下命令： 1npm install hexo-lazyload-image --save 然后在你的 Hexo 目录的配置文件 _config.yml 中添加配置: 1234lazyload: enable: true onlypost: false loadingImg: /images/loading.gif 注意 onlypost：是否仅文章中的图片做懒加载，如果为 false，则主题中的其他图片，也会做懒加载，如头像，logo 等任何图片。 loadingImg：图片未加载时的代替图，不填写使用默认加载图片，如果需要自定义，添填入 loading 图片地址，如果是本地图片，不要忘记把图片添加到你的主题目录下。 Next 主题需将图片放到 \\themes\\next\\source\\images 目录下，然后引用时：loadingImg: /images/图片文件名 福利送上两个gif加载中动图 点击下载动图1 点击下载动图2","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"},{"name":"lazyload","slug":"lazyload","permalink":"https://hasaik.com/tags/lazyload/"},{"name":"图片","slug":"图片","permalink":"https://hasaik.com/tags/图片/"}]},{"title":"Java base64加密解密","slug":"about-java-base64","date":"2019-11-19T13:35:23.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/c4782247.html","link":"","permalink":"https://hasaik.com/posts/c4782247.html","excerpt":"","text":"为什么要使用Base64Base 64主要用途不是加密，而是把一些二进制数转成普通字符，方便在网络上传输。 由于一些二进制字符在传输协议中属于控制字符，不能直接传送，所以需要转换一下才可以。由于某些系统中只能使用ASCII字符，Base64就是用来将非ASCII字符的数据转换成ASCII字符的一种方法，Base64特别适合在http，mime协议下快速传输数据。比如网络中图片的传输。 Base64并非安全领域下的加密解密算法。虽然经常遇到所谓的base64的加密解密。但base64只能算是一个编码算法，对数据内容进行编码来适合传输。虽然base64编码过后原文也变成不能看到的字符格式，但是方式初级又简单。 Base64原理Base64编码方法，要求把每三个8Bit的字节转换为四个6Bit的字节，其中，转换之后的这四个字节中每6个有效bit为是有效数据，空余的那两个 bit用0补上成为一个字节。因此Base64所造成数据冗余不是很严重，Base64是当今比较流行的编码方法，因为它编起来速度快而且简单。 举个例子，有三个字节的原始数据：aaaaaabb bbbbccccc ccdddddd（这里每个字母表示一个bit位） 那么编码之后会变成：00aaaaaa 00bbbbbb 00cccccc 00dddddd 所以可以看出base64编码简单，虽然编码后不是明文，看不出原文，但是解码也很简单。 实现方式123456789101112131415161718192021222324252627282930313233package com.scaffolding.demo.utils;import java.nio.charset.StandardCharsets;import java.util.Base64;/** * @author: Xuxu * @date: 2019-11-19 11:49 **/public class Base64Util &#123; /** * 加密 */ public static String asBase64(String str) &#123; return Base64.getEncoder().encodeToString(str.getBytes(StandardCharsets.UTF_8)); &#125; /** * 解密 */ public static String asString(String base64) &#123; return new String(Base64.getDecoder().decode(base64), StandardCharsets.UTF_8); &#125; public static void main(String[] args) &#123; String str = \"123456\"; //加密 System.out.println(Base64Util.asBase64(str)); //解密后 System.out.println(Base64Util.asString(Base64Util.asBase64(str))); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://hasaik.com/categories/Java/"},{"name":"Base64","slug":"Java/Base64","permalink":"https://hasaik.com/categories/Java/Base64/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hasaik.com/tags/Java/"},{"name":"Base64","slug":"Base64","permalink":"https://hasaik.com/tags/Base64/"}]},{"title":"Java实现MD5加盐加密和MD5与SHA-1混合加盐加密两种方式","slug":"about-java-md5","date":"2019-11-18T12:53:11.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/a7df3b40.html","link":"","permalink":"https://hasaik.com/posts/a7df3b40.html","excerpt":"","text":"现在一般的MD5加密在网上随随便便就能够解密，解密的网站有以下几个： PMD5 CMD5 站长工具 好了介绍了这么多密码解密的网站，现在我们来介绍如何提高密码的安全性，来防止上面的网站轻松破解我们的密码。 MD5加盐加密123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package com.scaffolding.demo.utils;import java.security.MessageDigest;import java.util.Random;/** * @author: Xuxu * @date: 2019-11-18 11:20 **/public class MD5Util &#123; /** * byte[]字节数组 转换成 十六进制字符串 * * @param arr 要转换的byte[]字节数组 * @return String 返回十六进制字符串 */ private static String hex(byte[] arr) &#123; StringBuffer sb = new StringBuffer(); for (int i = 0; i &lt; arr.length; ++i) &#123; sb.append(Integer.toHexString((arr[i] &amp; 0xFF) | 0x100).substring(1, 3)); &#125; return sb.toString(); &#125; /** * MD5加密,并把结果由字节数组转换成十六进制字符串 * * @param str 要加密的内容 * @return String 返回加密后的十六进制字符串 */ private static String md5Hex(String str) &#123; try &#123; MessageDigest md = MessageDigest.getInstance(\"MD5\"); byte[] digest = md.digest(str.getBytes()); return hex(digest); &#125; catch (Exception e) &#123; e.printStackTrace(); System.out.println(e.toString()); return \"\"; &#125; &#125; /** * 生成含有随机盐的密码 * * @param password 要加密的密码 * @return String 含有随机盐的密码 */ public static String getSaltMD5(String password) &#123; // 生成一个16位的随机数 Random random = new Random(); StringBuilder sBuilder = new StringBuilder(16); sBuilder.append(random.nextInt(99999999)).append(random.nextInt(99999999)); int len = sBuilder.length(); if (len &lt; 16) &#123; for (int i = 0; i &lt; 16 - len; i++) &#123; sBuilder.append(\"0\"); &#125; &#125; // 生成最终的加密盐 String salt = sBuilder.toString(); password = md5Hex(password + salt); char[] cs = new char[48]; for (int i = 0; i &lt; 48; i += 3) &#123; cs[i] = password.charAt(i / 3 * 2); char c = salt.charAt(i / 3); cs[i + 1] = c; cs[i + 2] = password.charAt(i / 3 * 2 + 1); &#125; return String.valueOf(cs); &#125; /** * 验证加盐后是否和原密码一致 * * @param password 原密码 * @param password 加密之后的密码 * @return boolean true表示和原密码一致 false表示和原密码不一致 */ public static boolean getSaltverifyMD5(String password, String md5str) &#123; char[] cs1 = new char[32]; char[] cs2 = new char[16]; for (int i = 0; i &lt; 48; i += 3) &#123; cs1[i / 3 * 2] = md5str.charAt(i); cs1[i / 3 * 2 + 1] = md5str.charAt(i + 2); cs2[i / 3] = md5str.charAt(i + 1); &#125; String Salt = new String(cs2); return md5Hex(password + Salt).equals(String.valueOf(cs1)); &#125; public static void main(String[] args) &#123; // 原密码 String plaintext = \"123456\"; // 获取加盐后的MD5值 String ciphertext = MD5Util.getSaltMD5(plaintext); System.out.println(\"加盐后MD5：\" + ciphertext); System.out.println(\"是否是同一字符串:\" + MD5Util.getSaltverifyMD5(plaintext, ciphertext)); &#125;&#125; 输出结果为： 加盐后MD5：e9a97f49db0f20911ab1d815624b33e75a3236e76040f509 是否是同一字符串：true 这时，我们可以把加盐后的 加密密码 拿到 MD5加密网上去验证是否能够解密（这里我只列举其中一个网站进行验证，你们也可以自行拿去各个MD5加密网站上去验证） 我们可以看到，MD5加密网站已经无法破解我们加密的密码了，所以MD5加盐加密的密码相对来说还是比较安全的。 MD5和SHA-1混合加盐加密123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151package com.scaffolding.demo.utils;import java.io.UnsupportedEncodingException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.Random;/** * @author: Xuxu * @date: 2019-11-18 13:15 **/public class MD5Utils &#123; /** * md5和sha-1混合加密 * * @param inputText 要加密的内容 * @return String md5和sha-1混合加密之后的密码 */ public static String md5AndSha(String inputText) &#123; return sha(md5(inputText)); &#125; /** * md5加密 * * @param inputText 要加密的内容 * @return String md5加密之后的密码 */ public static String md5(String inputText) &#123; return encrypt(inputText, \"md5\"); &#125; /** * sha-1加密 * * @param inputText 要加密的内容 * @return sha-1加密之后的密码 */ public static String sha(String inputText) &#123; return encrypt(inputText, \"sha-1\"); &#125; /** * md5或者sha-1加密 * * @param inputText 要加密的内容 * @param algorithmName 加密算法名称：md5或者sha-1，不区分大小写 * @return String md5或者sha-1加密之后的结果 */ private static String encrypt(String inputText, String algorithmName) &#123; if (inputText == null || \"\".equals(inputText.trim())) &#123; throw new IllegalArgumentException(\"请输入要加密的内容\"); &#125; if (algorithmName == null || \"\".equals(algorithmName.trim())) &#123; algorithmName = \"md5\"; &#125; String encryptText = null; try &#123; MessageDigest m = MessageDigest.getInstance(algorithmName); m.update(inputText.getBytes(\"UTF8\")); byte s[] = m.digest(); return hex(s); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; catch (UnsupportedEncodingException e) &#123; e.printStackTrace(); &#125; return encryptText; &#125; /** * byte[]字节数组 转换成 十六进制字符串 * * @param arr 要转换的byte[]字节数组 * @return String 返回十六进制字符串 */ private static String hex(byte[] arr) &#123; StringBuffer sb = new StringBuffer(); for (int i = 0; i &lt; arr.length; ++i) &#123; sb.append(Integer.toHexString((arr[i] &amp; 0xFF) | 0x100).substring(1, 3)); &#125; return sb.toString(); &#125; /** * 生成含有随机盐的密码 * * @param password 要加密的密码 * @return String 含有随机盐的密码 */ public static String getSaltMd5AndSha(String password) &#123; // 生成一个16位的随机数 Random random = new Random(); StringBuilder sBuilder = new StringBuilder(16); sBuilder.append(random.nextInt(99999999)).append(random.nextInt(99999999)); int len = sBuilder.length(); if (len &lt; 16) &#123; for (int i = 0; i &lt; 16 - len; i++) &#123; sBuilder.append(\"0\"); &#125; &#125; // 生成最终的加密盐 String salt = sBuilder.toString(); password = md5AndSha(password + salt); char[] cs = new char[48]; for (int i = 0; i &lt; 48; i += 3) &#123; cs[i] = password.charAt(i / 3 * 2); char c = salt.charAt(i / 3); cs[i + 1] = c; cs[i + 2] = password.charAt(i / 3 * 2 + 1); &#125; return String.valueOf(cs); &#125; /** * 验证加盐后是否和原密码一致 * * @param password 原密码 * @param password 加密之后的密码 * @return boolean true表示和原密码一致 false表示和原密码不一致 */ public static boolean getSaltverifyMd5AndSha(String password, String md5str) &#123; char[] cs1 = new char[32]; char[] cs2 = new char[16]; for (int i = 0; i &lt; 48; i += 3) &#123; cs1[i / 3 * 2] = md5str.charAt(i); cs1[i / 3 * 2 + 1] = md5str.charAt(i + 2); cs2[i / 3] = md5str.charAt(i + 1); &#125; String salt = new String(cs2); String encrypPassword = md5AndSha(password + salt); // 加密密码去掉最后8位数 encrypPassword = encrypPassword.substring(0, encrypPassword.length() - 8); return encrypPassword.equals(String.valueOf(cs1)); &#125; public static void main(String[] args) &#123; // 原密码 String plaintext = \"123456\"; // 获取加盐后的MD5值 String ciphertext = MD5Utils.getSaltMd5AndSha(plaintext); System.out.println(\"加盐后MD5：\" + ciphertext); System.out.println(\"是否是同一字符串:\" + MD5Utils.getSaltverifyMd5AndSha(plaintext, ciphertext)); &#125;&#125; 眼睛比较明亮的朋友，可能会发现 MD5 和 SHA-1 混合加盐加密 与 MD5 加盐加密 的 getSaltverifyMD5(String password, String md5str) 方法有些不同，是的，MD5和SHA-1混合加盐加密 的 getSaltverifyMD5(String password, String md5str) 多了下面这一行代码： 12// 加密密码去掉最后8位数encrypPassword = encrypPassword.substring(0 , encrypPassword.length() - 8); 就会有人问了，为什么要去掉加密密码的最后8位数，而MD5加盐加密却不要？其实这是有原因的 我们可以看到密码为 123456 经过 MD5、MD5和SHA-1 混合加密的结果： &emsp;&emsp;MD5 ：e10adc3949ba59abbe56e057f20f883e （32位数） &emsp;&emsp;MD5和SHA-1 ：10470c3b4b1fed12c3baac014be15fac67c6e815 （40位数） 发现有什么不同了没？两种加密之后的密码长度是不是 不一样了 经过MD5加密之后的密码长度为32，而MD5和SHA-1的为40 而我们在 getSaltMd5AndSha （与getSaltMD5代码相同，只是方法名称不一样）中定义的 盐长度为 16位数（即 StringBuilder sBuilder = new StringBuilder(16) ;） 加盐加密后的密码长度为 48位数 (即 char[] cs = new char[48]; ) 加盐加密后的密码长度 = 盐长度 + MD5加密的密码长度 (即 48 = 16 + 32 ) 长度刚刚等于48位数，所以char[] cs 刚好可以把 密码和盐全部都存储起来，可是MD5和SHA-1 加密的密码长度为40，即 48 &lt; 40 + 16，还会有八位数不能够存储到char[] cs 中, 这也就意味着 char[] cs 只能够存储 MD5和SHA-1 加密密码的前32位数 和 16位数的盐，MD5和SHA-1 加密密码的最后八位会丢失，而在验证加盐后是否和原密码一致的getSaltverifyMd5AndSha(String password, String md5str)方法中，我们定义的 char[] cs1 = new char[32];（即去掉盐之后的MD5和SHA-1 加密密码）只有32位数，而MD5和SHA-1 加密密码实际位数有40位数，那么在进行encrypPassword.equals(String.valueOf(cs1) ) 时，就会返回false，即原密码与加密密码验证不一致。 所以要解决这个问题，就是把MD5和SHA-1 加密的密码结果 去掉最后8位数，再进行比较，这样就可以验证原密码是否与加密密码一致了。","categories":[{"name":"Java","slug":"Java","permalink":"https://hasaik.com/categories/Java/"},{"name":"MD5","slug":"Java/MD5","permalink":"https://hasaik.com/categories/Java/MD5/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hasaik.com/tags/Java/"},{"name":"MD5","slug":"MD5","permalink":"https://hasaik.com/tags/MD5/"},{"name":"SHA-1","slug":"SHA-1","permalink":"https://hasaik.com/tags/SHA-1/"}]},{"title":"使用增强版valine","slug":"about-hexo-valine","date":"2019-11-15T11:48:15.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/bf9eba42.html","link":"","permalink":"https://hasaik.com/posts/bf9eba42.html","excerpt":"","text":"云淡风轻在很早之前就开发了一款极简的valine评论系统，由于现在Disqus被墙，使用起来步骤太复杂，所以现在大多数个人博客还是以valine为主。但是原生的valine功能过于单调，后来有不少大佬在基于原作者的基础上增强了valine的功能，我想推荐的一款就是 Deserts 增强的valine，作者介绍文档并没有针对hexo博客做出适配，所以我记录一下我在hexo博客中做出的修改。 相比于原生valine，作者做出了以下增强功能： 支持博主标记显示 必须填写昵称和邮箱才能评论（反垃圾评论的作用） 支持PJAX主题 可以自定义表情包，评论样式修改，点赞功能（新版中被作者去掉了。。。） 评论表情包 支持Disqus数据迁移到valine 隐私保护：敏感字段限制读取，如E-mail、用户信息（使用的浏览器等）、IP 头像显示、样式美化 完善的邮件通知 基于Akimmet的垃圾评论自动标注和过滤 通知邮件补发 …… 评论在线预览，具体介绍可以参考作者原文博客 为了适配hexo博客，可以做如下修改： 先下载作者给出的 Valine.min.js 文件，放到 hexo/themes/next/source/js/src 下，或者你的其它托管路径下 然后修改代码如下： 文件位置：hexo/themes/next/layout/_third-party/comments/valine.swig 12345678910111213141516171819202122232425262728293031&#123;% if theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125; &lt;script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"&gt;&lt;/script&gt; &lt;script src=\"/js/src/Valine.min.js\"&gt;&lt;/script&gt; &lt;!--&lt;script src=\"//unpkg.com/valine/dist/Valine.min.js\"&gt;&lt;/script&gt;--&gt; &lt;!-- https://deserts.io/diy-a-comment-system/ --&gt; &lt;script type=\"text/javascript\"&gt; new Valine(&#123; lang: 'zh-cn', admin_email: '22476705@qq.com', //博主邮箱 el: '#comments' , appId: '&#123;&#123; theme.valine.appid &#125;&#125;', appKey: '&#123;&#123; theme.valine.appkey &#125;&#125;', emoticon_url: 'https://cloud.panjunwen.com/alu', emoticon_list: [\"吐.png\",\"喷血.png\",\"狂汗.png\",\"不说话.png\",\"汗.png\",\"坐等.png\",\"献花.png\",\"不高兴.png\",\"中刀.png\",\"害羞.png\",\"皱眉.png\",\"小眼睛.png\",\"中指.png\",\"尴尬.png\",\"瞅你.png\",\"想一想.png\",\"中枪.png\",\"得意.png\",\"肿包.png\",\"扇耳光.png\",\"亲亲.png\",\"惊喜.png\",\"脸红.png\",\"无所谓.png\",\"便便.png\",\"愤怒.png\",\"蜡烛.png\",\"献黄瓜.png\",\"内伤.png\",\"投降.png\",\"观察.png\",\"看不见.png\",\"击掌.png\",\"抠鼻.png\",\"邪恶.png\",\"看热闹.png\",\"口水.png\",\"抽烟.png\",\"锁眉.png\",\"装大款.png\",\"吐舌.png\",\"无奈.png\",\"长草.png\",\"赞一个.png\",\"呲牙.png\",\"无语.png\",\"阴暗.png\",\"不出所料.png\",\"咽气.png\",\"期待.png\",\"高兴.png\",\"吐血倒地.png\",\"哭泣.png\",\"欢呼.png\",\"黑线.png\",\"喜极而泣.png\",\"喷水.png\",\"深思.png\",\"鼓掌.png\",\"暗地观察.png\"], placeholder: '&#123;&#123; theme.valine.placeholder &#125;&#125;', &#125;); &lt;!--点击邮件中的链接跳转至相应评论--&gt; if(window.location.hash)&#123; var checkExist = setInterval(function() &#123; if ($(window.location.hash).length) &#123; $('html, body').animate(&#123;scrollTop: $(window.location.hash).offset().top-90&#125;, 1000); clearInterval(checkExist); &#125; &#125;, 100); &#125; &lt;/script&gt;&#123;% endif %&#125; 这样就可以基本替代了，但是…但是还是存在不少BUG，比如，原生valine自带的首页元数据评论数量统计不见了，有人提出了issue，作者表示无意开发这个功能。 如果你懂一些css知识的话，评论样式依旧可以自己在 cuntom.styl 文件中修改。","categories":[{"name":"Valine","slug":"Valine","permalink":"https://hasaik.com/categories/Valine/"}],"tags":[{"name":"Valine","slug":"Valine","permalink":"https://hasaik.com/tags/Valine/"}]},{"title":"Hexo博客+Next主题归档页美化","slug":"about-hexo-archivesbeautiful","date":"2019-11-14T15:39:14.000Z","updated":"2020-03-18T08:08:35.856Z","comments":true,"path":"posts/f68f129b.html","link":"","permalink":"https://hasaik.com/posts/f68f129b.html","excerpt":"","text":"大家在使用hexo博客的Next主题的时候应该都觉得原来默认的归档页面很丑吧，最近也有小伙伴问我这个归档页面美化怎么弄的，今天就小小的总结一下。 我的归档页面 首先我们打开Next主题目录（注意这个美化样式只支持Next主题），然后找到 next/layout/_macro/post-collapse.swig 文件。 注意：Next5和Next6主题下这个文件中内容可能会有点不太一样，需要找到对应内容对应一一修改。 以下基于Next5，其中原始内容如下，Next6主题下类似： 文件位置：/hexo/next/layout/_macro/post-collapse.swig 12345678910111213141516171819202122232425262728293031323334&#123;% macro render(post) %&#125; &lt;article class=\"post post-type-&#123;&#123; post.type | default('normal') &#125;&#125;\" itemscope itemtype=\"http://schema.org/Article\"&gt; &lt;header class=\"post-header\"&gt; &lt;&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125; class=\"post-title\"&gt; &#123;% if post.link %&#125;&#123;# Link posts #&#125; &lt;a class=\"post-title-link post-title-link-external\" target=\"_blank\" href=\"&#123;&#123; url_for(post.link) &#125;&#125;\" itemprop=\"url\"&gt; &#123;&#123; post.title or post.link &#125;&#125; &lt;i class=\"fa fa-external-link\"&gt;&lt;/i&gt; &lt;/a&gt; &#123;% else %&#125; &lt;a class=\"post-title-link\" href=\"&#123;&#123; url_for(post.path) &#125;&#125;\" itemprop=\"url\"&gt; &#123;% if post.type === 'picture' %&#125; &#123;&#123; post.content &#125;&#125; &#123;% else %&#125; &lt;span itemprop=\"name\"&gt;&#123;&#123; post.title | default(__('post.untitled')) &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;/a&gt; &#123;% endif %&#125; &lt;/&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125;&gt; &lt;div class=\"post-meta\"&gt; &lt;time class=\"post-time\" itemprop=\"dateCreated\" datetime=\"&#123;&#123; moment(post.date).format() &#125;&#125;\" content=\"&#123;&#123; date(post.date, config.date_format) &#125;&#125;\" &gt; &#123;&#123; date(post.date, 'MM-DD') &#125;&#125; &lt;/time&gt; &lt;/div&gt; &lt;/header&gt;&lt;/article&gt;&#123;% endmacro %&#125; 然后主要找 class 属性做修改，首先将 post-meta 代码块的内容上移到 post-header 下面，如下： 123456789101112131415161718192021222324252627282930313233343536373839404142&#123;% macro render(post) %&#125; &lt;article class=\"post post-type-&#123;&#123; post.type | default('normal') &#125;&#125;\" itemscope itemtype=\"http://schema.org/Article\"&gt; &lt;header class=\"post-header\"&gt; + &lt;div class=\"post-meta\"&gt;+ &lt;time class=\"post-time\" itemprop=\"dateCreated\"+ datetime=\"&#123;&#123; moment(post.date).format() &#125;&#125;\"+ content=\"&#123;&#123; date(post.date, config.date_format) &#125;&#125;\" &gt;+ &#123;&#123; date(post.date, 'MM-DD') &#125;&#125;+ &lt;/time&gt;+ &lt;/div&gt; &lt;&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125; class=\"post-title\"&gt; &#123;% if post.link %&#125;&#123;# Link posts #&#125; &lt;a class=\"post-title-link post-title-link-external\" target=\"_blank\" href=\"&#123;&#123; url_for(post.link) &#125;&#125;\" itemprop=\"url\"&gt; &#123;&#123; post.title or post.link &#125;&#125; &lt;i class=\"fa fa-external-link\"&gt;&lt;/i&gt; &lt;/a&gt; &#123;% else %&#125; &lt;a class=\"post-title-link\" href=\"&#123;&#123; url_for(post.path) &#125;&#125;\" itemprop=\"url\"&gt; &#123;% if post.type === 'picture' %&#125; &#123;&#123; post.content &#125;&#125; &#123;% else %&#125; &lt;span itemprop=\"name\"&gt;&#123;&#123; post.title | default(__('post.untitled')) &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;/a&gt; &#123;% endif %&#125; &lt;/&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125;&gt; - &lt;div class=\"post-meta\"&gt;- &lt;time class=\"post-time\" itemprop=\"dateCreated\"- datetime=\"&#123;&#123; moment(post.date).format() &#125;&#125;\"- content=\"&#123;&#123; date(post.date, config.date_format) &#125;&#125;\" &gt;- &#123;&#123; date(post.date, 'MM-DD') &#125;&#125;- &lt;/time&gt;- &lt;/div&gt; &lt;/header&gt;&lt;/article&gt;&#123;% endmacro %&#125; 然后对照下面代码修改 class 属性，红色代码为原始代码，绿色代码为修改后的代码，实际上修改的地方只是在对应的 class 属性前面加上 my- 即可，比如原始是 post-title-link ，修改为 my-post-title-link 。注意以下只是原始代码和修改代码参考对比，不要直接复制！ 1234567891011121314151617181920212223242526272829303132333435363738394041&#123;% macro render(post) %&#125;- &lt;article class=\"post post-type-&#123;&#123; post.type | default('normal') &#125;&#125;\" itemscope itemtype=\"http://schema.org/Article\"&gt;+ &lt;article class=\"my-post post-type-&#123;&#123; post.type | default('normal') &#125;&#125;\" itemscope itemtype=\"http://schema.org/Article\"&gt;- &lt;header class=\"post-header\"&gt;+ &lt;header class=\"my-post-header\"&gt;- &lt;div class=\"post-meta\"&gt;+ &lt;div class=\"my-post-meta\"&gt;- &lt;time class=\"post-time\" itemprop=\"dateCreated\"+ &lt;time class=\"my-post-time\" itemprop=\"dateCreated\" datetime=\"&#123;&#123; moment(post.date).format() &#125;&#125;\" content=\"&#123;&#123; date(post.date, config.date_format) &#125;&#125;\" &gt; &#123;&#123; date(post.date, 'MM-DD') &#125;&#125; &lt;/time&gt; &lt;/div&gt;- &lt;&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125; class=\"post-title\"&gt;+ &lt;&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125; class=\"my-post-title\"&gt; &#123;% if post.link %&#125;&#123;# Link posts #&#125;- &lt;a class=\"post-title-link post-title-link-external\" target=\"_blank\" href=\"&#123;&#123; url_for(post.link) &#125;&#125;\" itemprop=\"url\"&gt;+ &lt;a class=\"my-post-title-link post-title-link-external\" target=\"_blank\" href=\"&#123;&#123; url_for(post.link) &#125;&#125;\" itemprop=\"url\"&gt; &#123;&#123; post.title or post.link &#125;&#125; &lt;i class=\"fa fa-external-link\"&gt;&lt;/i&gt; &lt;/a&gt; &#123;% else %&#125;- &lt;a class=\"post-title-link\" href=\"&#123;&#123; url_for(post.path) &#125;&#125;\" itemprop=\"url\"&gt;+ &lt;a class=\"my-post-title-link\" href=\"&#123;&#123; url_for(post.path) &#125;&#125;\" itemprop=\"url\"&gt; &#123;% if post.type === 'picture' %&#125; &#123;&#123; post.content &#125;&#125; &#123;% else %&#125; &lt;span itemprop=\"name\"&gt;&#123;&#123; post.title | default(__('post.untitled')) &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;/a&gt; &#123;% endif %&#125; &lt;/&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125;&gt; &lt;/header&gt;&lt;/article&gt;&#123;% endmacro %&#125; 最后打开主题目录下的 next/source/css/_custom/custom.styl 文件，在文件末尾添加如下样式： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123/* 归档页样式 began */.page-archive .archive-page-counter &#123; font-size: 18px; background-color: #49b1f5; padding-left: 10px; padding-right: 10px; border-radius: 8px; color: #fff; +mobile() &#123; font-size: 16px; &#125;&#125;.my-post-time&#123; font-size: 11px; position: absolute; color: #fff; background-color: #49b1f5; border-radius: 5px; padding-left: 5px; padding-right: 5px; margin-left: 15px;&#125;.mypost&#123; position: relative; margin-bottom: 1rem; -webkit-transition: all .2s ease-in-out; -moz-transition: all .2s ease-in-out; -o-transition: all .2s ease-in-out; -ms-transition: all .2s ease-in-out; transition: all .2s ease-in-out;&#125;a.my-post-title-link:before&#123; top: 10px; width: 18px; height: 18px; content: \"📚\"; margin-right: 5px; font: normal normal normal 14px/1 FontAwesome; font-size: 15px; line-height: 18px;&#125;.my-post:hover&#123; transform: scale(1.1); box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1); border-radius: 30px; width: 400px; padding: 1px 10px; margin-left: 25px; font-size: 16px; transition-duration: 0.15s; +mobile()&#123; width: 260px; margin-left: 18px; &#125; //display:flex;&#125;a.my-post-title-link&#123; text-decoration: none; font-size: 15px; font-weight: 400; +mobile() &#123; font-size: 14px; &#125;&#125;.my-post-title&#123; display: block; margin-left: 4.5rem; color: #4c4948; text-decoration: none; font-size: .8rem; cursor: pointer; +mobile() &#123; //margin-left: 4rem; &#125;&#125;.my-post-header&#123; position: top; margin-bottom: 1rem; -webkit-transition: all .2s ease-in-out; -moz-transition: all .2s ease-in-out; -o-transition: all .2s ease-in-out; -ms-transition: all .2s ease-in-out; transition: all .2s ease-in-out;&#125;//.my-post-title-link&#123;// font-size: 16px;// font-weight: 500;//&#125;.my-post-meta&#123; position: absolute; color: #99a9bf; width: 80px; color: #114142;&#125;div.post-block.tag .collection-title h2 &#123; border-width: 1px; border-style: solid; border-color: #3f3f3f; border-radius: 20px; font-size: 22px; background-color: #b4e8fa; padding: 2px 15px; letter-spacing: 1.5px; box-sizing: border-box; color: #3f3f3f; display: inline-block; margin: 10px 0 10px; text-align: center; +mobile()&#123; font-size: 18px; &#125;&#125;.category-list-link:hover&#123; transform: scale(1.1); box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1); border-radius: 8px; padding: 1px 1px; margin-left: 5px; font-size: 16px; transition-duration: 0.15s; //display:flex;&#125;/* 归档页样式 end */ 然后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 就可以查看效果了！","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"}]},{"title":"Hexo博客Valine评论样式美化","slug":"about-hexo-valinebeautiful","date":"2019-11-14T15:36:50.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/89ea6c8b.html","link":"","permalink":"https://hasaik.com/posts/89ea6c8b.html","excerpt":"","text":"Valine 是一款比较轻量级的纯前端的评论系统，目前很多个人博客都在使用 Valine 评论系统，并且支持匿名留言。 Valine的Github地址 我个人也是很喜欢这一款评论系统的，之前用过来必力、Gitalk 等评论系统，都觉得很难用，尤其是来必力，这款韩国人做的评论系统在国内使用很容易出现加载非常慢的情况，往往博客内容都加载完成评论系统还需要好久才加载完，在国内体验比较差吧。 那么 Valine 默认的样式其实比较素，当然不同人喜欢的风格都不一样，如果有喜欢我这种评论样式的，不妨留个言并且在文章末尾给个五星好评吧~ 注意：本Valine美化目前只适应于 valine1.3.4 版本的，如果是其它版本的可能css样式会错乱。 具体更改 Valine 版本的话，主要是更改Valine的js版本，比如我的是next主题，那么就在主题目录下 next\\layout\\_third-party\\comments\\valine.swig 中找到引入 valine.js 的 &lt;script&gt;&lt;/script&gt; 语句，我是将 Valine 的 1.3.4 版本的 js 放到目录本地的，所以将引入 js 的语句改成了：&lt;script src=&quot;/js/src/valine1.3.4.js&quot;&gt;&lt;/script&gt; 当然不同版本的next主题中 valine.swig 中内容也不同。 比如next6主题的 valine.swig 中代码是这样的： 12345&#123;% set valine_uri = '//unpkg.com/valine/dist/Valine.min.js' %&#125;&#123;% if theme.vendors.valine %&#125; &#123;% set valine_uri = theme.vendors.valine %&#125;&#123;% endif %&#125;&lt;script src=\"&#123;&#123; valine_uri &#125;&#125;\"&gt;&lt;/script&gt; 而next5主题的就在valine.swig开头，内容如下： 123&#123;% if theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125; &lt;script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"&gt;&lt;/script&gt; &lt;script src=\"//unpkg.com/valine/dist/Valine.min.js\"&gt;&lt;/script&gt; 而url中 //unpkg.com/valine/dist/Valine.min.js 默认是引入最新的 valine.js 文件，所以不管是next5还是next6主题都是修改这个url地址，只要修改成 valine1.3.4 版本的js文件即可。 然后打开主题目录下 next\\source\\css\\_custom\\custom.styl ，在文件末尾添加如下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217/*valine 评论系统样式*/div#comments.comments.v&#123; margin-top: 0px !important; margin-left: 0px !important; margin-right: 0px !important;&#125;div.vheader.item2&#123; border-bottom: 1px solid #5f5f5f; height: 35px !important;&#125;.v .vwrap .vheader.item2 .vinput&#123; height: 30px !important; border: 0px !important; width: 25% !important; margin: 0px !important;&#125;input.vnick.vinput&#123; border-right: 2px solid #a4d8fa !important;&#125;div.vcontrol&#123; padding-top: 0px !important;&#125;div#comments.comments.v&#123; border: 0px;&#125;.v .vwrap&#123; border: 2px solid black !important; height: 250px !important; border-radius: 6px !important; overflow: visible !important; counter-reset: avater;&#125;.v .vwrap .vedit .vemojis&#123; width: 600px !important; background-color: #fff !important; border-radius: 5px !important;&#125;.v .vwrap .vedit .vpreview &#123; width: 600px !important; background-color: #fff !important; border-radius: 5px !important;&#125;.v .vbtn&#123; background-color: #971212 !important; color: #fff !important;&#125;.v .vwrap .vedit .vctrl&#123; text-align: left !important;&#125;.v .vwrap .vedit .vctrl span&#123; background-color: #7f7f7f !important; color: #fff !important; border-radius: 3px !important; padding: 3px !important;&#125;.v .vwrap .vedit .vctrl&#123; padding: 0px !important; margin: 0px !important;&#125;.v .vlist .vcard .vquote .vcontent &#123; font-size: 15px; font-weight: 200;&#125;div.vedit&#123; height: 120px;&#125;div.vcontrol&#123; margin-top: 30px;&#125;.v .veditor&#123; min-height: 70px !important; height: 100px !important;&#125;.v .vlist .vcard &#123; border: 1px solid #ccc !important; padding-left: 14px !important; padding-right: 14px !important; margin-bottom: 20px !important; border-radius: 10px !important;&#125;.v .vlist .vquote .vcard&#123; border: 0px !important; margin-bottom: 0px !important; border-radius: 0px !important; padding: 0px !important;&#125;.v .vlist .vcard .vhead .vsys&#123; display:none !important; background-color: #fff !important;&#125;.v .vlist .vcard .vh .vmeta .vat&#123; background-color: #177714 !important; color: #fff !important; border-radius: 3px !important; padding-left: 10px !important; padding-right: 10px !important;&#125;.v .vlist .vcard .vimg&#123; margin: 0 12px 0 0; counter-increment: avater;&#125;/*设置评论头像旋转*/.v .vlist .vcard .vimg:hover &#123; -webkit-transform: rotate(360deg); -moz-transform: rotate(360deg); -ms-transform: rotate(360deg); -transform: rotate(360deg);&#125;.v .vlist .vcard .vquote&#123; margin-left: 40px; &#125;.v .vlist .vcard .vquote&#123; counter-reset: avaters;&#125;.v .vlist .vcard .vquote .vimg&#123; display: avaters !important;&#125;.v .vlist .vcard .vquote .vhead:before&#123; display: block; float: left; width: 38px; height: 38px; line-height: 38px; margin: 0 12px 0 0; color: #fff; font-size: 15px; font-weight: bold; font-style: normal; background-color: #2d4e41; border: 3px solid #60a1e5; border-radius: 50%; text-align: center; /*content: counter(avater)'.'counter(avaters); counter-increment: avaters;*/&#125;.v .vlist .vcard p &#123; top: -1.5em; position: relative; z-index: 1; margin: unset;&#125;.v .vlist .vcard .vquote a.at &#123; font-size: 13px; color: #bea124; text-decoration: none; border: unset; position: relative; top: -40px;&#125;.v .vlist .vcard .vquote .vcontent&#123; font-size: 15px; font-weight: 200;&#125;.v .vlist .vcard .vcontent &#123; margin-top: 58px !important; font-size: 15px !important; font-weight: 500 !important; padding-top: 0 !important; margin-bottom: unset !important;&#125;.v .vlist .vcard .vquote .vhead .vnick &#123; color: #5af !important; font-weight: 300 !important; font-size: 15px !important;&#125;.v .vlist .vcard .vhead .vnick &#123; font-size: 18px !important; font-weight: 500 !important; color: #5b6b68 !important;&#125;.v .vlist .vcard&#123; padding-top: 8px !important;&#125;.v .vlist .vcard .vhead&#123; float: left !important;&#125;.v .vlist .vcard .vh .vmeta&#123; float: right !important;&#125;.v .vlist .vcard .vcontent.expand:after&#123; content: \"点击查看全部\" !important; font-weight: 400 !important;&#125;/**/ 其中有需要自己修改的地方可以在浏览器中F12自行修改css样式即可。","categories":[{"name":"Valine","slug":"Valine","permalink":"https://hasaik.com/categories/Valine/"}],"tags":[{"name":"Valine","slug":"Valine","permalink":"https://hasaik.com/tags/Valine/"}]},{"title":"Hexo博客+Next主题鼠标点击特效","slug":"about-hexo-mouseclick","date":"2019-11-14T15:30:09.000Z","updated":"2020-03-18T08:08:35.856Z","comments":true,"path":"posts/9c9b482b.html","link":"","permalink":"https://hasaik.com/posts/9c9b482b.html","excerpt":"","text":"感觉鼠标点击出现效果也还不错哈，不妨在本站空白处点击一下看看效果~ 效果 配置在主题 _config.yml 中添加动态配置项 123cursor_effect: enabled: true type: love # fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字 代码文件位置：/themes/next/layout/_custom/custom.swig ，添加如下代码： 12345678910111213&#123;% if theme.cursor_effect %&#125; &#123;% if theme.cursor_effect.type == \"fireworks\" %&#125; &lt;script src=\"/js/cursor/fireworks.js\"&gt;&lt;/script&gt; &#123;% elseif theme.cursor_effect.type == \"explosion\" %&#125; &lt;canvas class=\"fireworks\" style=\"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;\" &gt;&lt;/canvas&gt; &lt;script src=\"//cdn.bootcss.com/animejs/2.2.0/anime.min.js\"&gt;&lt;/script&gt; &lt;script src=\"/js/cursor/explosion.min.js\"&gt;&lt;/script&gt; &#123;% elseif theme.cursor_effect.type == \"love\" %&#125; &lt;script src=\"/js/cursor/love.min.js\"&gt;&lt;/script&gt; &#123;% elseif theme.cursor_effect.type == \"text\" %&#125; &lt;script src=\"/js/cursor/text.js\"&gt;&lt;/script&gt; &#123;% endif %&#125;&#123;% endif %&#125; 如果是第一次使用这个 custom.swig ，则需要在 /themes/next/layout/_layout.swig 中引入 1&#123;% include '_custom/custom.swig' %&#125; 将以下4个 JS 文件复制到目录 /themes/next/source/js/cursor/ 下 fireworks.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154class Circle &#123; constructor(&#123; origin, speed, color, angle, context &#125;) &#123; this.origin = origin this.position = &#123; ...this.origin &#125; this.color = color this.speed = speed this.angle = angle this.context = context this.renderCount = 0 &#125; draw() &#123; this.context.fillStyle = this.color this.context.beginPath() this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2) this.context.fill() &#125; move() &#123; this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3) this.renderCount++ &#125;&#125;class Boom &#123; constructor (&#123; origin, context, circleCount = 16, area &#125;) &#123; this.origin = origin this.context = context this.circleCount = circleCount this.area = area this.stop = false this.circles = [] &#125; randomArray(range) &#123; const length = range.length const randomIndex = Math.floor(length * Math.random()) return range[randomIndex] &#125; randomColor() &#123; const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F'] return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) &#125; randomRange(start, end) &#123; return (end - start) * Math.random() + start &#125; init() &#123; for(let i = 0; i &lt; this.circleCount; i++) &#123; const circle = new Circle(&#123; context: this.context, origin: this.origin, color: this.randomColor(), angle: this.randomRange(Math.PI - 1, Math.PI + 1), speed: this.randomRange(1, 6) &#125;) this.circles.push(circle) &#125; &#125; move() &#123; this.circles.forEach((circle, index) =&gt; &#123; if (circle.position.x &gt; this.area.width || circle.position.y &gt; this.area.height) &#123; return this.circles.splice(index, 1) &#125; circle.move() &#125;) if (this.circles.length == 0) &#123; this.stop = true &#125; &#125; draw() &#123; this.circles.forEach(circle =&gt; circle.draw()) &#125;&#125;class CursorSpecialEffects &#123; constructor() &#123; this.computerCanvas = document.createElement('canvas') this.renderCanvas = document.createElement('canvas') this.computerContext = this.computerCanvas.getContext('2d') this.renderContext = this.renderCanvas.getContext('2d') this.globalWidth = window.innerWidth this.globalHeight = window.innerHeight this.booms = [] this.running = false &#125; handleMouseDown(e) &#123; const boom = new Boom(&#123; origin: &#123; x: e.clientX, y: e.clientY &#125;, context: this.computerContext, area: &#123; width: this.globalWidth, height: this.globalHeight &#125; &#125;) boom.init() this.booms.push(boom) this.running || this.run() &#125; handlePageHide() &#123; this.booms = [] this.running = false &#125; init() &#123; const style = this.renderCanvas.style style.position = 'fixed' style.top = style.left = 0 style.zIndex = '999999999999999999999999999999999999999999' style.pointerEvents = 'none' style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight document.body.append(this.renderCanvas) window.addEventListener('mousedown', this.handleMouseDown.bind(this)) window.addEventListener('pagehide', this.handlePageHide.bind(this)) &#125; run() &#123; this.running = true if (this.booms.length == 0) &#123; return this.running = false &#125; requestAnimationFrame(this.run.bind(this)) this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.booms.forEach((boom, index) =&gt; &#123; if (boom.stop) &#123; return this.booms.splice(index, 1) &#125; boom.move() boom.draw() &#125;) this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight) &#125;&#125;const cursorSpecialEffects = new CursorSpecialEffects()cursorSpecialEffects.init() explosion.min.js 1\"use strict\";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:\"linear\",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(\".fireworks\");if(canvasEl)&#123;var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;\"sidebar\"!==e.target.id&amp;&amp;\"toggle-sidebar\"!==e.target.id&amp;&amp;\"A\"!==e.target.nodeName&amp;&amp;\"IMG\"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)&#125;\"use strict\";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:\"linear\",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(\".fireworks\");if(canvasEl)&#123;var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;\"sidebar\"!==e.target.id&amp;&amp;\"toggle-sidebar\"!==e.target.id&amp;&amp;\"A\"!==e.target.nodeName&amp;&amp;\"IMG\"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)&#125;; love.min.js 1!function(e,t,a)&#123;function n()&#123;c(\".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;\"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)&#125;function o()&#123;var t=\"function\"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(\"div\");a.className=\"heart\",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(\"style\");a.type=\"text/css\";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(\"head\")[0].appendChild(a)&#125;function s()&#123;return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); text.js 123456789101112131415161718192021222324var a_idx = 0;jQuery(document).ready(function($) &#123; $(\"body\").click(function(e) &#123; var a = new Array(\"富强\", \"民主\", \"文明\", \"和谐\", \"自由\", \"平等\", \"公正\" ,\"法治\", \"爱国\", \"敬业\", \"诚信\", \"友善\"); var $i = $(\"&lt;span/&gt;\").text(a[a_idx]); var x = e.pageX, y = e.pageY; $i.css(&#123; \"z-index\": 99999, \"top\": y - 28, \"left\": x - a[a_idx].length * 8, \"position\": \"absolute\", \"color\": \"#ff7a45\" &#125;); $(\"body\").append($i); $i.animate(&#123; \"top\": y - 180, \"opacity\": 0 &#125;, 1500, function() &#123; $i.remove(); &#125;); a_idx = (a_idx + 1) % a.length; &#125;);&#125;);","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"},{"name":"点击特效","slug":"Hexo/点击特效","permalink":"https://hasaik.com/categories/Hexo/点击特效/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"}]},{"title":"Hexo博客中加入豆瓣读书页面","slug":"about-hexo-douban","date":"2019-11-14T15:08:54.000Z","updated":"2020-03-18T08:08:35.856Z","comments":true,"path":"posts/7fbe9500.html","link":"","permalink":"https://hasaik.com/posts/7fbe9500.html","excerpt":"","text":"在Hexo博客个性化定制中，加入豆瓣读书界面是一个很不错的功能，可以进入我的个人阅读界面查看效果，那么我是怎么做到的呢？其实很简单，我们只需要加入一个 hexo-douban 模块即可。 hexo-douban的Github地址 安装模块依赖我们使用时可以先安装依赖模块，在GitBash中使用以下命令： 1$ npm install hexo-douban --save 站点配置文件中添加配置然后我们再在Hexo站点根目录配置文件 _config.xml 中的末尾添加如下配置： 12345678910111213douban: user: mythsman builtin: false book: title: 'This is my book title' quote: 'This is my book quote' movie: title: 'This is my movie title' quote: 'This is my movie quote' game: title: 'This is my game title' quote: 'This is my game quote' timeout: 10000 上面参数说明： user: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”https://www.douban.com/people/xxxxxx/“ ，其中的”xxxxxx”就是你的个人ID了。 builtin: 是否将生成页面的功能嵌入hexo s和hexo g中，默认是false,另一可选项为true(1.x.x版本新增配置项)。 title: 该页面的标题. quote: 写在页面开头的一段话,支持html语法. timeout: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。 由于 hexo-douban 是默认抓取豆瓣读书、豆瓣电影以及豆瓣游戏的，如果只想要其中一部分，可以把其它部分在上述配置文件中去掉即可。 启动那么我们如何去使用这个呢？ 我们只需要在 GitBash 中输入以下命令：hexo clean &amp;&amp; hexo douban -bgm &amp;&amp; hexo g &amp;&amp; hexo s 即可，注意其中开启hexo-douban的命令中，-bgm 代表的是book、game、movie三个参数，如果只需要其中的一部分就只带你想要的那些参数。 另外注意的是，由于 hexo douban 的简写也是 hexo d ，与 hexo deploy 的简写指令 hexo d 冲突，因此在进行二者部署的时候，只能都打全名而不能打简写形式。 测试上面都没问题之后，我们只需要在站点目录下测试 http://localhost:4000/books 或者 http://localhost:4000/movies 等，如果看到页面了就说明成功了。 部署如果上述都没有问题，我们就可以在菜单栏中添加按钮了，打开主题配置文件 _config.xml ，找到菜单按钮，可以选择性的添加下面内容： 123456menu: home: / archives: /archives books: /books # 这是链接到books页面 movies: /movies # 这是链接到movies页面 games: /games # 这是链接到games页面 注意添加完成之后按钮并不是中文的，这是由于在 languages 文件夹下面的 zh-CN（中文语言配置文件）没有添加上述对应的中文参数信息，所以我们需要主动添加。 语言文件夹在你的主题配置文件夹下面，比如我的是使用的next主题，则是在 E:\\blog\\hexo\\themes\\next\\languages 目录下，找到 zh-CN 文件，在menu菜单下添加： 1234menu: books: 阅读 movies: 电影 games: 游戏 即可完成中文化自定义菜单。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"},{"name":"豆瓣","slug":"Hexo/豆瓣","permalink":"https://hasaik.com/categories/Hexo/豆瓣/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"}]},{"title":"Hexo博客+Next主题进阶写作技巧","slug":"about-hexo-wirte","date":"2019-11-14T14:53:24.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/c7631ec1.html","link":"","permalink":"https://hasaik.com/posts/c7631ec1.html","excerpt":"","text":"以下博客写作都是基于Next主题，其它主题不一定集成了以下写作方式。 note标签的官方文档使用首先我们需要在 Next 主题 _config.xml 中设置一下功能开关，有些默认是开的，有些默认是关的： 123456789101112note: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. style: simple icons: false border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0 note写作方式正如我最上面的样式，我们可以这样使用： 1234567&#123;% note [class] [no-icon] %&#125;这里写你需要写的内容&#123;% endnote %&#125;// 注意上面的class和no-icon属性是可以选择的[class] : default | primary | success | info | warning | danger.[no-icon] : Disable icon in note. 爬坑标签开头和结尾在一行的写法是错误的 比如，如果你这样写是错误的： 1&#123;% note danger %&#125;note text, note text, note text&#123;% endnote %&#125; 或者如果这样写也是错误的： 1234&#123;% note danger %&#125;note textnote textnote text&#123;% endnote %&#125; 内容必须要跟note标签不在一行： 12345&#123;% note danger %&#125;note text, note text, note textnote text, note text, note textnote text, note text, note text&#123;% endnote %&#125; 示例1、没有定义样式类别 123&#123;% note %&#125;(没有定义样式类别)&#123;% endnote %&#125; (没有定义样式类别) 2、默认的类别 123&#123;% note default %&#125;默认形式的类别&#123;% endnote %&#125; 默认形式的类别 3、primary形式的类别 123&#123;% note primary %&#125;首要类型形式&#123;% endnote %&#125; 首要类型形式 4、info形式的类别 123&#123;% note info %&#125;info形式的类别&#123;% endnote %&#125; info形式的类别 5、success形式的类别 123&#123;% note success %&#125;success形式的类别&#123;% endnote %&#125; success形式的类别 6、warning形式的类别 123&#123;% note warning %&#125;warning形式的类别&#123;% endnote %&#125; warning形式的类别 7、danger形式的类别 123&#123;% note danger %&#125;danger形式的类别&#123;% endnote %&#125; danger形式的类别 8、无图标形式的note标签 123&#123;% note info no-icon %&#125;没有图标的note标签&#123;% endnote %&#125; 没有图标的note标签 9、note标签中插入有序无序列表 12345678910&#123;% note default no-icon %&#125;在note中放入无序、有序列表* ul* ul* ul1. ol2. ol3. ol&#123;% endnote %&#125; 在note中放入无序、有序列表 ul ul ul ol ol ol 11、note标签中插入表格 1234567&#123;% note default no-icon %&#125;| 1 | 2 || - | - || 3 | 4 || 5 | 6 || 7 | 8 |&#123;% endnote %&#125; 1 2 3 4 5 6 7 8 note标签的html使用在主题配置文件 _config.yml 里有一个关于这个的配置，但官方文档没有提供 HTML 的使用方式，个人认为这种方式更简单，也不会产生一些奇怪的显示 bugs…… default 1&lt;div class=\"note default\"&gt;default&lt;/div&gt; primary 1&lt;div class=\"note primary\"&gt;primary&lt;/div&gt; success 1&lt;div class=\"note success\"&gt;success&lt;/div&gt; info 1&lt;div class=\"note info\"&gt;info&lt;/div&gt; warning 1&lt;div class=\"note warning\"&gt;warning&lt;/div&gt; danger 1&lt;div class=\"note danger\"&gt;danger&lt;/div&gt; danger no-icon 1&lt;div class=\"note danger no-icon\"&gt;danger no-icon&lt;/p&gt;&lt;/div&gt; 主题自带FontAwesome图标效果： 支持 Markdown Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一件部署 只需一条指令即可部署到 GitHub Pages，或其他网站。 丰富的插件 Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade，CoffeeScript。 源码： 12345671. &lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt; 支持 Markdown &lt;i&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。&lt;/i&gt;2. &lt;i class=\"fa fa-cloud-upload\"&gt;&lt;/i&gt; 一件部署 &lt;i&gt;只需一条指令即可部署到 GitHub Pages，或其他网站。&lt;/i&gt;3. &lt;i class=\"fa fa-cog\"&gt;&lt;/i&gt; 丰富的插件 &lt;i&gt;Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade，CoffeeScript。&lt;/i&gt; 采用的是 Font Awesome 的图标，下面给出一些简单的使用例子，更多请查看官网的使用示例。 采用的是 Font Awesome 的图标，下面给出一些简单的使用例子，更多请查看官网的使用示例。 123- &lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt; 铅笔- &lt;i class=\"fa fa-cloud-upload\"&gt;&lt;/i&gt; 上传- &lt;i class=\"fa fa-download\"&gt;&lt;/i&gt; 下载 铅笔 上传 下载 123- &lt;i class=\"fa fa-download\"&gt;&lt;/i&gt; 下载- &lt;i class=\"fa fa-download fa-lg\"&gt;&lt;/i&gt; 下载变大 33%- &lt;i class=\"fa fa-download fa-2x\"&gt;&lt;/i&gt; 下载两倍大 下载 下载变大 33% 下载两倍大 代码块内部样式高亮Next主题其实是自带代码块高亮显示的，但是有另外一种好玩的代码块高亮写法，叫 diff 语言 123456highlight: enable: true line_number: true# 代码自动高亮- auto_detect: false+ auto_detect: true 只需要在 markdown 语法代码块的语言选择处写上 diff 即可，然后在相应代码前面加上 - 和 + 就行了。不过默认的 - 是绿色，+ 是红色，与 GitHub 上相反，也可以自己修改成 Github 上样式。 文件位置：themes/next/source/css/_custom/custom.styl 1234567// 文章```代码块diff样式pre .addition &#123; background: #e6ffed;&#125;pre .deletion &#123; background: #ffeef0;&#125; 当然，要是你不满意顶部的文字样式，也可以自己在 custom.styl 自定义： 12345678910// 文章```代码块顶部样式.highlight figcaption &#123; margin: 0em; padding: 0.5em; background: #eee; border-bottom: 1px solid #e9e9e9;&#125;.highlight figcaption a &#123; color: rgb(80, 115, 184);&#125; 文本居中引用效果： 人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！ 源码： 123456&#123;% cq %&#125;人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！&#123;% endcq %&#125; 主题自带label标签首先需要在Next主题 _config.xml 中配置： 12# Label tag.label: true 然后效果如下（@ 前面的是 label 的名字，后面的是要显示的文字）： default 1&#123;% label default@default %&#125; primary 1&#123;% label primary@primary %&#125; success 1&#123;% label success@success %&#125; info 1&#123;% label info@info %&#125; warning 1&#123;% label warning@warning %&#125; danger 1&#123;% label danger@danger %&#125; 注意这个有一个BUG，千万不要把这个放到段首。。。 主题自带tabs标签选项卡 1选项卡 2选项卡 3这是选项卡 1 哈哈哈 φ(≧ω≦*)♪～ 这是选项卡 2 嘿嘿嘿 φ(≧ω≦*)♪～ 这是选项卡 3 嘻嘻嘻 φ(≧ω≦*)♪～ 1234567891011&#123;% tabs 选项卡, 1 %&#125;&lt;!-- tab --&gt;**这是选项卡 1** 哈哈哈 φ(≧ω≦*)♪～&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 2** 嘿嘿嘿 φ(≧ω≦*)♪～&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 3** 嘻嘻嘻 φ(≧ω≦*)♪～&lt;!-- endtab --&gt;&#123;% endtabs %&#125; 首先还是需要在Next主题配置文件中配置： 文件位置：~/hexo/themes/next/_config.yml 1234567# Tabs tag.tabs: enable: true transition: tabs: false labels: true border_radius: 0 然后上面源码中 , 1 表示一开始在第一个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。更多用法请查看这个页面。 主题自带样式按钮效果： 点击下载百度 源码： 1&#123;% btn https://www.baidu.com, 点击下载百度, download fa-lg fa-fw %&#125; 关于按钮的更多使用可以前往这个页面查看。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"}]},{"title":"Hexo博客界面美化","slug":"about-hexo-beautiful","date":"2019-11-14T10:43:11.000Z","updated":"2020-03-18T08:08:35.856Z","comments":true,"path":"posts/dff7e11c.html","link":"","permalink":"https://hasaik.com/posts/dff7e11c.html","excerpt":"","text":"注意：本样式美化方式只适用于 Next 主题，并且最好懂一些 CSS 前端知识，以便有些不兼容样式部分可以自行在浏览器中 F12 调试。 Next5主题的Github地址 我的个人博客样式都是基于 Next5 主题的，如果你用的是 Next6 主题，那么会有一部分样式不是很兼容， 需要自己在浏览器中定位该样式并做一些调整。 修改的话就找到next主题目录下的 next\\source\\css\\_custom\\custom.styl ，这个文件是Next主题预留给用户自定义修改css样式的文件，所以我们绝大多数全局样式都在这里进行修改即可。 以下附上我的 custom.styl 文件内容供大家参考，注意出现问题一定要在浏览器中调试修改！ 文件位置：hexo/themes/next/source/css/_custom/custom.stylustom styles.// 自定义的侧栏时间样式#days &#123; display: block; color: rgb(7, 179, 155); font-size: 13px; //margin-top: 15px; //margin-left: 35px; //margin-bottom: 15px;&#125;/*菜单*/.menu-item:hover &#123; transform: scale(1.1); box-shadow: 10px 10px 15px 2px rgba(0, 0, 0, .12), 0 0 6px 0 rgba(104, 104, 105, 0.1); //border-radius: 3px;&#125;/*近期文章*/.my-links-of-blogroll-li:hover &#123; transform: scale(1.1); box-shadow: 10px 10px 15px 2px rgba(0, 0, 0, .12), 0 0 6px 0 rgba(104, 104, 105, 0.1);&#125;/* 排行榜 */.my-article-top:hover &#123; transform: scale(1.1); box-shadow: 10px 10px 15px 2px rgba(0, 0, 0, .12), 0 0 6px 0 rgba(104, 104, 105, 0.1); border-radius: 30px; width: 580px; padding: 5px 10px; transition-duration: 0.15s; +mobile() &#123; width: 315px; //display: block;//不换行 //margin-left: 18px; &#125; //display:flex;&#125;/*归档页样式优化 began*/.page-archive .archive-page-counter &#123; font-size: 18px; background-color: #49b1f5; padding-left: 10px; padding-right: 10px; border-radius: 8px; color: #fff; +mobile() &#123; font-size: 16px; &#125;&#125;.my-post-time &#123; font-size: 11px; position: absolute; color: #fff; background-color: #49b1f5; border-radius: 5px; padding-left: 5px; padding-right: 5px; margin-left: 15px;&#125;.mypost &#123; position: relative; margin-bottom: 1rem; -webkit-transition: all .2s ease-in-out; -moz-transition: all .2s ease-in-out; -o-transition: all .2s ease-in-out; -ms-transition: all .2s ease-in-out; transition: all .2s ease-in-out;&#125;a.my-post-title-link:before &#123; top: 10px; width: 18px; height: 18px; content: \"📚\"; margin-right: 5px; font: normal normal normal 14px / 1 FontAwesome; font-size: 15px; line-height: 18px;&#125;.my-post:hover &#123; transform: scale(1.1); box-shadow: 10px 10px 15px 2px rgba(0, 0, 0, .12), 0 0 6px 0 rgba(104, 104, 105, 0.1); border-radius: 30px; width: 550px; padding: 1px 10px; margin-left: 25px; font-size: 16px; transition-duration: 0.15s; +mobile() &#123; width: 260px; margin-left: 18px; &#125; //display:flex;&#125;a.my-post-title-link &#123; text-decoration: none; font-size: 15px; font-weight: 400; +mobile() &#123; font-size: 14px; &#125;&#125;.my-post-title &#123; display: block; margin-left: 4.5rem; color: #4c4948; text-decoration: none; font-size: .8rem; cursor: pointer; +mobile() &#123; //margin-left: 4rem; &#125;&#125;.my-post-header &#123; position: top; margin-bottom: 1rem; -webkit-transition: all .2s ease-in-out; -moz-transition: all .2s ease-in-out; -o-transition: all .2s ease-in-out; -ms-transition: all .2s ease-in-out; transition: all .2s ease-in-out;&#125;//.my-post-title-link&#123;// font-size: 16px;// font-weight: 500;//&#125;.my-post-meta &#123; position: absolute; color: #99a9bf; width: 80px; color: #114142;&#125;div.post-block.tag .collection-title h2 &#123; border-width: 1px; border-style: solid; border-color: #3f3f3f; border-radius: 20px; font-size: 22px; background-color: #b4e8fa; padding: 2px 15px; letter-spacing: 1.5px; box-sizing: border-box; color: #3f3f3f; display: inline-block; margin: 10px 0 10px; text-align: center; +mobile() &#123; font-size: 18px; &#125;&#125;.category-list-link:hover &#123; transform: scale(1.1); box-shadow: 10px 10px 15px 2px rgba(0, 0, 0, .12), 0 0 6px 0 rgba(104, 104, 105, 0.1); border-radius: 8px; padding: 1px 1px; margin-left: 5px; font-size: 16px; transition-duration: 0.15s; //display:flex;&#125;/*归档页样式优化 end */.main &#123; padding-bottom: 150px;&#125;//hexo next主题下，自动更换背景图片 began// 图片来源https://source.unsplash.com/body &#123; //background: url(https://source.unsplash.com/random/1920x1080); background-image: url(/images/bg1.jpeg); background-repeat: no-repeat; background-attachment: fixed; background-position: 50% 50%;&#125;//hexo next主题下，自动更换背景图片 end/*评论数*/.posts-expand .post-comments-count &#123; display: none;&#125;/*鼠标样式*/* &#123; cursor: url(/images/default.cur), auto;&#125;:active &#123; //cursor: url(/images/pointer.cur),auto&#125;:link &#123; cursor: url(/images/pointer.cur), auto&#125;/*文章底部评分相关*/.post-widgets &#123; //padding-top: 9px; margin-bottom: 45px; margin-top: 30px;&#125;/*文章底部标签样式*/.posts-expand .post-tags a &#123; -webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24); -moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24); box-shadow: 0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24); font-family: 'Comic Sans MS', sans-serif; transition: .2s ease-out; padding: 3px 5px; margin: 5px; background: #f5f5f5; border-bottom: none; border-radius: 15px; +mobile() &#123; padding: 1px 3px; font-size: 8px; &#125; &amp;:hover &#123; background: rgba(100, 154, 182, 0.902); color: #fff; -webkit-box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); -moz-box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); &#125;&#125;// pc主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 50px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125;/* 1~4级标题设置 */h1,h2,h3,h4,strong &#123; font-weight: 600; color: #2c3e50;&#125;blockquote &#123; // PC端&gt;符号表示的内容样式 font-size: 15px; //background: #e8f7ef; //border-left-color: #42b983; background: #d9efdc5e; border-left-color: #0fc530 85;&#125;.tip, blockquote &#123; padding: 12px 24px 12px 30px; margin: 1em 0;&#125;p &#123; margin: 10px 0 10px 0;&#125;/*文章页*/.posts-expand &#123; margin: 0 1px; padding-top: 0px;&#125;.posts-expand .post-body p &#123; font-size: 16px; letter-spacing: 1px; margin: 3px 0; padding-bottom: 4px;&#125;/* 一到六级标题设置 */.posts-expand .post-body h1,.posts-expand .post-body h2,.posts-expand .post-body h3,.posts-expand .post-body h4,.posts-expand .post-body h5,.posts-expand .post-body h6 &#123; padding-top: 10px; margin-bottom: 10px; border-bottom: 1px solid #eee; padding-bottom: 10px;&#125;/*修改h1前面图标*/.posts-expand .post-body h1:before &#123; top: 10px; width: 18px; height: 18px; content: \"⛅\"; font-size: 18px; line-height: 18px; margin-right: 16px;&#125;/*修改h2前面图标*/.posts-expand .post-body h2:before &#123; top: 10px; width: 18px; height: 18px; content: \"🌞\"; font-size: 18px; line-height: 18px; margin-right: 16px&#125;/*修改h3前面图标*/.posts-expand .post-body h3:before &#123; top: 10px; width: 18px; height: 18px; content: \"🔍\"; font-size: 18px; line-height: 18px; margin-right: 16px;&#125;.posts-expand .post-body ul li &#123; margin-bottom: 10px; //list-style: none; list-style: disc; color: #000; font-size: 15px; //list-style: disc; //margin-left: 3%;&#125;.posts-expand .post-body ul li p &#123; //margin-bottom: 10px; //border-radius: 6px; text-align: left;&#125;/* 有序图标设置 */ol &#123; padding-left: 0; font-size: 15px; margin-top: .4rem; //padding: 0 0 0 .8rem; list-style: none; counter-reset: ol-li;&#125;.posts-expand .post-body ol li:before &#123; display: block; float: left; width: 17px; height: 17px; line-height: 16px; margin: .4rem 12px 0 0; color: #fff; font-size: 15px; font-weight: 500; font-style: normal; background-color: #49b1f5; border-radius: 50%; text-align: center; content: counter(ol-li); counter-increment: ol-li;&#125;//.posts-expand .post-body ul li &#123;// margin-bottom: 10px;// list-style: none;// color: #000;//&#125;////.posts-expand .post-body ul li:before &#123;// display: block;// float: left;// width: 12px;// height: 12px;// line-height: 28px;// margin: .5rem 12px 0 0;// color: #fff;// font-size: 15px;// font-weight: 700;// font-style: normal;// background-color: #49b1f5;// border-radius: 50%;// text-align: center;// content: \"\";//&#125;//自定义回到顶部样式.back-to-top &#123; //right: 60px; width: 70px; //图片素材宽度 height: 900px; //图片素材高度 top: -900px; bottom: unset; transition: all .5s ease-in-out; background: url(\"/images/scroll.png\"); //隐藏箭头图标 &gt; i &#123; display: none; &#125; &amp;.back-to-top-on &#123; bottom: unset; top: 100vh &lt; (900px + 200px) ? calc(100vh - 900px - 200px):0px; &#125;&#125;//代码块复制按钮.highlight &#123; //方便copy代码按钮（btn-copy）的定位 //position: relative; position: static;&#125;highlight-wrap &#123; background: #008b89;&#125;.btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc, #eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0;&#125;.btn-copy span &#123; margin-left: 5px;&#125;.highlight:hover .btn-copy &#123; opacity: 1;&#125;//pc端.read-over &#123; //本文阅读结束 text-align: center; margin-top: 20px; color: #ea103d91; font-size: 18px;&#125;.share_reward &#123; //pc打赏 margin: 10px auto; width: 90%; text-align: center;&#125;#rewardButton &#123; //打赏 margin: 15px auto;&#125;// 代码块样式 Custom styles.//code &#123;// color: #ff7600;// background: #fbf7f8;// margin: 2px;//&#125;//行内代码样式code &#123; color: #c7254e; background: #f9f2f4; border: 1px solid #d6d6d6; padding: 1px 4px; word-break: break-all; border-radius: 4px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 0px 0; //padding: 5px; border-radius: 0px;&#125;.highlight, pre &#123; border: 1px solid #21252b;&#125;.post-body &#123; color: #000;&#125;.post-body .note &#123; //提示条 font-size: 15px;&#125;/*文章标题字体*/.posts-expand .post-title &#123; font-size: 26px; letter-spacing: 1px; font-weight: 700; text-align: center; +mobile() &#123; font-size: 20px; //margin: 10px; &#125;&#125;/*文章标题动态效果*/.posts-expand .post-title-link::before &#123; background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);&#125;/*文章大标题*/.posts-expand .post-title-link:hover &#123; transform: scale(1.1);&#125;.posts-expand .post-meta &#123; //margin: 3px 0 20px 0; margin-bottom: 20px !important;&#125;// 文章内链接文本样式.post-body a &#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; //text-decoration: underline // none || underline || blink || overline || line-through &amp;:hover &#123; color: #fc6423; //border-bottom: none; //background: white; text-decoration: none; border-bottom: 1px solid #fc6423; &#125;&#125;// 精品文章 began.jingping &#123; background: #00a8c3; padding: 2px 4px 2px 4px; color: #fff;&#125;// 精品文章 end// new ------//热评文章.ds-top-threads li a &#123; padding-left: 5px; transition: border-width 0.2s linear 0s, color 0.2s linear 0s; border-bottom: none;&#125;.ds-top-threads li a:hover &#123; border-left: 8px solid #4d768c;&#125;/*相关文章推荐 pc样式设置*/summary &#123; outline: 0; cursor: pointer; margin-top: 15px; +mobile() &#123; /*手机端*/ font-size: 14px; margin-top: 10px; &#125;&#125;details &#123; margin-left: 20px;&#125;details .popular-posts &#123; +mobile() &#123; margin: 5px -12px; &#125;&#125;.popular-posts-header &#123; margin-top: 45px; font-size: 20px; font-weight: 900; border-bottom: 1px solid #eee; +mobile() &#123; /*手机端*/ font-size: 18px; margin-top: 25px; &#125;&#125;ul.popular-posts .popular-posts-item .popular-posts-title a &#123; border-bottom: 1px solid #999; &amp;:hover &#123; border-bottom: none; &#125;&#125;//小胡同背景图.xiaohutong-img-class &#123; width: 960px; height: 660px;&#125;//友链页样式 begain --------&gt;#links &#123; margin-top: 5rem;&#125;.links-content &#123; margin-top: 1rem;&#125;.link-navigation::after &#123; content: \" \"; display: block; clear: both;&#125;.card &#123; width: 300px; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display: flex;&#125;.card:nth-child(odd) &#123; float: left;&#125;.card:nth-child(even) &#123; float: right;&#125;.card:hover &#123; transform: scale(1.1); box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); background-image: linear-gradient(to right, #6a11cb 0, #2575fc 100%);&#125;.card a &#123; border: none;&#125;.card .ava &#123; width: 3rem !important; height: 3rem !important; margin: 0 !important; margin-right: 1em !important; border-radius: 4px;&#125;.card .card-header &#123; font-style: italic; overflow: hidden; width: 236px;&#125;.card .card-header a &#123; font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none;&#125;.card .card-header a:hover &#123; color: #d480aa; text-decoration: none;&#125;.card .card-header .info &#123; font-style: normal; color: #a3a3a3; font-size: 14px; min-width: 0; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;&#125;span.focus-links &#123; font-style: normal; margin-left: 10px; position: unset; left: 0; padding: 0 7px 0 5px; font-size: 11px; border-color: #42c02e; border-radius: 40px; line-height: 24px; height: 22px; color: #fff !important; background-color: #42c02e; display: inline-block;&#125;span.focus-links:hover &#123; background-color: #318024;&#125;.friends-btn &#123; text-align: center; color: #555 !important; background-color: #fff; border-radius: 3px; font-size: 15px; box-shadow: inset 0 0 10px 0 rgba(0, 0, 0, .35); border: none !important; transition-property: unset; padding: 0 15px; margin: inherit;&#125;.friends-btn:hover &#123; color: rgb(255, 255, 255) !important; border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%); margin: inherit;&#125;//友链页样式 end --------&gt;//首页头部样式.header &#123; //background: url(\"/images/header-bk.jpg\");&#125;.site-meta &#123; float: none;&#125;.menu &#123; float: none;&#125;.logo-line-before,.logo-line-after &#123; display: none;&#125;.menu .menu-item a &#123; font-size: 14px; color: rgb(15, 46, 65); border-radius: 4px;&#125;.site-meta &#123; margin-left: 0px; text-align: center; //background: #f7edd9 //background-image: linear-gradient(90deg,#f79533 0,#f37055 15%,#ef4e7b 30%,#a166ab 44%,#5073b8 58%,#1098ad 72%,#07b39b 86%,#6dba82 100%)!important; background-image: url(/images/bg.jpeg)&#125;.site-meta .site-title &#123; font-weight: 900; font-size: 28px; font-family: 'Comic Sans MS', sans-serif; color: #fff;&#125;.title1 &#123; color: rgb(66, 133, 244)&#125;.title2 &#123; color: rgb(234, 67, 53)&#125;.title3 &#123; color: rgb(251, 188, 5)&#125;.title4 &#123; color: rgb(66, 133, 244)&#125;.title5 &#123; color: rgb(52, 168, 83)&#125;.title6 &#123; color: rgb(234, 67, 53)&#125;.title7 &#123; color: rgb(66, 133, 244)&#125;.title8 &#123; color: rgb(234, 67, 53)&#125;.site-subtitle &#123; color: #213951; font-weight: bold&#125;#myheartbeat &#123; animation: heartAnimate 1.33s ease-in-out infinite; color: #f50404;&#125;//首页尾部样式.footer &#123; //background: none; //font-size: 14px;&#125;.footer-inner &#123; font-family: 'Comic Sans MS', sans-serif; text-align: center; color: #4c618f;&#125;//侧边栏信息样式修改.site-author-name &#123; margin: 18px 0 0; color: #090909; font-family: 'Comic Sans MS', sans-serif;&#125;.links-of-blogroll &#123; font-size: 13px; margin-bottom: 22px;&#125;.links-of-author &#123; margin-top: 10px; //margin-bottom: 58px;&#125;.site-overview &#123; //左侧socia标签居中 text-align: center;&#125;.sidebar-inner &#123; color: #649ab6;&#125;.sidebar &#123; margin-left: auto; /* for IE */ margin-left: inherit; box-shadow: inset 2px 2px 40px #bdb2b2;&#125;.sidebar a &#123; color: #649ab6; border-bottom-color: #649ab6; border-bottom: none;&#125;.sidebar a:hover &#123; color: #0c0b0b;&#125;.site-state-item &#123; display: inline-block; padding: 8px 18px; border-left: 1px solid #649ab6;&#125;.sidebar-nav .sidebar-nav-active &#123; color: #649ab6; border-bottom-color: #649ab6;&#125;.sidebar-nav li:hover &#123; color: #0c0b0b;&#125;//侧栏描述样式.site-description motion-element &#123;&#125;//侧栏按钮样式.sidebar-toggle &#123; background: #649ab6;&#125;//文章目录样式.post-toc .nav .active &gt; a &#123; color: #4f7e96;&#125;.post-toc ol a:hover &#123; color: #7784ba;&#125;.sidebar-nav .sidebar-nav-active:hover &#123; color: #37596c;&#125;a &#123; border-bottom: none;&#125;//首页阅读全文样式.post-button .btn &#123; color: #555; background-color: rgb(255, 255, 255); border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); border: none !important; transition-property: unset; padding: 0px 15px; margin: inherit;&#125;.post-button .btn:hover &#123; color: rgb(255, 255, 255); border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%); margin: inherit;&#125;//.post-button a&#123;// border-bottom: 1px solid #666;//&#125;//.post-button a:hover &#123;// color: #7784ba;//&#125;// 自定义页脚跳动的心样式 began@keyframes heartAnimate &#123; 0%, 100% &#123; transform: scale(1); &#125; 10%, 30% &#123; transform: scale(0.9); &#125; 20%, 40%, 60%, 80% &#123; transform: scale(1.1); &#125; 50%, 70% &#123; transform: scale(1.1); &#125;&#125;.with-love &#123; animation: heartAnimate 1.33s ease-in-out infinite; color: rgb(255, 113, 168);&#125;// 自定义页脚跳动的心样式 end/*修改选择字体块背景颜色*/::selection &#123; background: #fff159; color: #222;&#125;.pagination &#123; margin: 50px; text-align: center; border-top: 0px;&#125;/* 页码数字显示当前页码样式设置 */.pagination .page-number.current &#123; background-color: #49b1f5; background: #49b1f5; border-radius: 50%;&#125;/* 页码样式设置 */.pagination .page-number &#123; border: 3px solid #49b1f5; border-radius: 50%;&#125;/*valine 评论系统样式 began ------------------&gt; *//*valine 评论系统样式 end ------------------&gt; */// 适配手机样式 began ------------------------&gt;@media (max-width: 767px) &#123; /*手机端body体显示*/ body &#123; background-image: none; font-size: 16px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; color: #34495e; &#125; /*手机端菜单栏样式*/ .menu &#123; display: flex; margin-left: 5px; float: none !important; &#125; //.menu-item&#123; // display: inline; //&#125; ////不显示站点地图li //.menu .menu-item menu-item-sitemap&#123; // display:none //&#125; .menu .menu-item a &#123; /*font-weight: 600;*/ color: #2c3e50; font-size: 14px; //padding: 1px 7px; padding: 5px 12px; &#125; //选中菜单样式 .menu-item-active a:after &#123; top: -10%; //top: 66%; right: 24px; //三角形 //width:0; height:0; border:10px solid; border-color:#aececb #f5f7f9 #f5f7f9 #f5f7f9; &#125; blockquote &#123; // 手机端&gt;符号表示的内容样式 //padding: 4px 10px; //margin: 10px auto; //border-left: 3px solid #ddd; &#125; blockquote p &#123; // 手机端&gt;符号表示的内容样式 font-size: 13px; &#125; .back-to-top &#123; display: none; //不显示 right: 0px; opacity: .2; &#125; /*手机屏幕下多级标签样式修改*/ .posts-expand .post-body h1 &#123; margin: 0 0 0em; &#125; .posts-expand .post-body h2, .posts-expand .post-body h3 &#123; pointer-events: none; &#125; .posts-expand .post-body h1, .posts-expand .post-body h2, .posts-expand .post-body h3, .posts-expand .post-body h4 &#123; pointer-events: auto; color: #2c3e50; &#125; .posts-expand .post-body h1:before .posts-expand .post-body h2:before .posts-expand .post-body h3:before .posts-expand .post-body h4:before .posts-expand .post-body h5:before .posts-expand .post-body h6:before &#123; display: none; &#125; .posts-expand .post-body h2 &#123; padding-bottom: 0.7em; border-bottom: 1px solid #ddd; &#125; .posts-expand .post-body h3 &#123; line-height: 1.2; position: relative; &#125; .posts-expand .post-body h3 &gt; a:before &#123; content: \"\"; color: #42b983; position: absolute; left: -0.7em; margin-top: -0.05em; padding-right: 0.5em; font-size: 1.2em; line-height: 1; font-weight: bold; &#125; .posts-expand .post-body figure &#123; //margin: 1.2em 0; &#125; /*手机段落样式修改*/ .posts-expand .post-body p &#123; line-height: 1.6em; text-align: left; font-size: 14px; //display: contents;//文字左对齐 margin: 5px 0; padding-bottom: 6px; position: relative; z-index: 1; color: #5e6d82; &#125; /* 手机端 列表样式修改*/ .posts-expand .post-body ul, .posts-expand .post-body ol &#123; position: inherit; &#125; .posts-expand .post-body ul ul, .posts-expand .post-body ol ul, .posts-expand .post-body ul ol, .posts-expand .post-body ol ol &#123; margin: 0; &#125; .posts-expand .post-body ul li &#123; font-size: 13px; //margin-bottom: 0px !important; &#125; .posts-expand .post-body a &#123; //color: #000; font-weight: 400; &#125; p &#123; line-height: 1.6em; margin: 1.2em 0 -1.2em; padding-bottom: 1.2em; position: relative; z-index: 1; font-size: 14px; word-spacing: 0.05em; &#125; /*手机端对ul li展示优化*/ .posts-expand .post-body ul li:before &#123; margin: .4rem 12px 0 0; &#125; li &#123; font-size: 14px; color: #5e6d82; &#125; .post-button a &#123; font-size: 16px; &#125; .posts-expand .post-meta &#123; font-size: 13px; text-align: center; margin: 1px 0 20px 0; &#125; /*设置不展示字数统计*/ .posts-expand .post-meta .post-wordcount &#123; //display: none; &#125; /*手机端评论数*/ //.posts-expand .post-comments-count &#123; // +mobile() &#123; display: unset; &#125; //&#125; .page-post-detail .post-meta &#123; margin: 10px 0px; &#125; .page-post-detail .post-title &#123; font-weight: 600; font-size: 20px !important; //padding-top: 10px; //padding-bottom: 15px; &#125; .my_post_copyright &#123; //版权所有 width: 95%; //padding: .1em 1em; font-size: .73rem margin: 2em auto 0 &#125; .my_post_copyright p &#123; font-size: 13px; margin: 5px; line-height: 1.2em; padding-bottom: 0.5em; &#125;&#125;/*适应手机屏幕设置*/@media (max-width: 767px) &#123; .header-inner &#123; margin-bottom: 10px !important; background: none; //overflow: auto; //下拉标题是否浮动 &#125; .posts-expand .post-body h1 &#123; padding-top: 20px; &#125; .post-button &#123; text-align: center; &#125; .posts-expand .post-body h2, .posts-expand .post-body h3 &#123; pointer-events: none; &#125; .posts-expand .post-body h1, .posts-expand .post-body h2, .posts-expand .post-body h3, .posts-expand .post-body h4 &#123; pointer-events: auto; color: #2c3e50; &#125; .posts-expand .post-body h1:before .posts-expand .post-body h2:before .posts-expand .post-body h3:before .posts-expand .post-body h4:before .posts-expand .post-body h5:before .posts-expand .post-body h6:before &#123; display: none; &#125; .posts-expand .post-body h2 &#123; padding-bottom: 0.7em; border-bottom: 1px solid #ddd; &#125; .posts-expand .post-body h3 &#123; line-height: 1.2; position: relative; &#125;&#125;/*手机端显示设置信息*/@media (max-width: 767px) &#123; /*手机端代码行上text文档设置*/ .highlight figcaption &#123; font-size: 12px; &#125; /*手机端显示代码行数背景设置*/ .highlight .gutter pre &#123; padding-left: 2px; &#125; /*手机端显示代码行数字体大小*/ .highlight, pre &#123; font-size: 13px; &#125; /*手机端显示代码字体大小*/ .code span &#123; font-size: 12px; &#125; div#comments.comments.v &#123; margin-left: 0px !important; margin-right: 0px !important; &#125; .comments &#123; margin: 20px 10px 0; &#125;&#125;//手机适配文章底部信息@media (max-width: 767px) &#123; .main &#123; padding-bottom: 130px; &#125; .footer &#123; font-size: 12px; &#125; .read-over &#123; //本文阅读结束 text-align: center; margin-top: 20px; color: #ea103d91; font-size: 12px; &#125; .share_reward &#123; //打赏 font-size: 12px; padding: 10px 0; margin: 5px auto; width: 90%; text-align: center; &#125; #rewardButton &#123; margin: 15px auto; &#125; #rewardButton span &#123; //打赏 display: inline-block; width: 50px; height: 35px; &#125; #QR &#123; padding-top: 5px; &#125; #QR a &#123; border: 0; &#125; #QR img &#123; width: 60px; //max-width: 50%; display: inline-block; margin: 0.8em 2em 0 2em; &#125; .post-copyright &#123; //外版权 padding: .1em .5em; margin: 0em 0 0; border-left: 2px solid #ff1700; &#125; .post-copyright li &#123; //外版权 font-size: 13.5px; &#125; .posts-expand .post-tags &#123; margin-top: 10px; font-size: 8px; &#125; .post-nav-item a &#123; font-size: 12px; line-height: unset; &#125; .pagination &#123; // 分页按钮 margin: 20px; text-align: center; border-top: 0px; &#125; /*TopX适应手机屏幕设置*/ #top p &#123; font-size: 12px; display: inline-block; //不换行 &#125; .post-body .note &#123; //提示条 margin: 10px auto; font-size: 14px; &#125; .post-body .note.info p &#123; font-size: 13px; &#125; .post-body .tabs .tab-content .note &#123; margin: 10px auto; font-size: 14px; &#125;&#125;@media (max-width: 767px) &#123; //小胡同背景图 .xiaohutong-img-class &#123; width: 360px; height: 260px; &#125; // 小胡同里tab页 .post-body .tabs ul.nav-tabs &#123; display: flex; &#125; /* 手机端文章布局 */ .post &#123; margin-bottom: 20px; padding: 10px; //-webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); //-moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; //手机友链页 .card &#123; width: 88%; padding: 3px 20px; margin-bottom: 0rem; &#125; #links &#123; margin-top: 3rem; &#125; /*移动端 本地搜索框美化*/ .local-search-popup &#123; top: 10%; margin: 10px 35px; width: 80%; height: 60%; &#125; .local-search-popup .search-icon, .local-search-popup .popup-btn-close &#123; color: #15a1d8 f2; &#125; .local-search-popup .local-search-input-wrapper input &#123; padding-left: 10px; height: 21px; background-color: rgb(255, 255, 255); &#125; .local-search-popup .popup-btn-close &#123; border-left: none; &#125; .local-search-popup p.search-result &#123; padding-bottom: 1.2em; font-size: 13px; margin: .1em 0 .5em; &#125; .local-search-popup a.search-result-title &#123; font-size: 14px; &#125;&#125;// 适配手机样式 end ------------------------&gt;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"}]},{"title":"Hexo博客+Next主题深度优化与定制","slug":"about-hexo","date":"2019-10-17T16:17:56.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/ab21860c.html","link":"","permalink":"https://hasaik.com/posts/ab21860c.html","excerpt":"","text":"写在前面 本教程只适用于 Next5 或者 Next6 主题，Next7 开始做了大量修改，并删除了 custom.styl 文件，同时增加了很多在 Next7 之前需要手动配置的功能，请随个人喜好进行版本选择。 我的个人博客就是使用 Hexo 博客框架 + Next 主题搭建而来的，之前也使用过CSDN、博客园等，最后都放弃了，一方面是因为广告多，另外一方面样式我也不是很喜欢，而如果自己从零开始写博客源代码的话，比较复杂而且麻烦。后来偶然看到了 hexo 博客框架，并经过推荐使用了 Next 主题，这才正式入了 hexo 博客的坑！不得不说 Next 主题能够魔改并且自身集成了很多优秀的第三方插件是这款主题具有如此强大活力的根本原因😘。 本文下面主要先介绍 Hexo 博客和 Next 主题的搭建，如果你已经搭建好了博客框架，但是想进一步地修改博客样式，可以直接跳转到最下面优化定制部分😄，本文参考的博客链接也会直接在文中插入或者在文末标明，如果有遗漏，欢迎指出。 Next 主题最新版本已经更新到 v7.5.0，以下很多内容都已经在新主题中做出了适配或者直接无法使用，愿意更新到最新版本的小伙伴请关注官方文档更新。不愿意更新的小伙伴或者目前使用的是旧版本（比如我还是 Next5 版本）可以继续进行一定的参考。 环境准备在安装 hexo 框架之前，我们需要先安装该框架的依赖环境： Node.js Git 因为 Hexo 博客框架就是基于 Node.js 渲染的，所以必须要先安装 Node.js 环境，我们可以去Node.js中文官网下载，如图 安装地址 一般我们是在 windows 或者 macOS 环境下作为本机操作的，所以下载对应的安装包就可以了，下载好后一路点 next 下一步就完成了，这个没什么问题。 然后我们需要安装一下 Git，Git 主要是帮助我们部署到 Github Pages 静态仓库上以域名形式访问。 安装 Git 的话，如果是 windows 系统，可以直接去Windows的Git下载地址去下载，如果是 macOS 的话，也可以在这里下载。当这些环境都部署好之后，就可以开始我们的 hexo 博客安装啦！ Windows的Git下载地址 MacOS的Git下载地址 安装 Hexo 和 Next安装 hexo本文安装环境为 windows10，所以以下都以 windows 操作系统下安装为例。 安装之前需要说明几个注意事项：- 很多命令既可以使用 windows 的 cmd 命令行来完成，也可以使用刚才安装好的 Git 命令行工具 Git Bash 来完成，但是在 cmd 中部分命令会出现一些问题，建议只使用 Git Bash 来执行命令。- Hexo 不同版本之间有差别，要注意自己安装的版本是哪个版本（跟着本文走就没问题啦），如果修改样式的话注意网上教程的 Hexo 版本差异。- Hexo 安装好后有 2 种_config.xml文件，一个是 hexo 站点根目录下的全局_config.xml文件，还有一种是每个主题 theme 下的各自的_config.xml文件，注意区分二者，后面会详细说到。 安装 hexo依然是在 GitBash 中操作，输入以下命令，等待安装完成。 1$ npm install -g hexo-cli 创建 hexo 文件夹在电脑某个位置创建一个名为 hexo 的文件夹（当然名字可以随便取），比如我个人的就是 E:\\blog\\hexo ，由于这个文件夹是你以后存放博客代码和文章的地方，所以最好不要乱放，然后我们在 GitBash 中使用 cd 命令移动到创建好的文件夹中。 1$ cd /e/blog/hexo 初始化 hexo在上面 cd 到创建的文件夹后，输入以下命令进行初始化 1$ hexo init 这个命令执行的时间非常长，主要是初始化 hexo 博客中的文件夹，包括 hexo 博客内置的各种 node_modules 组件等等，所以耐心的稍等一下！如果初始化失败建议删除文件夹内容后重试。 初始化完成后，我们打开刚才创建的文件夹，会发现里面包含如下文件夹： 注意，其中有一个_config.xml文件，这个我们叫做站点根目录配置文件，里面的初始内容如下：（附上中文介绍） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 站点主配置title: Hexo # 网站标题subtitle: # 网站副标题description: # 网站描述keywords: # 可以不填写保持默认author: John Doe # 网站拥有者昵称language: # 网站语言设置，一般根据依赖的主题而定timezone: # 网站时区设置，一般不填写保持默认# URL地址链接设置url: http://yoursite.com # 网站url设置root: / # 网站根目录链接permalink: :year/:month/:day/:title/ # 文章链接，默认是按照 /年/月/日/文章标题 设置的链接permalink_defaults: # 默认链接形式# Directory 网站主要目录，这里一般不做改动source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writing 网站文章设置，同样一般不做改动new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting 主页设置，一般不做改动index_generator: path: '' per_page: 10 order_by: -date # 首页文章排序，默认是按照文章日期递减 # Category &amp; Tag 分类设置，一般不做改动default_category: uncategorizedcategory_map:tag_map:# Date / Time format 日期设置，一般不做改动date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination 导航页设置，一般不做改动per_page: 10 # 设置每页展示多少文章pagination_dir: page# Extensions 使用的主题名称，可以在这里切换theme: next # 此处切换主题名称# Deployment 部署，一般选择部署到Github上deploy: type: 其实到这里来说，我们的 hexo 博客已经做好了！不信？我们执行下面命令看看： 123//cd到根目录执行$ hexo g$ hexo s 然后我们打开浏览器，输入 http://localhost:4000 ，是不是惊奇的发现已经完成了？ 等….等一下，页面怎么是英文的😫？？？！ 别慌，上面提到配置文件的时候已经说到是语言没有修改了，我们可以打开 hexo 目录下的 themes 文件夹，发现里面有一个 landscape 文件夹，没错，你刚才看到的默认主题就是这个名叫 landscape 的主题，这个主题是 hexo 博客自带的默认主题，当然我们可以下载其它主题来代替它，具体方式在后面会介绍。 然后我们先来分析一下这个 landscape 主题文件夹： 注意这里面有一个 _config.xml 配置文件，其实上面已经强调过，这个跟前面的站点根目录下配置文件同名，但是这个配置文件是在主题目录下的，那么这个配置文件我们一般就叫做主题配置文件，基本每个 hexo 博客第三方主题下面都会有这个配置文件，所以主题配置文件是一种统称。 里面的初始内容我们暂时不管（因为不同主题的配置文件内容不一样，反正我们又不使用这个主题~）。 先来看看上面的 languages 文件夹，一看就懂，都知道这就是网站语言配置文件，好，我们进去看一下，噢~里面的 zh-CN 和 zh-TW 可不就是中文吗。其中 zh-CN 指的是简体中文，zh-TW（湾湾）是繁体中文，欧克。然后我们再去站点根目录下，注意这里是 站点根目录下（hexo/_config.xml）的配置文件中（千万别懵逼了），将这里： 12345678# Site 站点主配置title: sanarous教你搭建Hexo博客 //网站标题修改subtitle: so easy~ //副标题修改description: //网站描述keywords: hexo,next,Java,博客 //网站关键字,用英文逗号分开author: Sanarous //此处填写你自己的昵称 + language: zh-CN //这里改成上面在主题配置文件中看到的语言名字，注意英文冒号:后面有一个空格timezone: //网站时区，保持默认就可以了 更改完后，我们回 GitBash 命令行，输入以下命令： 1$ hexo g &amp;&amp; hexo s 再重新打开浏览器刷新，是不是页面语言变成中文的了！ 好吧，现在先说一下上面的命令中的 hexo s &amp;&amp; hexo g 是什么东西，hexo s 是启动 hexo 服务的，可以理解为是 hexo serve 或者 hexo start ，一般都是简写为 hexo s ，而 hexo g 是重新生成 public 文件夹的命令，全称是 hexo generator ，那么 public 文件夹是什么呢？ 别慌，我们回头看一下 hexo 文件夹目录： 看到这个 public 文件夹嘛，这个里面就是生成的所有静态文件，包括 html，css，js 文件以及图片等，稍微懂一些前端的人就知道这个文件夹就是你的博客被 node.js 渲染后生成的最终文件夹，这个文件夹中点开 index.html 就能看到你的博客页面了😄！简单点来说如果在本地修改了什么文件内容，可以使用 hexo g 命令重新生成一下public文件夹，那么这个文件夹只要修改了，再使用 hexo s 启动服务就可以看到页面变化了，当然 hexo s 本身就具有在线调试的功能，如果 hexo s 无法刷新页面修改内容，那么使用 hexo g &amp;&amp; hexo s 就可以看到更改内容啦~ 第一篇博客文章博客基本框架完成后，我们做的第一件事就是创建第一篇个人博客啦！可以在 Gitbash 中 cd 到 hexo 根目录，使用如下命令： 12345hexo new \"我的第一篇博客\"//或者可以简写为hexo n \"我的第一篇博客\" 就可以在 hexo/source/_posts 文件下面新建一个 .md 文件，这个 .md 文件就是 Markdown 文件，所以我们写博客只要在本地编辑这个 Markdown 文件就可以了。Markdown 语法可以 Google 一下使用教程，比较简单并且实用。 将 Hexo 博客部署到 Github 上 为什么要部署到 Github上呢，当然是有以下原因： 因为 Hexo 博客都是静态文件，GithubPages 自身就支持静态文件。 免费方便，不用花一分钱就可以自己搭建一个自由的个人博客，并且没有服务器没有后台。 可以随意绑定自己的域名，并且可以一键开启 HTTPS，很方便。 数据绝对安全，github 可以恢复任意版本。 博客内容可以轻松打包、转移以及发布到其它平台。 …… 在部署到 Github 之前，我们需要准备好自己的 Github 账号，Github 账号可以在 Github 官网注册。 Github官网 创建 Github 仓库首先我们需要在 Github 上创建一个 repository，就是创建一个仓库的意思，在登录账号后首页就有一个显眼的 create new repository，点进去就可以看到了，注意名字必须为你的 Github用户名.github.io ，如下图： 不能设置为其它名字，只能用这个仓库名。这样设置以后，我们在不绑定域名的前提下，可以直接使用 http://Sanarous.github.io 来访问自己的个人博客，这样就相当于有一个个人域名，并且是永久免费的！ 配置 SSH Key如果是第一次在自己的本机上使用 Git 上传到 Github 上，那么必须配置 SSH key ，表示 Github 允许这台机器有权限使用 Git 上传代码到远端仓库。 我们可以在 GitBash 中使用 $ cd ~/.ssh 命令来查看本机已经存在的 ssh 密钥，如果是第一次使用会显示 No such file or directory ，如果不是的话，就需要用已经存在的密钥或者重新生成一份了。 然后输入 1$ ssh-keygen -t rsa -C \"邮件地址\" 上面的邮件地址就是你的 Github 注册邮箱地址，在提示后连续回车，最终会生成一个文件在 C 盘用户目录下面 打开这个 .ssh 文件，里面存放了密钥，然后我们打开自己的 Github 个人主页，进入 个人设置 -&gt; SSH and GPG keys -&gt; New SSH key 上面的 Title 可以任意填写，下面的 key 注意要打开 .ssh 文件，将密钥复制进去 测试是否成功使用如下命令： 1$ ssh -T git@github.com # 注意邮箱地址不用改 如果提示 Are you sure you want to continue connecting (yes/no)? 点击yes，会显示 Hi Sanarous! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息就说明 SSH 已经配置成功！ 配置 Git 提交的用户信息上面配置成功后，我们就可以设置 Git 的全局用户信息了，这个信息设置当前 Git 命令上传代码的用户信息。 使用以下命令： 12$ git config --global user.name \"XuxuGood\" // 你的github用户名，非昵称$ git config --global user.email \"xxx@qq.com\" // 填写你的github注册邮箱 配置完成后以后提交代码都是使用的这个用户信息进行提交的。 将 Hexo 博客部署到 Github 上首先打开 hexo 站点的配置文件，找到 deloy 并填写如下配置： 文件位置：hexo/_config.xml 1234deploy: type: git repository: git@github.com:XuxuGood/XuxuGood.github.io.git # 用户名改成你自己的 branch: master 或者也可以写成这样： 1234deploy: type: github repository: https://github.com/XuxuGood/XuxuGood.github.io.git branch: master 无论是哪种写法，此时直接执行 hexo d 的话一般会报如下错误：Deployer not found: github 或者 Deployer not found: git 原因是还需要安装一个插件 hexo-deployer-git ，我们可以在 Git 中 cd 到 hexo 根目录，并输入以下命令： 12cd /e/hexo/npm install hexo-deployer-git --save 然后我们可以使用 hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy 命令来完成一键部署到 Github 上。 安装 Next 主题由于默认的主题 landscape 界面比较丑（当然魔改也是可以的），我们可以使用 Hexo 官方推荐的主题：https://hexo.io/themes ，如果喜欢这里面的某些主题，可以直接去上面主题对应的界面中的 Github 中下载（下载方式与稍后介绍的下载 Next 主题一样）。 目前在 Github 上 star 数量比较多的有 Next 主题、yillia 主题等，Next 主题基本占据了 Hexo 博客的半壁江山，并且 Next 主题集成功能较多，因此我下面只介绍 Next 主题的使用方式。 首先我们可以打开 Github，全局搜索 hexo-next ，我们会发现是有两个 star 数量比较高的： 其中第一个是 Next5 版本的，而第二个是 Next6 版本的。2019/7/27 更新：第二个 Github 仓库目前一直是 Next 主题更新最新版本的的仓库，目前已经更新到 v7.2.0，以下内容仅供参考。 注意上面说的版本关系，在 Next6 版本上其实增加了很多 Next5 需要手动配置的东西，并且 Next5 已经停止维护了，如果不太喜欢自己手动去配置的话，建议使用 Next6 版本。当然本博客使用的仍然是 Next5 版本，如果需要我的个性化设置的话也可以留言。 下面我们来安装 Next 主题。 下载 Next 主题以下均以 Next6 版本为例，Next5 版本操作基本一样。 进入https://github.com/theme-next/hexo-theme-next 我们安装 Next6 版本的话，有两种方式： 在 GitBash 中 cd 到博客根目录下，然后使用 git clone 命令将 Next 仓库克隆到 hexo 目录下的 themes/next ，即命令是 git clone https://github.com/theme-next/hexo-theme-next.git themes/next 直接在 Github 页面上选择绿色的按钮 Clone or Download ，点击下载 zip 压缩包。 如果第一种方式比较慢的话，可以直接选择第二种方式直接下载，然后将下载好的压缩包解压后放在 E:\\blog\\hexo\\themes\\ 下面，git clone 的话也是在这个下面，下载好后的名字可以任取。 设置 hexo 博客为 Next 主题在站点根目录下_config.xml配置文件中，找到如下代码并进行配置： 文件位置：hexo/_config.xml 12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/- theme: landscape # 更改原始默认的主题名称，修改为如下+ theme: hexo-theme-next # 此处填入你在themes目录下的next主题文件名 测试 Next 主题在 GitBash 中输入 1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 等待启动完成在浏览器中输入http://localhost:4000即可查看安装好的 Next 主题！ Next 主题基本功能配置Next 主题安装好后的初始界面也是很简洁的，我们可以先设置一些常用功能😊。 首先为了防止懵逼，再次友情提醒：在这里修改的一律是主题配置文件 _config.xml ，目录是 hexo/themes/next/_config.xml ，千万不要走错地方了！ 我们打开 _config.xml 主题配置文件对应一一修改。 由于配置文件是 yml，如果对 yml 语法不太熟的小伙伴，注意每个配置之间都必须有空格，不然报错。如 override: false ，注意英文冒号 : 后面有一个空格，所有 yml 语法都是这样。 以下默认使用的文本编辑器为 notepad++、WebStorm 或者 sublime，主题使用的是 Next6 版本（注意 Next 官方会不断进行更新，所以下面的不一定都有效，因为官方正在不断集成更多功能，具体地可以自行在配置文件中探索~） 以下均在 hexo s 在线调试环境中进行修改~ 网站favicon图标设置 favicon 图标相当于是网站的 logo 简化版，所以我们也可以给自己的网站添加一个 favicon 图标，使用notepad++、WebStorm 或者 sublime 打开配置文件后，使用 Ctrl+F 搜索 favicon 文件位置：hexo/themes/next/_config.xml 1234567favicon: small: /images/favicon-16x16-next.png # 网站小图标 medium: /images/favicon-32x32-next.png # 中等图标 apple_touch_icon: /images/apple-touch-icon-next.png # app_touch上显示图标 safari_pinned_tab: /images/logo.svg # 在Safari浏览器中显示图标 #android_manifest: /images/manifest.json # 安卓默认显示同普通情况下 #ms_browserconfig: /images/browserconfig.xml 网站 favicon 图标可以放到你的 next 主题目录下面的 source/images 中，然后按照上述相对路径方式引用，这里 favicon 图标不需要非得是 ico 格式的，也可以是 png 或其它图片格式。 如果是有第三方图床放图片链接的，也可以直接改成图片链接。 网站页脚小心心定义 在 Next5 版本中需要手动修改设置，但是在 Next6 中已经集成好这个功能了，搜索 footer，设置如下，就可以在页脚看到跳动的小心心啦 文件位置：hexo/themes/next/_config.xml 12345678910111213footer: # 指定网站开始运行的年份，如果不指定，则默认为当前年份 since: 2019 # 在页脚年份和版权信息中间显示的图标 icon: # 图标形状显示，可以参考 https://fontawesome.com/v4.7.0/icons 中的名字 # 官方建议使用 heart 图标，颜色设置为 #ff0000，这也显示的是跳动的心 name: heart # 如果想要图标跳动，下面设置为 true animated: true # 改变图标颜色 color: \"#ff0000\" 关闭底部由 hexo 强力驱动的广告 由于默认的页面中 hexo 会在网页底部居中位置打个广告（要恰饭的嘛），但是官方还是很良心的在配置文件中设置了广告开关，还是在上面 footer 中，如下配置全部设置为 false 就可以关闭广告了。 1234567891011 powered: # Hexo link (Powered by Hexo).- enable: false # Version info of Hexo after Hexo link (vX.X.X).- version: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme).- enable: false # Version info of NexT after scheme info (vX.X.X).- version: false 菜单栏设置在配置文件中搜索 menu，找到如下： 1234567891011121314menu: home: / || home #about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true #表示是否显示菜单图标icons badges: false # 显示每个菜单下面有多少个内容 其中 || 后面表示的 Fontawesome 中的图标名称，如果想要修改图标，可以去FontAwesome官网找自己喜欢的图标样式，前面部分 /about/ 是表示该菜单的相对链接，比如网站主页访问是 https://bestzuo.cn ，那么点击这个菜单栏的链接就变成了 https://bestzuo.cn/about/ 这种形式。 如果需要增加菜单栏的话，可以在 Gitbash 中输入以下命令： 12345hexo new page \"photos\"//或者可以间写为如下形式hexo n page \"photos\" 这样就会自动在 hexo/source 目录下生成一个文件夹，而且里面是一个 index.md 文件，Node.js 最终会把这个 md 文件渲染成 html 文件，所以菜单栏中内容就在这个 md 文件中写就可以，并且文章内支持 html 写法，所以具有很强的扩展性🤣，创建之后，就需要在配置文件这个地方添加上新增菜单的名称以及链接格式和 FontAwesome 图标，然后打开 hexo/themes/next/languages/zh-CN.yml 文件，在 menu 下面按照格式汉化你的菜单栏名称~ Next主题四种风格设置Next 主题支持四种内置风格，每个人喜欢的风格都不同，可以在基础风格上继续进行魔改。搜索 schema，找到如下代码： 12345# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 四种风格样式可以自己进行切换，可以在本地 hexo g &amp;&amp; hexo s 后在线调试这个地方的代码，喜欢哪个就选哪个吧~ 社交链接设置社交链接主要是在侧边栏中展示的，一般都是自己的各种网站主页。搜索 social，找到如下代码： 1234567891011#social: #GitHub: https://github.com/yourname || github #E-Mail: mailto:yourname@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 后面的 yourname 改成你自己在对应网站的 ID，然后将前面的 # 注释去掉。其中 || 后面还是表示该链接前面的图标在 FontAwesome 中的名称，可以进行自定义修改。 友情链接设置友情链接也是处于侧边栏中的，这里可以完全自定义内容，一般可以用来放社交圈子链接（不过一般博客都会单独做一个页面放其它人的博客友链）。搜索 links，找到如下配置 1234567# Blog rollslinks_icon: linklinks_title: Linkslinks_layout: block#links_layout: inline#links: #Title: http://example.com/ 这里可以添加你想要的友情链接，比如可以添加百度链接： 12345678# Blog rollslinks_icon: link # 链接对应的Fontawesome图标名称links_title: Links # 设置链接标题，可以自定义links_layout: block # 图标布局方式，有inline和block两种#links_layout: inlinelinks: Baidu: https://www.baidu.com/ Github: https://github.com/ 侧边栏设置搜索 sidebar，找到如下配置 1234567891011121314151617181920212223sidebar: # Sidebar Position, available value: left | right (only for Pisces | Gemini). # 此处设置只适用于Pisces或者Gemini风格 position: left #position: right # 侧边栏如何展示 display: post # 侧边栏在打开文章的时候显示 #display: always # 侧边栏不管在哪都显示 #display: hide # 隐藏侧边栏 #display: remove # 移除侧边栏 # Sidebar offset from top menubar in pixels (only for Pisces | Gemini). offset: 12 # 设置返回页面顶部设置，只适用于Pisces或者Gemini风格，建议开启 b2t: true # 显示浏览百分比，建议开启 scrollpercent: true # Enable sidebar on narrow view (only for Muse | Mist). onmobile: false 文章开启阅读更多按钮如果不开启阅读更多按钮的话，默认是展示文章中所有内容的，这显然体验不好。 一般都会在文章中插入 &lt;!--more--&gt; 这种注释形式表示首页展示到注释处为止。或者会使用如下官方配置文件中自带的方式。一般都推荐使用注释的方式，因为下面这种 auto_excerpt 方式不会保留前面的行文样式，但是注释方式会保留样式。 搜索 auto_excerpt，找到如下： 123auto_excerpt: enable: true length: 150 #到多少字数后不显示 默认是关闭的，也就是首页上默认显示整篇文章，而为了显示阅读更多按钮，我们可以开启这个服务。 文章元数据设置 元数据就是显示在 home 页的文章创建于、更新于、阅读次数之类的数据，搜索 post_meta，找到如下配置： 12345678post_meta: item_text: true # 是否显示对应的文字 created_at: true # 是否显示 创建于 updated_at: # 是否显示 更新于 enabled: false # 更新日期显示规则，只有更新日期与创建日期不同时，才会显示 another_day: true categories: true # 是否显示分类信息 上面应该已经说明的很详细了吧~ 文章字数统计设置由于上面元数据中没有带统计文章字数功能，所以需要利用插件来生成，搜索 post_wordcount，找到如下配置： 12345678# Post wordcount display settings# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275 注意开启上述设置必须要添加 hexo-symbols-count-time 模块依赖，即在 hexo 站点根目录下使用 npm install hexo-symbols-count-time --save 命令安装模块后开启上述功能使用。 侧边栏头像设置侧边栏中没有博主头像是没有灵魂的。Next6 主题中自带鼠标放在头像上能旋转 360度的功能，如果是 Next5 的话需要自己手动配置。 搜索 avatar，找到如下配置 12345678# Sidebar Avataravatar: # 如果放在本地(source/images): /images/avatar.gif # 如果第三方图床，直接写地址 url: # 此处是头像的地址 rounded: true # 设置头像是否为圆形 opacity: 1 # 设置不透明度，1为完全不透明，0为完全透明 rotated: true # 设置鼠标放到头像上是否旋转 代码块设置Next6 中自带了复制代码按钮，Next5 需要自己手动配置。 搜索 codeblock，找到如下配置： 12345codeblock: border_radius: 8 # 按钮圆滑度 copy_button: # 设置是否开启代码块复制按钮 enable: true show_result: true # 是否显示复制成功信息 开启文章打赏按钮一篇辛辛苦苦敲出来的文章，不妨开启一下文章打赏功能，万一真有人给你棒棒糖呢😆 ~ 搜索 reward，找到如下配置并修改： 12345# Rewardreward_comment: 坚持原创技术分享，感谢您的支持和鼓励！wechatpay: # 微信收款图片地址alipay: # 支付宝收款图片地址#bitcoin: /images/bitcoin.png # 比特币 开启相关文章推荐功能 要优化读者体验的话，可以在读者阅读完一篇文章后，能自动推荐相关内容的文章，不仅能考虑读者感受，还能给自己博客文章带来阅读量，岂不是一举两得😆 ？ 搜索 related_posts，找到如下配置： 12345678910related_posts: enable: true # 是否开启 title: 相关文章推荐 # 标题 display_in_home: false # 是否在首页显示，建议为false params: maxCount: 5 # 相关文章的最大数量 #PPMixingRate: 0.0 #isDate: false #isImage: false #isExcerpt: false 开启相关文章推荐需要安装 hexo-related-popular-posts 模块，即在 hexo 站点根目录下使用 npm install hexo-related-popular-posts --save 安装模块，然后开启上面的相关文章功能就可以啦~ 开启文章版本信息搜索 post_copyright，找到配置 1234post_copyright: enable: false license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 设置为 true 可以打开，这样在每篇文章最后都会有版权提示。 代码块风格设置搜索 highlight_theme，有以下多种风格： 1234# Code Highlight theme# Available values: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night eighties 可以自己修改上面 normal 、night 、 night eighties 、 night blue 、night bright 在线调试选择自己喜欢的风格。 添加valine评论系统没有评论系统的博客是没有灵魂的，不仅如此，当前免费开源的评论系统中，valine 因为简洁并且支持匿名留言得到很多博主的喜爱，而像其它的来必力（韩国的）、Gitalk（Github的）等都有这样那样的缺点，不太建议使用。 需要注意的是valine后台评论保存是依赖于 leancloud的，leancloud 是一个面向个人用户免费的存储系统（当然不止是提供存储功能，还有其它服务），我们需要在 leancloud 官网注册，具体步骤可以看valine的官方文档介绍。 搜索 valine，找到如下配置： 12345678910valine: enable: true appid: # your leancloud application appid appkey: # your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: 留下邮箱，有回复时你将收到提醒，邮箱不会被公开。 # comment box placeholder avatar: wavatar # gravatar style https://valine.js.org/avatar/ guest_info: nick,mail # custom comment header default: nick,mail,link pageSize: 10 # pagination size 注意由于 valine 依赖于 leancloud 存储服务，因此要先去 https://leancloud.cn 网站注册，获取到 appid 和 appkey 后放到这里就 ok 了。其中 avatar 是设置默认头像，可以去 https://valine.js.org/avatar 选择默认头像，然后在这里设置名字即可。具体使用可以参考valine的官方文档。 开启分享按钮百度分享对国内网站来说更友好一些，搜索 baidushare，找到如下代码： 12baidushare: type: button # 设置分享按钮的风格，有button何slide形式 将注释去掉打开即可，虽然说是默认不支持 https 格式，但是网上有解决方案，可以 Google 一下。 如果嫌麻烦的话，也可以使用下面支持 https 的 needmoreshare。如果要开启 needmoreshare 的话，可以搜索 needmoreshare2，找到如下代码： 12345678910111213141516needmoreshare2: enable: false postbottom: enable: false options: iconStyle: box boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook float: enable: false options: iconStyle: box boxForm: horizontal position: middleRight networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook 注意 needmoreshare2 是依赖 theme-next-needmoreshare2 模块的，可以去 https://github.com/theme-next/theme-next-needmoreshare2 找到使用方法。 设置文章阅读量搜索 leancloud_visitors，并进行如下配置： 123456789leancloud_visitors: enable: true app_id: app_key: # Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security # If you don't care about security in lc counter and just want to use it directly # (without hexo-leancloud-counter-security plugin), set the `security` to `false`. security: false betterPerformance: true 这个功能依赖 hexo-leancloud-counter-security 模块，需要安装该插件。 注意这个 appid 和 appkey 跟上面开启 valine 评论使用的 leanCloud 是一样的，但是需要在 leancloud 中创建 classes 对象存储，具体方式可以 Google 一下。 开启不蒜子统计功能目前不蒜子统计网站统计做的还可以，网站访问量主要是分为 pv 和 uv 两种，pv 是指页面访问量，每访问一次或者刷新一次页面后该页面的 pv+1，而 uv 是指独立 ip 访问量，就是说一天内同一 ip 访问一个页面 N 次，uv 都只是 + 最开始的那一次。一般用 pv 作为页面的访问量，uv 作为页面的访客量。 搜索 busuanzi_count，可以配置如下，也可以使用默认设置。 1234567891011121314# Show Views/Visitors of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: enable: true site_uv: true #total visitors site_uv_icon: #user-circle site_uv_header: 你是来访的第 site_uv_footer: 位小伙伴 site_pv: false #total views site_pv_icon: eye site_pv_header: 访问次数： site_pv_footer: 次 post_views: false post_views_icon: eye 注意其中的 post_views 与上面的 leanCloud_visitors 冲突，两者都是显示文章阅读量，只开启一个就可以了。 开启本地博客搜索功能提升读者用户体验，博客内肯定是需要一个全局搜索按钮的。当然hexo已经集成了几款开源的搜索插件，一般都使用的是 local_search。 搜索 local_search，设置代码如下： 1234567891011# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 # unescape html strings to the readable one unescape: false` 注意该搜索功能需要依赖 hexo-generator-searchdb 插件，依然还是使用命令 npm install hexo-generator-searchdb --save 来进行安装。然后 在 hexo 站点根目录配置文件 _config.xml 的末尾，加入以下代码即可。 12345search: path: search.xml field: post format: html limit: 10000 修改加载特效由于网页不可能一直都秒进，总会等待一段时间的，所以可以修改一下加载的特效。Next 已经集成了很多加载特效，可以在下面选项中在线调试测试一下。 搜索 pace，找到如下代码： 12345678910111213141516171819# Progress bar in the top during page loading.pace: false# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-center-radar #默认设置，可以修改为上述任何一个 可以自己修改后使用 hexo s 本地调试挑选自己喜欢的加载样式。 开启3D背景给博客添加 3D 背景特效，说实话我只在最开始折腾博客的时候开过，后来为了提升响应速度，这些不必要的东西都给关闭了。 配置文件中代码如下： 1234567891011# Canvas-nestcanvas_nest: false# three_wavesthree_waves: false# canvas_linescanvas_lines: false# canvas_spherecanvas_sphere: false 默认为 false，可以自己逐一设置为 true 然后在本地调试查看3D效果。 Next主题进阶优化配置在介绍完 Next 主题的基本配置后，下面才是本文的重头戏，在 Next 进阶配置时，一定需要你懂一些 CSS 和基本的前端知识，不然报错了可能你根本无从寻找问题原因，或者在进行大面积修改前先将主题备份一份，这样出错后找不到原因还能及时止损😂 。 学会使用浏览器F12定位样式发现页面有大量留白？颜色不合自己口味？那就 F12 开始吧，大换装开始！空白区？颜色？背景？圆角矩形？阴影？透明度？超链接样式？侧栏头像圆形并旋转？文章标题前面的竖线和颜色？只需按下 F12，改到自己想要的样式，然后 Copy 到 custom.styl 文件即可。感觉这是 NexT 主题非常棒的设计，因为这让我们能够很方便自定义博客的样式。怎么知道要修改这个文件呢？ 强烈推荐阅读这篇文章。 怎么修改？浏览器按 F12 即可，建议用 Google Chrome 浏览器（有梯子的直接去 Google 下载😂），或者火狐浏览器。因为这两个浏览器属于标准浏览器，如果你按下 F12 后简直特么一脸懵逼，那么别急，硬着头皮慢慢折腾吧哈哈哈嗝～ 快速懵逼到熟悉首先按下 F12 后的操作流程图，就是这篇文章中的三步骤，点小箭头定位元素，调试 CSS 代码，最后 Copy 到 custom.styl 。然后懵逼的地方，应该有下面两点： 按下 F12 后弹出的界面是什么鬼？！ 界面中的 {} 前面的和里面的英文是什么鬼？！ 第一点：弹出的界面是为调试设计的，如果你知道调试的是啥，也许就自然了解弹出的界面，所以我不多说，不过还是给一份 Google 官方的资料——Chrome 开发者工具。第二点：{} 前面的是 HTML 的元素名，{} 里面的是这个元素的 CSS 样式。 社交要先有自己原则，一段代码要先声明变量，一个数学问题有前提，一篇论文要先定义名词，到这里我们也必须要先了解一些 HTML 和 CSS 的基本语法知识了，才能继续折腾下去。建议先浏览下 MDN 的 HTML 和 CSS 的页面，但没必要记住里面的每一个语法知识，因为这样的记忆是不够深刻也并不高效的，只要浏览下留个印象（为了能找准元素）就行，而记忆是要在实践中记忆的。 附上我的cutom.styl由于原代码比较长，我在另外一篇博客中已经有专门分享，注意千万不要照搬到你的 custom.styl ！一定要先找对应元素再修改，为了方便大家查看我已经做了一定的注释，仅供大家参考！ 修改博客字体博客影响美观的除了样式，就是直接映入读者眼睛的字体了，因此选择一款优雅的字体对博客美感的提升是非常大的，当然，博客字体大小是可以直接修改的： 文件位置：hexo/themes/next/source/css/_variables/base.styl 1$font-size-base = 16px 如果你对字体的选择比较感兴趣，推荐阅读： Web 中文字体排版指南 Web 字体的选择和运用 如何优雅的选择默认字体（font-family） 中文字体网页开发指南 在 Web 内容中使用系统字体 首先对于汉字来说，因为其字体库太大，通常都是调用本地中文字体库。然而，不同设备有不同默认中文字体和中文字体库，想要尽可能在不同设备上有较好的显示效果，就要在调用不同设备的本地字体库中显示效果较好的中文字体。下面附上我参考的大佬的字体选择： 文件位置：hexo/themes/next/source/css/_variables/base.styl 1234567891011121314151617// Font families.$font-family-chinese = \"Noto Serif SC\"$font-family-base = $font-family-chinese, sans-serif$font-family-base = get_font_family('global'), $font-family-chinese, sans-serif if get_font_family('global')$font-family-logo = $font-family-base$font-family-logo = get_font_family('logo'), $font-family-base if get_font_family('logo')$font-family-headings = $font-family-base$font-family-headings = get_font_family('headings'), $font-family-base if get_font_family('headings')$font-family-posts = $font-family-base$font-family-posts = get_font_family('posts'), $font-family-base if get_font_family('posts')$font-family-monospace = consolas, Menlo, $font-family-chinese, monospace$font-family-monospace = get_font_family('codes'), consolas, Menlo, $font-family-chinese, monospace if get_font_family('codes') 注意：要想 NexT 主题的简体中文字体配置生效，站点配置文件中的 language 必须为 zh-CN。然后对于英文字体，因为其字体库很小，所以想要个性化就简单多了。首先去 Google Fonts 找自己喜欢的英文字体，然后编辑主题配置文件，可以查看一下 NexT 官方文档（最新版）。下面附上我参考的大佬的英文字体选择： 文件位置：hexo/themes/next/_config.yml 1234567891011121314151617181920212223242526272829303132333435363738394041424344font: enable: true # Uri of fonts host. E.g. //fonts.googleapis.com (Default). # Google 字体 国内镜像 host: # Font options: # `external: true` will load this font family from `host` above. # `family: Times New Roman`. Without any quotes. # `size: xx`. Use `px` as unit. # Global font settings used on &lt;body&gt; element. global: external: true# family: Lato family: EB Garamond # 字体参考：https://io-oi.me/tech/noto-serif-sc-added-on-google-fonts/#main size: 16 # Font settings for Headlines (h1, h2, h3, h4, h5, h6). # Fallback to `global` font settings. headings: external: true family: size: # Font settings for posts. # Fallback to `global` font settings. posts: external: true family: # Font settings for Logo. # Fallback to `global` font settings. logo: external: true family: size: # Font settings for &lt;code&gt; and code blocks. codes: external: true family: size: 其它字体设置可以参考这篇文章。 博客推广及优化想要自己写的博客能被别人看到？希望能得到别人的评论肯定？渴望分享技术？那么博客推广肯定是必不可少了😙。 手动推广大概就是在其它博客或者视频等信息流下面留下自己的博客地址，比如第一件事咱们可以去 next 主题专门的博客分享的issue区留下自己的爪印，或者在搜索引擎中搜索使用 hexo+next 搭建博客的热门教程中，在评论区留下地址，这样就可以手动引流啦。 搜索引擎SEO收录当然手动引流不是长久之计，搜索引擎是互联网上寻找资源的重要手段，而要让别人能够在搜索结果中看到自己的博客文章链接，就必须让搜索引擎收录，怎么操作呢？ 可以直接参考这篇文章，写的很详细，学会自己使用站长工具抓取自己的网页，然后请求搜索引擎收录 ，查看收录量可以在百度或者 Google 中使用 site:hasaik.com 即site:后面加上域名的方式，如果你是使用 Github Pages，由于百度是默认不抓取 Github 的，所以也需要使用上述方式进行提交。 其它优化可以看我的另外一篇博客。 间接影响除了直接被搜索引擎收录之外，如果有其它被搜索引擎收录的文章中，引用你的某篇文章的链接地址，那么同样可以引流到你的博客，这种称为间接影响，不要小看间接影响，如果你的博客写的很好，经常被引用的话，那么间接影响带来的流量是非常巨大的，但是其中会有一个问题，通过“引流”到达的流量，你需要尽可能地将用户留在自己的博客上，那么如何吸引用户呢？当然是有两个方面： 博客装饰美观 文章质量高 读者的第一印象往往是读者需要阅读的内容的质量，如果质量达到要求，那么读者会注意到博客的界面，如果界面很特别的话，那么读者肯定是马上加入了标签，并且选择多停留一下继续浏览博客的其它内容，那么这里就会引出另外一个问题，就是博客的响应速度，如果读者点击某篇文章或者按钮后响应了半天空白，那么你猜他会怎么做？肯定是直接右上角了啊，所以博客的响应速度一定要优化好。 如果做到上面三点，那么就算好不容易「骗」到一个浏览量，但是这个读者马上被博客和文章惊呆了，看完文章后，这读者心里美滋滋，认为这么好的文章（博客）必须分享啊🌚，于是可能马上来了一大批满怀期待的读者，然后这批读者又……这时文章的读者数（博客的访问量）就不是简单的加法了～ 知识平台直接或间接因为 Google 这样的搜索引擎而来的读者，绝大部分都是技术人员，而他们只希望尽快解决自己的技术问题，这也是他们的目的，这就意味着博客上的一首诗还是很难被欣赏。而要想照亮他人，他人必须要能懂自己的文章，这样也才可能有更强的交互——评论。所以为了不浪费自己的光能，能把自己的光能完完整整地贡献给文明，那就必须也让一首诗也有评论，怎么做呢？让读者的类型多样化，不限于技术人员。还好现在大部分读者也不用搜索引擎了，谁在吞食搜索引擎的用户？移动端。智能手机的迅速普及导致搜索引擎已经不是人们获取知识的主要途径，大部分人已经将手机 APP 上的知识平台作为自己获取知识的主要途径，比如：知乎、简书、微信订阅号……所以，你还可以将自己的文章发布在这些知识平台上的相应分类上，然后留个博客链接，吸引更多类型的读者😄～ 谷歌分析你怎么知道自己推广的效果？你怎么知道有没有人看了自己的博客？哪篇文章最受欢迎？此时有没有人正浏览着自己的博客？自己的文章有没有被引用？这时最常用的就是强大免费的 Google Analytics，推荐博客建好后，就立即使用。 如何使用？请务必自备梯子查看 Google 官方的教程，开始使用后一定要按照里面的设置，先添加多份 view（数据视图）。 文章底部加上评分小星星淘宝买东西，作为消费者的我们，看评价很重要。现在作为博主，写了一篇文章，很期待读者的反馈。而与淘宝一样，确认收货后，相比评论，更愿意五星好评。那么博客文章怎么加上呢？首先打开主题配置文件： 文件位置：hexo/themes/next/_config.yml 123456# Star rating support to each article.# To get your ID visit https://widgetpack.comrating: enable: true id: color: f79533 先去注释中的网站，首页点 Rating，然后注册个帐号，填一下自己博客的信息，左上角有个 ID，填进主题配置文件中就行，color 改成自己喜欢的即可。另： 可以配置评分方式，侧栏 &gt; Rating &gt; Setting，建议用 IP address 或 Device(cookie)，免登录，毕竟 Socials 里面的选项几乎都被墙，不适合国内网络环境。 建议在侧栏 &gt; Site &gt; Setting 中勾选 Private 选项。 上面两步勾选后别忘了点击页面右下方的 SAVE SETTING 绿色按钮保存。 如果感觉上下留白太多，咋整？浏览器 F12 找元素，调成自己喜欢的值，然后 Copy 到 custom.styl 即可。经过上面的配置，默认最下面只会显示 5 颗小星星，简洁但不明了😂，怎么加上文字说明呢？编辑下面这个文件，Ctrl + F 搜索 rating ，找到这段，对比我给出的，在绿色这行所示的位置，加上自己想要的说明和样式即可。 文件位置：hexo/themes/next/layout/_macro/post.swig 123456&#123;% if theme.rating.enable %&#125; &lt;div class=\"wp_rating\"&gt;+ &lt;div style=\"color: rgba(0, 0, 0, 0.75); font-size:13px; letter-spacing:3px\"&gt;(&amp;gt;看完记得五星好评哦亲&amp;lt;)&lt;/div&gt; &lt;div id=\"wpac-rating\"&gt;&lt;/div&gt; &lt;/div&gt;&#123;% endif %&#125; 为站点添加标题崩溃特效该特效为：当用户离开站点相关的页面时，网页的标题会变成已崩溃，网站图标也会改变；当用户重新回到站点页面时才会恢复正常。 实现方式： 在 /themes/next/source/js/src/ 目录下新建 crash_cheat.js ，代码如下： 1234567891011121314151617181920$(window).load(function () &#123;//整合页面欺骗特效 window.onload有冲突 var OriginTitile = document.title; var titleTime; document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel=\"icon\"]').attr('href', \"../../images/failure.png\"); $('[rel=\"shortcut icon\"]').attr('href', \"../../images/failure.png\"); document.title = '(つェ⊂) 我藏好了哦~ '; clearTimeout(titleTime); &#125; else &#123; $('[rel=\"icon\"]').attr('href', \"../../images/favicon.png\"); $('[rel=\"shortcut icon\"]').attr('href', \"../../images/favicon.png\"); document.title = 'o(^▽^)o 被你发现啦~ '; titleTime = setTimeout(function () &#123; document.title = OriginTitile; &#125;, 2000); &#125; &#125;);&#125;); 在 /themes/next/layout/_layout.swig 文件末尾（ps：我相信各位引入js的位置应该都知道），添加引用： 12&lt;!--崩溃欺骗--&gt;&lt;script type=\"text/javascript\" src=\"/js/src/crash_cheat.js\"&gt;&lt;/script&gt; 上面的图片放在 /themes/next/source/images/ 目录下，自行选择喜欢的图片即可。 每篇文章末尾添加致谢 在 hexo/themes/next/layout/_macro 中新建一个 passage-end-tag.swig 文件，并添加如下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div class=\"read-over\"&gt;-------------------本文结束 &lt;i class=\"fa fa-paw\"&gt;&lt;/i&gt; 感谢您的阅读-------------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开 \\themes\\next\\layout\\_macro\\post.swig 文件，在 post-body 之后， post-footer 之前添加如下画绿色部分代码（post-footer 之前两个 div）： 1234567+ &lt;div&gt;+ &#123;% if not is_index %&#125;+ &#123;% include 'passage-end-tag.swig' %&#125;+ &#123;% endif %&#125;+ &lt;/div&gt;&lt;footer class=\"post-footer\"&gt; 最后，在主题配置文件下，在末尾添加： 文件位置：hexo/themes/next/_config.xml 123# 文章末尾添加\"本文结束\"标记passage_end_tag: enabled: true 新增文章时自动打开Markdown编辑器由于每次在 GitBash 中使用 hexo n &quot;文章名称&quot; 时还要自己去本地目录中打开编辑器，这对于懒癌患者来说实在是太麻烦了😂，那么不如实现一个监听的 js 代码监听新建文章的命令，只要监听到了就自动打开相应的 Markdown编辑器，这样不就方便多了嘛！ 首先在 hexo/scripts 下新建一个 newpost.js 文件，如果没有 scripts 文件可以手动创建一个。 如果你是 windows 用户，在这个文件中写入如下代码： 1234var spawn = require('child_process').exec;hexo.on('new', function(data)&#123; spawn('start \"markdown编辑器绝对路径.exe\" ' + data.path);&#125;); 如果是 mac 用户，就写入如下代码： 1234var exec = require('child_process').exec;hexo.on('new', function(data)&#123; exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);&#125;); 注意里面要修改的是 Markdown 编辑器的绝对路径，我使用的是 Typora ，所以我的绝对路径是 E:\\\\Typora\\\\bin\\\\Typora.exe ，大家可以对应进行修改。 使用hexo-admin在线发布文章最近有不少小伙伴问我这个博客如何在线发布文章，毕竟大多数人都是程序小白，不想使用 GitBash 命令行敲各种命令。所以也有大神做一个 hexo-admin 管理工具，虽然这个东西没有适配完全，但是对于文章管理的基本功能够用。 hexo-admin官方地址 官方在线演示地址：https://jaredforsyth.com/hexo-admin/admin/#/ 要使用这个工具，首先需要安装插件： 1npm install --save hexo-admin 安装完成后，要启动的话，使用 hexo s -d 命令，然后打开网址 localhost:4000/admin/ 进行登录就可以管理后台了。 注意，安装 hexo-admin 插件后，启动后台页面时 GitBash 可能还是会报错，这是由于 hexo-admin 自身还依赖很多个插件，报错信息上只要提示缺少 module “xxx”时，你只要继续使用上面的命令安装缺少的那个插件xxx就可以了，我当时好像连续装了十几个插件才最终启动成功🌚… 安装好后，还需要设置登录的账号密码，不然谁都可以使用你的后台管理。第一次登录后，进入 setting 菜单，点击 Setup authentification here 进入用户名密码设置项，按照提示设置后，把生成的代码添加到 hexo/_config.xml 中，如： 安装好后，还需要设置登录的账号密码，不然谁都可以使用你的后台管理。第一次登录后，进入 setting 菜单，点击 Setup authentification here 进入用户名密码设置项，按照提示设置后，把生成的代码添加到 hexo/_config.xml 中，如： 文件位置：hexo/_config.xml 12345# hexo-admin authentificationadmin: username: xuxu password_hash: $2a$10$anOUoIka5uKSupfpNtu6IOSPvsj2OTPOXC2qpewkP1DmrTZr39Va6 secret: my blog 其中密码是在你设置后进行加密的。 最后在线 deploy 时，可以打开 Deploy 菜单，第一次点击 Deploy 时会提示 Error: Config value &quot;admin.deployCommand&quot; not found ，这个问题作者已经解决，在上面的配置中添加一行配置： 12admin: deployCommand: './hexo-deploy.sh' 就可以在线部署到 Github 了！ Hexo-abbrlink生成唯一文章链接一个 Hexo插件 ，用于根据帖子标题生成静态帖子链接。 首先需要安装插件，博客站点下执行下面命令： 1npm install hexo-abbrlink --save 执行此命令可能会不成功，提示你缺少相应的依赖，比如babel-eslint、mini-css-extract-plugin、webpack-cli…使用npm命令安装即可，比如 npm install eslint@4.x babel-eslint@8 --save-dev 修改站点配置文件 config.yml 文件中的永久链接： 12- permalink: year/:month/:day/:title/+ permalink: posts/:abbrlink.html 在 permalink 下面写入下面的内容： 1234# abbrlink configabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 示例：https://hasaik.com/posts/ab21860c.html ，其中 ab21860c.html 就是生成的永链。 修改侧栏滚动条样式默认的侧栏滚动条其实挺丑的，添加如下代码重新渲染页面就可以修改侧栏滚动条了。 文件位置：hexo/themes/next/source/css/_custom/custom.styl 1234567891011121314151617181920212223242526272829303132333435/*更好的侧边滚动条*/::-webkit-scrollbar &#123; width: 10px; height: 10px;&#125;::-webkit-scrollbar-button &#123; width: 0; height: 0;&#125;::-webkit-scrollbar-button:start:increment,::-webkit-scrollbar-button:end:decrement &#123; display: none;&#125;::-webkit-scrollbar-corner &#123; display: block;&#125;::-webkit-scrollbar-thumb &#123; border-radius: 8px; background-color: rgba(0,0,0,.2);&#125;::-webkit-scrollbar-thumb:hover &#123; border-radius: 8px; background-color: rgba(0,0,0,.5);&#125;::-webkit-scrollbar-track,::-webkit-scrollbar-thumb &#123; border-right: 1px solid transparent; border-left: 1px solid transparent;&#125;::-webkit-scrollbar-track:hover &#123; background-color: rgba(0,0,0,.15);&#125;::-webkit-scrollbar-button:start &#123; width: 10px; height: 10px; /*background: url(../images/scrollbar_arrow.png) no-repeat 0 0;*/ /*可以添加滚动条样式*/&#125; 侧栏加入已运行的时间我们都有自己的生日，都知道自己的岁数，那为什么不给博客加上，让读者知道博客的年纪呢？操作很简单，而且不是精确到年而是精确到秒，233333～ 首先加入以下代码： 文件位置：hexo/themes/next/layout/_custom/sidebar.swig 123456789101112131415161718192021222324252627&lt;div id=\"days\"&gt;&lt;/div&gt;&lt;script&gt;function show_date_time()&#123; window.setTimeout(\"show_date_time()\", 1000); BirthDay=new Date(\"05/27/2017 15:13:14\"); today=new Date(); timeold=(today.getTime()-BirthDay.getTime()); sectimeold=timeold/1000 secondsold=Math.floor(sectimeold); msPerDay=24*60*60*1000 e_daysold=timeold/msPerDay daysold=Math.floor(e_daysold); e_hrsold=(e_daysold-daysold)*24; hrsold=setzero(Math.floor(e_hrsold)); e_minsold=(e_hrsold-hrsold)*60; minsold=setzero(Math.floor((e_hrsold-hrsold)*60)); seconds=setzero(Math.floor((e_minsold-minsold)*60)); document.getElementById('days').innerHTML=\"已运行 \"+daysold+\" 天 \"+hrsold+\" 小时 \"+minsold+\" 分 \"+seconds+\" 秒\";&#125;function setzero(i) &#123; if (i&lt;10) &#123; i=\"0\" + i &#125;; return i;&#125;show_date_time();&lt;/script&gt; 上面 Date 的值记得改为你自己的，且按上面格式，然后修改： 文件位置：hexo/themes/next/layout/_macro/sidebar.swig 1234567891011121314151617181920 &#123;# Blogroll #&#125; &#123;% if theme.links %&#125; &lt;div class=\"links-of-blogroll motion-element &#123;&#123; \"links-of-blogroll-\" + theme.links_layout | default('inline') &#125;&#125;\"&gt; &lt;div class=\"links-of-blogroll-title\"&gt; &lt;i class=\"fa fa-fw fa-&#123;&#123; theme.links_icon | default('globe') | lower &#125;&#125;\"&gt;&lt;/i&gt; &#123;&#123; theme.links_title &#125;&#125;&amp;nbsp; &lt;i class=\"fa fa-fw fa-&#123;&#123; theme.links_icon | default('globe') | lower &#125;&#125;\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;ul class=\"links-of-blogroll-list\"&gt; &#123;% for name, link in theme.links %&#125; &lt;li class=\"links-of-blogroll-item\"&gt; &lt;a href=\"&#123;&#123; link &#125;&#125;\" title=\"&#123;&#123; name &#125;&#125;\" target=\"_blank\"&gt;&#123;&#123; name &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;+ &#123;% include '../_custom/sidebar.swig' %&#125; &lt;/div&gt; &#123;% endif %&#125;- &#123;% include '../_custom/sidebar.swig' %&#125; 这样就可以了！当然，要是不喜欢颜色，感觉不好看，就可以在上文所提的 custom.styl 加入： 文件位置：hexo/themes/next/source/css/_custom/custom.styl 1234567/*自定义的侧栏时间样式*/#days &#123; display: block; color: rgb(7, 179, 155); font-size: 13px; margin-top: 15px;&#125; 里面的值 F12 调成自己喜欢的，然后更改即可。要是不想放在侧栏，想放在页脚，自己应该能折腾了吧😄～ 添加博客热门文章页面博客已有的分类，如 categories 和 tags，都是基于博主的，那么有没有一种分类是基于读者的呢？有，一种是搜索，另一种就是这里的文章阅读量排行榜。前提是在主题配置文件中配置了 leancloud_visitors，配置方法在基础配置中已经介绍过了。首先新建页面： 所在目录：hexo/ 1hexo new page \"top\" 然后在主题配置文件中加上菜单 top 和它的 icon： 文件位置：hexo/themes/next/_config.yml 12menu: top: /top/ || signal 接着在语言翻译文件中加上菜单 top： 文件位置：hexo/themes/next/languages/zh_Hans.yml 1234567891011menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益404 top: 热门排行 /* 可以不为 热门排行，随便取 */ 注意：如果你的站点配置文件中的 languages 写的不是 zh-CN，那么这里请更改相应语言配置文件。最后，编辑第一步新建页面生成的文件： 文件位置：hexo/source/top/index.md 12345678910111213141516171819202122232425262728293031323334353637title: 文章热度排行comments: falsedate: 2019-11-03 14:37:48type:---&lt;div id=\"top\" style=\"margin-top:30px;\"&gt;&lt;/div&gt;&lt;script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"&gt;&lt;/script&gt;&lt;!-- &lt;script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"&gt;&lt;/script&gt; --&gt;&lt;script&gt;AV.initialize(\"app_id\", \"app_key\");&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; var time = 0 var title = \"\" var url = \"\" var query = new AV.Query('Counter'); query.notEqualTo('id', 0); query.descending('time'); query.limit(1000); query.find().then(function (todo) &#123; for (var i = 0; i &lt; 1000; i++) &#123; var result = todo[i].attributes; time = result.time; title = result.title; url = result.url; var content = \"&lt;p class='my-article-top'&gt;\" + \"&lt;font color='#a7a7e5'&gt;\" + \"➤【热度: \" + \"&lt;/font&gt;\" + \"&lt;font color='#f1a8ce'&gt;\" + time + \" ℃】\" + \"&lt;/font&gt;\" + \"&lt;a href='\" + url + \"'&gt;\" + title + \"&lt;/a&gt;\" + \"&lt;/p&gt;\"; document.getElementById(\"top\").innerHTML += content &#125; &#125;, function (error) &#123; console.log(\"error\"); &#125;);&lt;/script&gt;&lt;style&gt;.post-description &#123; display: none; &#125;&lt;/style&gt; 必须将里面的里面的 app_id 和 app_key 替换为你的主题配置文件中的值，必须替换里面博客的链接，1000是显示文章的数量，其它可以自己看情况更改。最后，修改样式可以在 custom.styl 中加入自定义代码，不过还有几点需要注意： 如果在设置 &gt; 安全中心中，没有将http://localhost:4000加入 Web 安全域名，那么本地调试将看不到，可以先将之加入，调试完后删除。 如果你发现文章标题显示不对，这是由于更改过文章标题导致的，在存储 &gt; Counter 双击title修改即可。 注意：如果你的博客使用了 Valine 评论系统，那么可能会有代码冲突问题，解决方法可 Google ~ 文章置顶功能由于博客的首页可能是被浏览最多的页面，所以首页的前几篇文章被阅读的可能性比较大。可以利用这个特点，通过将自己认为重要的文章放在首页，从而让重要的文章被阅读的可能性增大😄。但是，默认的排序只有一个维度——时间，两种选择——正序和倒序，这就造成自己的得意之作被埋没了，怎么办呢，如何实现文章的置顶？ NexT 主题以前有过这个功能，然而由于一些 bugs（issue）被去掉了。不过在这个丰富的 issue 中，我自己摸索出了一种解决方法，参考了 issue 中的那篇文章。 首先移除默认安装的插件： 所在目录：hexo/ 1npm uninstall hexo-generator-index --save 然后安装新插件： 1npm install hexo-generator-index-pin-top --save 最后编辑有这需求的相关文章时，在Front-matter（文件最上方以—分隔的区域）加上一行: 1top: true 然后就行了。如果你置顶了多篇，怎么控制顺序呢？设置top的值（大的在前面），比如： 1234567# Post a.mdtitle: atop: 1# Post b.mdtitle: btop: 10 那么文章 b 便会显示在文章 a 的前面。可是，没有任何标记啊，读者怎么知道文章置顶了😂～还好 NexT 原有的置顶功能有考虑到这个，且置顶的样式没有被移除，所以可以直接利用，编辑文件加入以下代码： 文件位置：/themes/next/layout/_macro/post.swig 12345678&lt;div class=\"post-meta\"&gt; &lt;span class=\"post-time\"&gt;+ &#123;% if post.top %&#125;+ &lt;i class=\"fa fa-thumb-tack\"&gt;&lt;/i&gt;+ &lt;font color=7D26CD&gt;置顶&lt;/font&gt;+ &lt;span class=\"post-meta-divider\"&gt;|&lt;/span&gt;+ &#123;% endif %&#125; 精品文章在 /themes/next/layout/_macro/ 路径，找到 post.swig ，在前 文置 顶功能后边，加上如下代码： 123456&#123;% if post.essential%&#125; &lt;span class=\"post-meta-item-icon\"&gt; &lt;i class=\"fa fa-newspaper-o jingping\"&gt;精品&lt;/i&gt; &lt;/span&gt; &lt;span class=\"post-meta-divider\"&gt;|&lt;/span&gt; &#123;% endif %&#125; 在 themes/next/source/css/_custom/custom.styl 中，增加如下样式： 12345.jingping&#123; background : #00a8c3; padding:2px 4px 2px 4px; color: #fff;&#125; 在需要设置精品的文章md文件中，加入如下代码： 1essential: true 添加近期文章版块在 next/layout/_macro/sidebar.swig 中的 if theme.links 对应的 endif 后面添加以下代码： 123456789101112131415161718&lt;!--近期文章版块 began--&gt; &#123;% if theme.recent_posts %&#125; &lt;div class=\"links-of-blogroll motion-element &#123;&#123; \"links-of-blogroll-\" + theme.recent_posts_layout &#125;&#125;\"&gt; &lt;div class=\"links-of-blogroll-title\"&gt; &lt;i class=\"fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;\" aria-hidden=\"true\"&gt;&lt;/i&gt; &#123;&#123; theme.recent_posts_title &#125;&#125; &lt;/div&gt; &lt;ul class=\"links-of-blogroll-list\"&gt; &#123;% set posts = site.posts.sort('-date') %&#125; &#123;% for post in posts.slice('0', '5') %&#125; &lt;li class='my-links-of-blogroll-li'&gt; &lt;a href=\"&#123;&#123; url_for(post.path) &#125;&#125;\" title=\"&#123;&#123; post.title &#125;&#125;\" target=\"\"&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% endif %&#125;&lt;!--近期文章版块 end--&gt; 为了配置方便，在主题的 _config.yml 中添加了几个变量，如下： 123recent_posts_title: 近期文章recent_posts_layout: blockrecent_posts: true 代码块复制功能依赖 clipboard.js 实现，个性化配置可参考官方文档。在 /themes/next/layout/_layout.swig 引入下载的 JS 123&lt;!-- 代码块复制功能 --&gt;&lt;script type=\"text/javascript\" src=\"/js/src/clipboard.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"/js/src/clipboard-use.js\"&gt;&lt;/script&gt; 位于 /themes/next/source/js/src/ 目录下的 clipboard.min.js 和 clipboard-use.js 代码分别如下： 1234567/*! * clipboard.min.js v2.0.4 * https://zenorocha.github.io/clipboard.js * * Licensed MIT © Zeno Rocha */!function(t,e)&#123;\"object\"==typeof exports&amp;&amp;\"object\"==typeof module?module.exports=e():\"function\"==typeof define&amp;&amp;define.amd?define([],e):\"object\"==typeof exports?exports.ClipboardJS=e():t.ClipboardJS=e()&#125;(this,function()&#123;return function(n)&#123;var o=&#123;&#125;;function r(t)&#123;if(o[t])return o[t].exports;var e=o[t]=&#123;i:t,l:!1,exports:&#123;&#125;&#125;;return n[t].call(e.exports,e,e.exports,r),e.l=!0,e.exports&#125;return r.m=n,r.c=o,r.d=function(t,e,n)&#123;r.o(t,e)||Object.defineProperty(t,e,&#123;enumerable:!0,get:n&#125;)&#125;,r.r=function(t)&#123;\"undefined\"!=typeof Symbol&amp;&amp;Symbol.toStringTag&amp;&amp;Object.defineProperty(t,Symbol.toStringTag,&#123;value:\"Module\"&#125;),Object.defineProperty(t,\"__esModule\",&#123;value:!0&#125;)&#125;,r.t=function(e,t)&#123;if(1&amp;t&amp;&amp;(e=r(e)),8&amp;t)return e;if(4&amp;t&amp;&amp;\"object\"==typeof e&amp;&amp;e&amp;&amp;e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",&#123;enumerable:!0,value:e&#125;),2&amp;t&amp;&amp;\"string\"!=typeof e)for(var o in e)r.d(n,o,function(t)&#123;return e[t]&#125;.bind(null,o));return n&#125;,r.n=function(t)&#123;var e=t&amp;&amp;t.__esModule?function()&#123;return t.default&#125;:function()&#123;return t&#125;;return r.d(e,\"a\",e),e&#125;,r.o=function(t,e)&#123;return Object.prototype.hasOwnProperty.call(t,e)&#125;,r.p=\"\",r(r.s=0)&#125;([function(t,e,n)&#123;\"use strict\";var r=\"function\"==typeof Symbol&amp;&amp;\"symbol\"==typeof Symbol.iterator?function(t)&#123;return typeof t&#125;:function(t)&#123;return t&amp;&amp;\"function\"==typeof Symbol&amp;&amp;t.constructor===Symbol&amp;&amp;t!==Symbol.prototype?\"symbol\":typeof t&#125;,i=function()&#123;function o(t,e)&#123;for(var n=0;n&lt;e.length;n++)&#123;var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&amp;&amp;(o.writable=!0),Object.defineProperty(t,o.key,o)&#125;&#125;return function(t,e,n)&#123;return e&amp;&amp;o(t.prototype,e),n&amp;&amp;o(t,n),t&#125;&#125;(),a=o(n(1)),c=o(n(3)),u=o(n(4));function o(t)&#123;return t&amp;&amp;t.__esModule?t:&#123;default:t&#125;&#125;var l=function(t)&#123;function o(t,e)&#123;!function(t,e)&#123;if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")&#125;(this,o);var n=function(t,e)&#123;if(!t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!e||\"object\"!=typeof e&amp;&amp;\"function\"!=typeof e?t:e&#125;(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return n.resolveOptions(e),n.listenClick(t),n&#125;return function(t,e)&#123;if(\"function\"!=typeof e&amp;&amp;null!==e)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof e);t.prototype=Object.create(e&amp;&amp;e.prototype,&#123;constructor:&#123;value:t,enumerable:!1,writable:!0,configurable:!0&#125;&#125;),e&amp;&amp;(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)&#125;(o,c.default),i(o,[&#123;key:\"resolveOptions\",value:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:&#123;&#125;;this.action=\"function\"==typeof t.action?t.action:this.defaultAction,this.target=\"function\"==typeof t.target?t.target:this.defaultTarget,this.text=\"function\"==typeof t.text?t.text:this.defaultText,this.container=\"object\"===r(t.container)?t.container:document.body&#125;&#125;,&#123;key:\"listenClick\",value:function(t)&#123;var e=this;this.listener=(0,u.default)(t,\"click\",function(t)&#123;return e.onClick(t)&#125;)&#125;&#125;,&#123;key:\"onClick\",value:function(t)&#123;var e=t.delegateTarget||t.currentTarget;this.clipboardAction&amp;&amp;(this.clipboardAction=null),this.clipboardAction=new a.default(&#123;action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this&#125;)&#125;&#125;,&#123;key:\"defaultAction\",value:function(t)&#123;return s(\"action\",t)&#125;&#125;,&#123;key:\"defaultTarget\",value:function(t)&#123;var e=s(\"target\",t);if(e)return document.querySelector(e)&#125;&#125;,&#123;key:\"defaultText\",value:function(t)&#123;return s(\"text\",t)&#125;&#125;,&#123;key:\"destroy\",value:function()&#123;this.listener.destroy(),this.clipboardAction&amp;&amp;(this.clipboardAction.destroy(),this.clipboardAction=null)&#125;&#125;],[&#123;key:\"isSupported\",value:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:[\"copy\",\"cut\"],e=\"string\"==typeof t?[t]:t,n=!!document.queryCommandSupported;return e.forEach(function(t)&#123;n=n&amp;&amp;!!document.queryCommandSupported(t)&#125;),n&#125;&#125;]),o&#125;();function s(t,e)&#123;var n=\"data-clipboard-\"+t;if(e.hasAttribute(n))return e.getAttribute(n)&#125;t.exports=l&#125;,function(t,e,n)&#123;\"use strict\";var o,r=\"function\"==typeof Symbol&amp;&amp;\"symbol\"==typeof Symbol.iterator?function(t)&#123;return typeof t&#125;:function(t)&#123;return t&amp;&amp;\"function\"==typeof Symbol&amp;&amp;t.constructor===Symbol&amp;&amp;t!==Symbol.prototype?\"symbol\":typeof t&#125;,i=function()&#123;function o(t,e)&#123;for(var n=0;n&lt;e.length;n++)&#123;var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&amp;&amp;(o.writable=!0),Object.defineProperty(t,o.key,o)&#125;&#125;return function(t,e,n)&#123;return e&amp;&amp;o(t.prototype,e),n&amp;&amp;o(t,n),t&#125;&#125;(),a=n(2),c=(o=a)&amp;&amp;o.__esModule?o:&#123;default:o&#125;;var u=function()&#123;function e(t)&#123;!function(t,e)&#123;if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")&#125;(this,e),this.resolveOptions(t),this.initSelection()&#125;return i(e,[&#123;key:\"resolveOptions\",value:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:&#123;&#125;;this.action=t.action,this.container=t.container,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=\"\"&#125;&#125;,&#123;key:\"initSelection\",value:function()&#123;this.text?this.selectFake():this.target&amp;&amp;this.selectTarget()&#125;&#125;,&#123;key:\"selectFake\",value:function()&#123;var t=this,e=\"rtl\"==document.documentElement.getAttribute(\"dir\");this.removeFake(),this.fakeHandlerCallback=function()&#123;return t.removeFake()&#125;,this.fakeHandler=this.container.addEventListener(\"click\",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement(\"textarea\"),this.fakeElem.style.fontSize=\"12pt\",this.fakeElem.style.border=\"0\",this.fakeElem.style.padding=\"0\",this.fakeElem.style.margin=\"0\",this.fakeElem.style.position=\"absolute\",this.fakeElem.style[e?\"right\":\"left\"]=\"-9999px\";var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+\"px\",this.fakeElem.setAttribute(\"readonly\",\"\"),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,c.default)(this.fakeElem),this.copyText()&#125;&#125;,&#123;key:\"removeFake\",value:function()&#123;this.fakeHandler&amp;&amp;(this.container.removeEventListener(\"click\",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&amp;&amp;(this.container.removeChild(this.fakeElem),this.fakeElem=null)&#125;&#125;,&#123;key:\"selectTarget\",value:function()&#123;this.selectedText=(0,c.default)(this.target),this.copyText()&#125;&#125;,&#123;key:\"copyText\",value:function()&#123;var e=void 0;try&#123;e=document.execCommand(this.action)&#125;catch(t)&#123;e=!1&#125;this.handleResult(e)&#125;&#125;,&#123;key:\"handleResult\",value:function(t)&#123;this.emitter.emit(t?\"success\":\"error\",&#123;action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)&#125;)&#125;&#125;,&#123;key:\"clearSelection\",value:function()&#123;this.trigger&amp;&amp;this.trigger.focus(),window.getSelection().removeAllRanges()&#125;&#125;,&#123;key:\"destroy\",value:function()&#123;this.removeFake()&#125;&#125;,&#123;key:\"action\",set:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:\"copy\";if(this._action=t,\"copy\"!==this._action&amp;&amp;\"cut\"!==this._action)throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"')&#125;,get:function()&#123;return this._action&#125;&#125;,&#123;key:\"target\",set:function(t)&#123;if(void 0!==t)&#123;if(!t||\"object\"!==(void 0===t?\"undefined\":r(t))||1!==t.nodeType)throw new Error('Invalid \"target\" value, use a valid Element');if(\"copy\"===this.action&amp;&amp;t.hasAttribute(\"disabled\"))throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');if(\"cut\"===this.action&amp;&amp;(t.hasAttribute(\"readonly\")||t.hasAttribute(\"disabled\")))throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');this._target=t&#125;&#125;,get:function()&#123;return this._target&#125;&#125;]),e&#125;();t.exports=u&#125;,function(t,e)&#123;t.exports=function(t)&#123;var e;if(\"SELECT\"===t.nodeName)t.focus(),e=t.value;else if(\"INPUT\"===t.nodeName||\"TEXTAREA\"===t.nodeName)&#123;var n=t.hasAttribute(\"readonly\");n||t.setAttribute(\"readonly\",\"\"),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute(\"readonly\"),e=t.value&#125;else&#123;t.hasAttribute(\"contenteditable\")&amp;&amp;t.focus();var o=window.getSelection(),r=document.createRange();r.selectNodeContents(t),o.removeAllRanges(),o.addRange(r),e=o.toString()&#125;return e&#125;&#125;,function(t,e)&#123;function n()&#123;&#125;n.prototype=&#123;on:function(t,e,n)&#123;var o=this.e||(this.e=&#123;&#125;);return(o[t]||(o[t]=[])).push(&#123;fn:e,ctx:n&#125;),this&#125;,once:function(t,e,n)&#123;var o=this;function r()&#123;o.off(t,r),e.apply(n,arguments)&#125;return r._=e,this.on(t,r,n)&#125;,emit:function(t)&#123;for(var e=[].slice.call(arguments,1),n=((this.e||(this.e=&#123;&#125;))[t]||[]).slice(),o=0,r=n.length;o&lt;r;o++)n[o].fn.apply(n[o].ctx,e);return this&#125;,off:function(t,e)&#123;var n=this.e||(this.e=&#123;&#125;),o=n[t],r=[];if(o&amp;&amp;e)for(var i=0,a=o.length;i&lt;a;i++)o[i].fn!==e&amp;&amp;o[i].fn._!==e&amp;&amp;r.push(o[i]);return r.length?n[t]=r:delete n[t],this&#125;&#125;,t.exports=n&#125;,function(t,e,n)&#123;var d=n(5),h=n(6);t.exports=function(t,e,n)&#123;if(!t&amp;&amp;!e&amp;&amp;!n)throw new Error(\"Missing required arguments\");if(!d.string(e))throw new TypeError(\"Second argument must be a String\");if(!d.fn(n))throw new TypeError(\"Third argument must be a Function\");if(d.node(t))return s=e,f=n,(l=t).addEventListener(s,f),&#123;destroy:function()&#123;l.removeEventListener(s,f)&#125;&#125;;if(d.nodeList(t))return a=t,c=e,u=n,Array.prototype.forEach.call(a,function(t)&#123;t.addEventListener(c,u)&#125;),&#123;destroy:function()&#123;Array.prototype.forEach.call(a,function(t)&#123;t.removeEventListener(c,u)&#125;)&#125;&#125;;if(d.string(t))return o=t,r=e,i=n,h(document.body,o,r,i);throw new TypeError(\"First argument must be a String, HTMLElement, HTMLCollection, or NodeList\");var o,r,i,a,c,u,l,s,f&#125;&#125;,function(t,n)&#123;n.node=function(t)&#123;return void 0!==t&amp;&amp;t instanceof HTMLElement&amp;&amp;1===t.nodeType&#125;,n.nodeList=function(t)&#123;var e=Object.prototype.toString.call(t);return void 0!==t&amp;&amp;(\"[object NodeList]\"===e||\"[object HTMLCollection]\"===e)&amp;&amp;\"length\"in t&amp;&amp;(0===t.length||n.node(t[0]))&#125;,n.string=function(t)&#123;return\"string\"==typeof t||t instanceof String&#125;,n.fn=function(t)&#123;return\"[object Function]\"===Object.prototype.toString.call(t)&#125;&#125;,function(t,e,n)&#123;var a=n(7);function i(t,e,n,o,r)&#123;var i=function(e,n,t,o)&#123;return function(t)&#123;t.delegateTarget=a(t.target,n),t.delegateTarget&amp;&amp;o.call(e,t)&#125;&#125;.apply(this,arguments);return t.addEventListener(n,i,r),&#123;destroy:function()&#123;t.removeEventListener(n,i,r)&#125;&#125;&#125;t.exports=function(t,e,n,o,r)&#123;return\"function\"==typeof t.addEventListener?i.apply(null,arguments):\"function\"==typeof n?i.bind(null,document).apply(null,arguments):(\"string\"==typeof t&amp;&amp;(t=document.querySelectorAll(t)),Array.prototype.map.call(t,function(t)&#123;return i(t,e,n,o,r)&#125;))&#125;&#125;,function(t,e)&#123;if(\"undefined\"!=typeof Element&amp;&amp;!Element.prototype.matches)&#123;var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector&#125;t.exports=function(t,e)&#123;for(;t&amp;&amp;9!==t.nodeType;)&#123;if(\"function\"==typeof t.matches&amp;&amp;t.matches(e))return t;t=t.parentNode&#125;&#125;&#125;])&#125;); 123456789101112131415161718/*页面载入完成后，创建复制按钮*/!function (e, t, a) &#123; /* code */ var initCopyCode = function()&#123; var copyHtml = ''; copyHtml += '&lt;button class=\"btn-copy\" data-clipboard-snippet=\"\"&gt;'; //fa fa-globe可以去字体库替换自己想要的图标 copyHtml += ' &lt;i class=\"fa fa-clipboard\"&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;'; copyHtml += '&lt;/button&gt;'; $(\".highlight .code pre\").before(copyHtml); new ClipboardJS('.btn-copy', &#123; target: function(trigger) &#123; return trigger.nextElementSibling; &#125; &#125;); &#125; initCopyCode();&#125;(window, document); 可根据需要在 /themes/next/source/css/_custom/custom.styl 加 CSS 1234567891011121314151617181920212223242526272829303132333435363738.highlight&#123; //position: relative; position: static;&#125;highlight-wrap &#123; background: #008b89;&#125;.btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc,#eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0;&#125;.btn-copy span &#123; margin-left: 5px;&#125;.highlight:hover .btn-copy&#123; opacity: 1;&#125; 博客加入canvas粒子时钟这是一款很有意思的 HTML5 Canvas 时间动画，总体来说，它是一个可以和客户端同步的时钟，其特点是当时间走动时，数字将会散落成一个个粒子动画。 在 /themes/next/layout/_custom/ 目录下，新建 clock.swig 文件，内容如下： 123456&lt;div id=\"\"&gt; &lt;canvas id=\"canvas\" style=\"width:60%;\"&gt;&lt;/div&gt;&lt;!--粒子时钟js--&gt;&lt;script type=\"text/javascript\" src=\"/js/src/canvas-dance-time.js\"&gt;&lt;/script&gt; 在 /themes/next/layout/_macro/sidebar.swig 中引入： 1&#123;% include '../_custom/clock.swig' %&#125; 可根据自己的偏好来设置具体位置，我是加在了侧栏的末尾。 在 /themes/next/source/js/src 目录下，新建 canvas-dance-time.js 文件，内容如下：function()&#123; var WINDOW_WIDTH = 820; var WINDOW_HEIGHT = 250; var RADIUS = 7; //球半径 var NUMBER_GAP = 10; //数字之间的间隙 var u=0.65; //碰撞能量损耗系数 var context; //Canvas绘制上下文 var balls = []; //存储彩色的小球 const colors = [\"#33B5E5\",\"#0099CC\",\"#AA66CC\",\"#9933CC\",\"#99CC00\",\"#669900\",\"#FFBB33\",\"#FF8800\",\"#FF4444\",\"#CC0000\"]; //彩色小球的颜色 var currentNums = []; //屏幕显示的8个字符 var digit = [ [ [0,0,1,1,1,0,0], [0,1,1,0,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,0,1,1,0], [0,0,1,1,1,0,0] ],//0 [ [0,0,0,1,1,0,0], [0,1,1,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [1,1,1,1,1,1,1] ],//1 [ [0,1,1,1,1,1,0], [1,1,0,0,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,1,1,0], [0,0,0,1,1,0,0], [0,0,1,1,0,0,0], [0,1,1,0,0,0,0], [1,1,0,0,0,0,0], [1,1,0,0,0,1,1], [1,1,1,1,1,1,1] ],//2 [ [1,1,1,1,1,1,1], [0,0,0,0,0,1,1], [0,0,0,0,1,1,0], [0,0,0,1,1,0,0], [0,0,1,1,1,0,0], [0,0,0,0,1,1,0], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0] ],//3 [ [0,0,0,0,1,1,0], [0,0,0,1,1,1,0], [0,0,1,1,1,1,0], [0,1,1,0,1,1,0], [1,1,0,0,1,1,0], [1,1,1,1,1,1,1], [0,0,0,0,1,1,0], [0,0,0,0,1,1,0], [0,0,0,0,1,1,0], [0,0,0,1,1,1,1] ],//4 [ [1,1,1,1,1,1,1], [1,1,0,0,0,0,0], [1,1,0,0,0,0,0], [1,1,1,1,1,1,0], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0] ],//5 [ [0,0,0,0,1,1,0], [0,0,1,1,0,0,0], [0,1,1,0,0,0,0], [1,1,0,0,0,0,0], [1,1,0,1,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0] ],//6 [ [1,1,1,1,1,1,1], [1,1,0,0,0,1,1], [0,0,0,0,1,1,0], [0,0,0,0,1,1,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,1,1,0,0,0], [0,0,1,1,0,0,0], [0,0,1,1,0,0,0], [0,0,1,1,0,0,0] ],//7 [ [0,1,1,1,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0] ],//8 [ [0,1,1,1,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,1,1,0], [0,0,0,1,1,0,0], [0,1,1,0,0,0,0] ],//9 [ [0,0,0,0], [0,0,0,0], [0,1,1,0], [0,1,1,0], [0,0,0,0], [0,0,0,0], [0,1,1,0], [0,1,1,0], [0,0,0,0], [0,0,0,0] ]//: ]; function drawDatetime(cxt)&#123; var nums = []; context.fillStyle=\"#005eac\" var date = new Date(); var offsetX = 70, offsetY = 30; var hours = date.getHours(); var num1 = Math.floor(hours/10); var num2 = hours%10; nums.push(&#123;num: num1&#125;); nums.push(&#123;num: num2&#125;); nums.push(&#123;num: 10&#125;); //冒号 var minutes = date.getMinutes(); var num1 = Math.floor(minutes/10); var num2 = minutes%10; nums.push(&#123;num: num1&#125;); nums.push(&#123;num: num2&#125;); nums.push(&#123;num: 10&#125;); //冒号 var seconds = date.getSeconds(); var num1 = Math.floor(seconds/10); var num2 = seconds%10; nums.push(&#123;num: num1&#125;); nums.push(&#123;num: num2&#125;); for(var x = 0;x&lt;nums.length;x++)&#123; nums[x].offsetX = offsetX; offsetX = drawSingleNumber(offsetX,offsetY, nums[x].num,cxt); //两个数字连一块，应该间隔一些距离 if(x&lt;nums.length-1)&#123; if((nums[x].num!=10) &amp;&amp;(nums[x+1].num!=10))&#123; offsetX+=NUMBER_GAP; &#125; &#125; &#125; //说明这是初始化 if(currentNums.length ==0)&#123; currentNums = nums; &#125;else&#123; //进行比较 for(var index = 0;index&lt;currentNums.length;index++)&#123; if(currentNums[index].num!=nums[index].num)&#123; //不一样时，添加彩色小球 addBalls(nums[index]); currentNums[index].num=nums[index].num; &#125; &#125; &#125; renderBalls(cxt); updateBalls(); return date; &#125; function addBalls (item) &#123; var num = item.num; var numMatrix = digit[num]; for(var y = 0;y&lt;numMatrix.length;y++)&#123; for(var x = 0;x&lt;numMatrix[y].length;x++)&#123; if(numMatrix[y][x]==1)&#123; var ball=&#123; offsetX:item.offsetX+RADIUS+RADIUS*2*x, offsetY:30+RADIUS+RADIUS*2*y, color:colors[Math.floor(Math.random()*colors.length)], g:1.5+Math.random(), vx:Math.pow(-1, Math.ceil(Math.random()*10))*4+Math.random(), vy:-5 &#125; balls.push(ball); &#125; &#125; &#125; &#125; function renderBalls(cxt)&#123; for(var index = 0;index&lt;balls.length;index++)&#123; cxt.beginPath(); cxt.fillStyle=balls[index].color; cxt.arc(balls[index].offsetX, balls[index].offsetY, RADIUS, 0, 2*Math.PI); cxt.fill(); &#125; &#125; function updateBalls () &#123; var i =0; for(var index = 0;index&lt;balls.length;index++)&#123; var ball = balls[index]; ball.offsetX += ball.vx; ball.offsetY += ball.vy; ball.vy+=ball.g; if(ball.offsetY &gt; (WINDOW_HEIGHT-RADIUS))&#123; ball.offsetY= WINDOW_HEIGHT-RADIUS; ball.vy=-ball.vy*u; &#125; if(ball.offsetX&gt;RADIUS&amp;&amp;ball.offsetX&lt;(WINDOW_WIDTH-RADIUS))&#123; balls[i]=balls[index]; i++; &#125; &#125; //去除出边界的球 for(;i&lt;balls.length;i++)&#123; balls.pop(); &#125; &#125; function drawSingleNumber(offsetX, offsetY, num, cxt)&#123; var numMatrix = digit[num]; for(var y = 0;y&lt;numMatrix.length;y++)&#123; for(var x = 0;x&lt;numMatrix[y].length;x++)&#123; if(numMatrix[y][x]==1)&#123; cxt.beginPath(); cxt.arc(offsetX+RADIUS+RADIUS*2*x,offsetY+RADIUS+RADIUS*2*y,RADIUS,0,2*Math.PI); cxt.fill(); &#125; &#125; &#125; cxt.beginPath(); offsetX += numMatrix[0].length*RADIUS*2; return offsetX; &#125; var canvas = document.getElementById(\"canvas\"); canvas.width=WINDOW_WIDTH; canvas.height=WINDOW_HEIGHT; context = canvas.getContext(\"2d\"); //记录当前绘制的时刻 var currentDate = new Date(); setInterval(function()&#123; //清空整个Canvas，重新绘制内容 context.clearRect(0, 0, context.canvas.width, context.canvas.height); drawDatetime(context); &#125;, 50)&#125;)(); 自定义文章底部版权声明效果图： 在目录 themes/next/layout/_macro/ 下添加 my-copyright.swig ，内容如下： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=\"my_post_copyright\"&gt; &lt;script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=\"&#123;&#123; url_for(page.path) &#125;&#125;\"&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=\"/\" title=\"访问 &#123;&#123; theme.author &#125;&#125; 的个人博客\"&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(\"YYYY年MM月DD日 - HH:mm:ss\") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(\"YYYY年MM月DD日 - HH:mm:ss\") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=\"&#123;&#123; url_for(page.path) &#125;&#125;\" title=\"&#123;&#123; page.title &#125;&#125;\"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=\"copy-path\" title=\"点击复制文章链接\"&gt;&lt;i class=\"fa fa-clipboard\" data-clipboard-text=\"&#123;&#123; page.permalink &#125;&#125;\" aria-label=\"复制成功！\"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=\"fa fa-creative-commons\"&gt;&lt;/i&gt; &lt;a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;&lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard('.fa-clipboard'); $(\".fa-clipboard\").click(function()&#123; clipboard.on('success', function()&#123; swal(&#123; title: \"\", text: '复制成功', icon: \"success\", showConfirmButton: true &#125;); &#125;); &#125;);&lt;/script&gt;&#123;% endif %&#125; 在目录 themes/next/source/css/_common/components/post/ 下添加 my-post-copyright.styl，内容如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255, 255, 255, 0.4);&#125;.my_post_copyright p &#123; margin: 0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom: 0;&#125;.my_post_copyright a:hover &#123; color: #0593d3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile() &#123; display: none; &#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改 themes/next/layout/_macro/post.swig ，如下： 123456789101112131415&#123;#####################&#125;&#123;### END POST BODY ###&#125;&#123;#####################&#125;+&lt;div&gt;+ &#123;% if not is_index %&#125;+ &#123;% include 'my-copyright.swig' %&#125;+ &#123;% endif %&#125;+&lt;/div&gt;&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125; &lt;div&gt; &#123;% include 'wechat-subscriber.swig' %&#125; &lt;/div&gt;&#123;% endif %&#125; 以上 + 号后面的为新增代码 打开 themes/next/source/css/_common/components/post/post.styl 文件，在最后一行增加代码： 1@import \"my-post-copyright\" 设置新建文章自动开启 copyright ，即新建文章自动显示自定义的版权声明，设置 ～/scaffolds/post.md 文件，如下： 1234title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;copyright: true #新增,开启--- 博客动态背景图片在 themes/next/source/css/_custom/custom.styl 中添加CSS样式 1234567891011/* hexo next主题下，自动更换背景图片 began *//* 图片来源https://source.unsplash.com/ */body &#123; background: url(https://source.unsplash.com/random/1920x1080); background-repeat: no-repeat; background-attachment: fixed; background-position: 50% 50%;&#125;/* hexo next主题下，自动更换背景图片 end */ 博客写作进阶Next主题集成了很多好看的写作样式，具体可以看我的另外一篇博客。 插入音乐和视频音乐的话，网易云音乐的外链很好用，不仅有可以单曲，还能有歌单，有兴趣的自己去网易云音乐找首歌尝试。但是目前有很多音乐因为版权原因放不了，还有就是不完全支持 https，导致浏览器地址栏的小绿锁不见了。要解决这些缺点，就需要安装插件👽。 音乐1) 直接用 HTML 的标签，写法如下： 1&lt;audio src=\"https://什么什么什么.mp3\" style=\"max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;\" controls=\"controls\" loop=\"loop\" preload=\"meta\"&gt;Your browser does not support the audio tag.&lt;/audio&gt; 2) 用插件，有显示歌词功能，也美观。首先在站点文件夹根目录安装插件： 1npm install hexo-tag-aplayer --save 然后文章中的写法： 1&#123;% aplayer \"歌曲名\" \"歌手名\" \"https://什么什么什么.mp3\" \"https://封面图.jpg\" \"lrc:https://歌词.lrc\" %&#125; 另外可以支持歌单： 1234567891011121314151617181920212223&#123;% aplayerlist %&#125;&#123; \"autoplay\": false, \"showlrc\": 3, \"mutex\": true, \"music\": [ &#123; \"title\": \"歌曲名\", \"author\": \"歌手名\", \"url\": \"https://什么什么什么.mp3\", \"pic\": \"https://封面图.jpg\", \"lrc\": \"https://歌词.lrc\" &#125;, &#123; \"title\": \"歌曲名\", \"author\": \"歌手名\", \"url\": \"https://什么什么什么.mp3\", \"pic\": \"https://封面图.jpg\", \"lrc\": \"https://歌词.lrc\" &#125; ]&#125;&#123;% endaplayerlist %&#125; 里面的详细参数见 README 和这插件的「母亲」Aplayer 的官方文档。关于 LRC 歌词，可以用工具下载网易云音乐的歌词，另发现暂时不支持 offset 参数。当然，如果那歌词很操蛋，有错误（比如字母大小写和标点符号乱加）或者时间完全对不上，然后你也和我一样是个完美主义者，那接下来就是令人窒息的操作了，一句一句自己查看修改…… 什么，你想把网易云的几百首歌手动同步到博客😨？慢慢慢，有一种非常简单的方法，此这种方法也支持单曲，将参数里的 playlist 更改为 song 即可，非常建议食用！更多功能请仔细阅读 README。 视频1) 直接用 HTML 的标签，写法如下： 1&lt;video poster=\"https://封面图.jpg\" src=\"https://什么什么什么.mp4\" style=\"max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;\" controls=\"controls\" loop=\"loop\" preload=\"meta\"&gt;Your browser does not support the video tag.&lt;/video&gt; 2) 用插件，可支持弹幕，首先在站点文件夹根目录安装插件： 1npm install hexo-tag-dplayer --save 然后文章中的写法： 1&#123;% dplayer \"url=https://什么什么什么.mp4\" \"https://封面图.jpg\" \"api=https://api.prprpr.me/dplayer/\" \"id=\" \"loop=false\" %&#125; 要使用弹幕，必须有 api 和 id 两项，并且若使用的是官方的 api 地址（即上面的），id 的值不能与这个列表的值一样。id 的值自己随便取，唯一要求就是前面这点。如果唯一要求难倒了你，可以使用这个工具将一段与众不同的文字😂生成一段看起来毫无意义的哈希值，这样看起来是不是好多了。 当然，这个插件的功能还有很多，可以去 README 和这插件的「母亲」Dplayer 的官方文档看看。 主题代码块高亮发现一款类似 MacPanel 的代码块高亮样式，具体可以看我的另外一篇博客。 主题头像旋转功能将头像显示成圆形，鼠标放上去有旋转效果。 找到 /themes/next/source/css/_common/components/sidebar/sidebar-author.styl 添加以下代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/* 添加头像旋转 */.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; 实现图片点击放大效果next 主题自带 facybox 图片放大功能，首先推荐使用 fancybox，如果不想用可以使用以下自定义的图片放大功能，首先创建 images.js 文件如下： 目录位置：hexo/themes/next/source/js/src/image.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189let container = document.documentElement||document.body;let img,div,src,btnleft,btnright;var imgid=0;let x,y,w,h,tx,ty,tw,th,ww,wh;let closeMove=function()&#123; if(div==undefined)&#123; return false; &#125; div.style.opacity=0; img.style.height=h+\"px\"; img.style.width=w+\"px\"; img.style.left=x+\"px\"; img.style.top=(y - container.scrollTop)+\"px\"; // 延迟移除dom setTimeout(function()&#123; div.remove(); img.remove(); btnright.remove(); btnleft.remove(); &#125;,100);&#125;;let closeFade=function()&#123; if(div==undefined)&#123; return false; &#125; div.style.opacity=0; img.style.opacity=0; // 延迟移除dom setTimeout(function()&#123; div.remove(); img.remove(); btnright.remove(); btnleft.remove(); &#125;,100);&#125;;// 监听滚动关闭层document.addEventListener(\"scroll\",function()&#123; closeFade();&#125;);document.querySelectorAll(\"img\").forEach(v=&gt;&#123; if (v.parentNode.localName!=a) &#123; v.id=imgid; imgid++; v.addEventListener(\"click\",function(e)&#123; // 注册事件 // 记录小图的位置个大小 x=e.target.offsetLeft; y=e.target.offsetTop; w=e.target.offsetWidth; h=e.target.offsetHeight; data-src=e.target.src; id=e.target.id; // 创建遮罩层 div=document.createElement(\"div\"); div.style.cssText=` position:fixed; left:0; top:0; bottom:0; right:0; background-color: rgba(25,25,25,0.8); z-index:99999999; transition:all .3s cubic-bezier(0.165, 0.84, 0.44, 1); `; document.body.appendChild(div); setTimeout(function()&#123; div.style.opacity=1; &#125;,0); // (此处可以加loading) // 创建副本 img=new Image(); btnright=document.createElement(\"button\"); btnleft=document.createElement(\"button\"); img. data-src=src; btnleft.style.cssText=` position:fixed; border-radius: 50%;; left:$&#123;x - 20&#125;px; top:$&#123;y - container.scrollTop + h/2&#125;px; width:50px; height:50px; border: 0px; background-color: rgba(200,200,200,0.8); font-size: 20px; z-index: 999999999; transition:all .3s cubic-bezier(0.165, 0.84, 0.44, 1); `; btnright.style.cssText=` position:fixed; border-radius: 50%; left:$&#123;x + w + 20&#125;px; top:$&#123;y - container.scrollTop + h/2&#125;px; width:50px; border: 0px; height:50px; font-size: 20px; background-color: rgba(200,200,200,0.8); z-index: 999999999; transition:all .3s cubic-bezier(0.165, 0.84, 0.44, 1); `; btnleft.innerText=\"&lt;\"; btnright.innerText=\"&gt;\"; img.style.cssText=` position:fixed; border-radius: 12px; left:$&#123;x&#125;px; top:$&#123;y - container.scrollTop&#125;px; width:$&#123;w&#125;px; height:$&#123;h&#125;px; z-index: 999999999; transition:all .3s cubic-bezier(0.165, 0.84, 0.44, 1); opacity:0; `; btnleft.onclick=function()&#123; if(id===0)&#123; alert(\"已经是第一张了！\"); return; &#125; var left=document.getElementById(id-1); img. data-src=left.src; x=left.offsetLeft; y=left.offsetTop; w=left.offsetWidth; h=left.offsetHeight; id--; &#125; btnright.onclick=function()&#123; id++; if(id&gt;=imgid)&#123; alert(\"已经是最后一张了！\"); return; &#125; var right=document.getElementById(id); img. data-src=right.src; x=right.offsetLeft; y=right.offsetTop; w=right.offsetWidth; h=right.offsetHeight; &#125; img.onload=function()&#123; document.body.appendChild(img); document.body.appendChild(btnright); document.body.appendChild(btnleft); // 浏览器宽高 wh=window.innerHeight; ww=window.innerWidth; // 目标宽高和坐标 if(w/h&lt;ww/wh)&#123; th=wh-80; tw=w/h*th &gt;&gt; 0; tx=(ww - tw) / 2; ty=40; &#125; else&#123; tw=ww*0.8; th=h/w*tw &gt;&gt; 0; tx=ww*0.1; ty=(wh-th)/2; &#125; // 延迟写入否则不会有动画 setTimeout(function()&#123; img.style.opacity=1; img.style.height=th+\"px\"; img.style.width=tw+\"px\"; img.style.left=tx+\"px\"; img.style.top=ty+\"px\"; btnleft.style.left=(tx-90)+\"px\"; btnleft.style.top=(ty+th/2)+\"px\"; btnright.style.left=(tx+tw+40)+\"px\"; btnright.style.top=(ty+th/2)+\"px\"; // 点击隐藏 div.onclick=img.onclick=closeMove; &#125;,10); &#125;; &#125;);//end event &#125;&#125;);//end forEach 然后在 hexo/themes/layout/_layout.swig 中最下面 &lt;script&gt;&lt;/script&gt; 中加入如下引入： 文件位置：hexo/themes/layout/_layout.swig 1&lt;script type=\"text/javascript\" src=\"/js/src/image.js\"&gt;&lt;/script&gt; 给博客添加豆瓣读书/电影/游戏页面作为一个有内涵的博客…咳咳…展示自己丰富的阅读量是很有必要的，豆瓣读书就是这么一个很好的平台，当然已经有作者利用爬虫将豆瓣读书/电影/游戏内容爬取下来，并制作成了 hexo 博客插件，具体可以看官方文档README，当然也可以看我的另外一篇博客。 当然作者所做的界面是没有样式的，我们可以在作者的基础上继续魔改增加自己喜欢的样式，在安装好所需插件后，我们打开目录为 hexo/node_modules/hexo-douban/lib/templates/index.css 文件，里面是整个阅读界面的 css 样式代码文件，我们可以在其中添加背景图片等样式，比如可以添加如下： 文件位置：hexo/node_modules/hexo-douban/lib/templates/index.css 12345678.main &#123; padding-bottom: 150px; margin-top: 0px; background-image:url(\"xxx.jpg\"); background-size: cover; background-attachment: fixed; background-repeat:no-repeat;&#125; 修改上面的 url 中地址图片链接就可以新增背景图片了~ 增加二次元看板娘live2d模型如果你喜欢二次元，或者想给博客增加一个动态装饰，那么看板娘肯定是你的不二之选了，看板娘原生使用文档在这里 ，但是原生的其实不是很好用，这里我推荐一个只需要引入一个js文件就能实现看板娘的方法，README在这里，这个作者对Live2d模型进行了深度优化，可以根据鼠标放置和点击内容的不同进行一定的提示信息，并且代码中设置了一年中特殊节日的祝福语，可以说是很有心了，唯一的缺点就是网页刷新时人物模型的加载速度较慢🌚~ 具体设置的话，我们去这个张书樵live2d-widget下载这个 zip 项目并解压到 themes/next/source 下。 然后打开下载文件中的 autoload.js 文件，修改以下代码： 1const live2d_path = \"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/\"; 为下面这个地址： 1const live2d_path = \"/live2d-widget/\"; 上面那个地址表示在本地引用，然后打开 themes/next/layout/_layout.swig 文件，在其中引入 js 文件如下： 1&lt;script src=\"/live2d-widget/autoload.js\"&gt;&lt;/script&gt; 打开主题配置文件 themes/next/_config.xml 文件，在其中末尾添加： 12live2d: enable: true # 设置看板娘开关 最后，想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css 三个文件。 彩色标签云就是标签上增加随机颜色，每次刷新页面标签上展示颜色都不一样。打开 hexo/themes/next/layout/page.swig 文件，找到： 文件位置：hexo/themes/next/layout/page.swig 1&#123;% if page.type === \"tags\" %&#125; 然后将这段代码： 123456789&lt;div class=\"tag-cloud\"&gt; &lt;!-- &lt;div class=\"tag-cloud-title\"&gt; &#123;&#123; _p(counter.tag_cloud, site.tags.length) &#125;&#125; &lt;/div&gt; --&gt; &lt;div class=\"tag-cloud-tags\" id=\"tags\"&gt; &#123;&#123; tagcloud(&#123;min_font: 16, max_font: 16, amount: 300, color: true, start_color: #fff, end_color: #fff&#125;) &#125;&#125; &lt;/div&gt; &lt;/div&gt; 换成这段代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;div class=\"tag-cloud\"&gt; &lt;!-- &lt;div class=\"tag-cloud-title\"&gt; &#123;&#123; _p(counter.tag_cloud, site.tags.length) &#125;&#125; &lt;/div&gt; --&gt; &lt;div class=\"tag-cloud-tags\" id=\"tags\"&gt; &#123;&#123; tagcloud(&#123;min_font: 16, max_font: 16, amount: 300, color: true, start_color: #fff, end_color: #fff&#125;) &#125;&#125; &lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;script type=\"text/javascript\"&gt; var alltags=document.getElementById(tags); var tags=alltags.getElementsByTagName(a); for (var i = tags.length - 1; i &gt;= 0; i--) &#123; var r=Math.floor(Math.random()*75+130); var g=Math.floor(Math.random()*75+100); var b=Math.floor(Math.random()*75+80); tags[i].style.background = \"rgb(\"+r+\",\"+g+\",\"+b+\")\"; &#125;&lt;/script&gt;&lt;style type=\"text/css\"&gt; div#posts.posts-expand .tag-cloud a&#123; background-color: #f5f7f1; border-radius: 6px; padding-left: 10px; padding-right: 10px; margin-top: 18px; &#125; .tag-cloud a&#123; background-color: #f5f7f1; border-radius: 4px; padding-right: 5px; padding-left: 5px; margin-right: 5px; margin-left: 0px; margin-top: 8px; margin-bottom: 0px; &#125; .tag-cloud a:before&#123; content: \"?\"; &#125; .tag-cloud-tags&#123; text-align: left; counter-reset: tags; &#125;&lt;/style&gt; 然后重新渲染页面就好啦~然后如果需要将标签云放到首页，直接在对应位置添加标签云的引用代码即可： 12345&lt;div class=\"tag-cloud\"&gt; &lt;div class=\"tag-cloud-tags\" id=\"tags\"&gt; &#123;&#123; tagcloud(&#123;min_font: 16, max_font: 16, amount: 300, color: true, start_color: '#fff', end_color: '#fff'&#125;) &#125;&#125; &lt;/div&gt;&lt;/div&gt; 鼠标样式添加CSS样式代码： 文件位置：/themes/next/source/css/_custom/custom.styl 1234567/* 鼠标样式 */* &#123; cursor: url(/images/default.cur),auto;&#125;:link &#123; cursor: url(/images/pointer.cur),auto&#125; 用到的两个文件：default.cur、pointer.cur 位于 images 目录下，因为是 .cur 这种静态光标文件，编辑器打开是一堆 ASCII 码，这里就不贴了，直接附上链接，当然，你也可以在浏览器里获取。 default.cur pointer.cur 鼠标点击特效鼠标点击常用4种特效可以参考的我的另外一篇博客。 Valine评论框样式美化valine自带的样式比较素，并且颜色有点单调，不如花点时间将 valine 重新打造一下，注意我修改的 valine 样式只支持 1.3.4 版本的，其它版本的也可以修改，但是需要重新适配 CSS 样式。具体内容参考我的另外一篇博客。 归档页面美化归档页面其实有很多大佬已经给出美化样式了，有的有翻页特效，比如像这样，或者直接简单点，可以参考我的另外一篇博客。 添加相册功能这个实现的方式比较多，但是个人觉得比较实用好看的推荐参考这篇文章，相册展示图片样式可以在原作者基础上继续进行二次开发。我的个人相册是另一种方式哦，附上教程。 引入share.js分享功能 我目前使用的 Next5 自带的分享样式都不是很好看，百度分享虽然默认不支持 HTTPS，但是强行支持后总是在 console 控制台报错，我觉得挺烦的就直接删掉了。然后偶然在 Github 上看到一个 Share.js 感觉比较美观，就想办法引入到了个人博客。方法如下： 在这个 Share.js 中拷贝 dist 目录到本地的 hexo/themes/next/source 下。 在 hexo/themes/next/layout/_layout.swig 文件的 &lt;head&gt;&lt;/head&gt; 标签体内引入如下样式： 1&lt;link rel=\"stylesheet\" href=\"/dist/css/share.min.css\"&gt; 然后在下面 &lt;body&gt;&lt;/body&gt; 标签体内引入如下 js 文件： 1&lt;script src=\"/dist/js/social-share.min.js\"&gt;&lt;/script&gt; 最后，在 hexo/themes/next/layout/post.swig 文件中添加如下代码： 12345678910111213141516 &lt;div class=\"post-spread\"&gt; &#123;% if theme.jiathis %&#125; &#123;% include '_partials/share/jiathis.swig' %&#125; &#123;% elseif theme.baidushare %&#125; &#123;% include '_partials/share/baidushare.swig' %&#125; &#123;% elseif theme.add_this_id %&#125; &#123;% include '_partials/share/add-this.swig' %&#125; &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125; &#123;% include '_partials/share/duoshuo_share.swig' %&#125; &lt;!-- 引入share.js --&gt;+ &#123;% endif theme.share_js%&#125;+ &lt;div data-weibo-title=\"分享到微博\" data-qq-title=\"分享到QQ\" data-douban-title=\"分享到豆瓣\" class=\"social-share\" class=\"share-component\" data-disabled=\"twitter,facebook\" data-description=\"Share.js - 一键分享到微博，QQ空间，腾讯微博，人人，豆瓣\"&gt;分享到：&lt;/div&gt;+ &#123;% elseif %&#125; &lt;/div&gt; 并在主题配置文件中末尾添加如下： 文件位置：hexo/themes/next/_config.xml 1share_js: true 然后就可以使用了！里面具体一些属性设置可以查看原作者的README文档，介绍的很详细。 参考文章 造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化 Hexo+Next主题优化 Hexo搭建个人博客–next主题优化 Hexo+Next个人博客主题优化 加速Hexo博客 hexo建站笔记之彩色标签云 hexo建站笔记之首页轮播图 原生js实现图片点击展示效果 在网页中添加live2d看板娘 Google Fonts已支持思源宋体 Hexo博客+Next主题深度优化与定制","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"}]},{"title":"Hexo+NexT 自定义样式博文加密","slug":"about-hexo-password","date":"2019-10-16T16:31:27.000Z","updated":"2020-03-18T08:08:35.856Z","comments":true,"path":"posts/c1cdcf68.html","link":"","permalink":"https://hasaik.com/posts/c1cdcf68.html","excerpt":"","text":"介绍一种自定义博文加密方式，不需要插件，极简模式，相对安全。 先看一下效果： 代码1、在目录 /themes/next/layout/ 下的 _layout.swig 中，找到main标签添加自定义的 swig 123456789101112131415161718&lt;main id=\"main\" class=\"main\"&gt; &lt;div class=\"main-inner\"&gt; &lt;div class=\"content-wrap\"&gt; &lt;div id=\"content\" class=\"content\"&gt; &#123;% block content %&#125;&#123;% endblock %&#125; &lt;/div&gt; &#123;% include '_third-party/duoshuo-hot-articles.swig' %&#125; &#123;% include '_partials/comments.swig' %&#125; &lt;/div&gt; &#123;% if theme.sidebar.display !== 'remove' %&#125; &#123;% block sidebar %&#125;&#123;% endblock %&#125; &#123;% endif %&#125; &lt;/div&gt; &lt;!-- 此处为新加的代码 --&gt; &#123;% include 'password.swig' %&#125;&lt;/main&gt; 2、在目录 /themes/next/layout/ 下创建 password.swig ，内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;script src=\"https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js\"&gt;&lt;/script&gt;&lt;script&gt; //暂时储存文章中的内容 var div = $('.post-body'); //暂时储存目录的内容 var toc=$('.post-toc') function password() &#123; if('&#123;&#123; page.password &#125;&#125;')&#123; //将文章内容删除 div.remove(); //将目录删除 toc.remove(); //将文章删除后，向原来文章的地方添加，应该出现的提示用户输入密码的样式 //下面这里的第一个用textarea是因为如果在手机端的时候只能显示一部分文字， //只是拓展:input里面的字只能显示一行，不会自动换行，目前上网搜索没有发现好的办法，所以用了textarea，右下角的小三角通过resize:none 去掉。 $('.post-header').after( '&lt;span class=\"description\" value=\"请输入密码，然后按 Enter 键阅读\" style=\"font-style: oblique;font-weight: bold;border: none;display: block;'+ 'width: 60%;margin: 0 auto;text-align: center;outline: none;margin-bottom: 40px;resize:none \"&gt;'+ '&lt;i class=\"fa fa-heartbeat\" id=\"myheartbeat\"&gt;&lt;/i&gt;'+ '请输入密码，然后按 Enter 键阅读' + '&lt;i class=\"fa fa-heartbeat\" id=\"myheartbeat\"&gt;&lt;/i&gt;'+ '&lt;/span&gt;' + '&lt;div class=\"qiang\" style=\"height: 100px;width: 60%;margin:0 auto\"&gt;' + '&lt;input class=\"password\" type=\"password\" autocomplete=\"new-password\" autofocus=\"autofocus\" value=\"\" style=\"border-radius: 5px;height: 30px;border: none;display: block;border-bottom: 1px solid #ccc;' + 'margin: 0 auto;outline: none;width:95%\"/&gt;' + '&lt;/div&gt;') //绑定点击事件，如果是点击的.password 这个div就改变样式，如果是document中除了div之外的其他任何元素，就变回原来的样式。 document.onclick = function (event) &#123; var e = event || window.event; var elem = e.srcElement || e.target; while (elem) &#123; if (elem != document) &#123; if (elem.className == \"password\") &#123; //$(\".password\").animate(&#123;paddingTop:\"30px\",width:\"100%\",borderWidth:\"2px\"&#125;,300) return; &#125; elem = elem.parentNode; &#125; else &#123; //$(\".password\").animate(&#123;paddingTop:\"0px\",width:\"95%\",borderWidth:\"1px\"&#125;,300) return; &#125; &#125; &#125; //绑定enter键按下后离开的事件 $(document).keyup(function(event)&#123; if(event.keyCode ==13&amp;&amp;$('.password').length&gt;0)&#123; //console.log($('.password').val()) //console.log('&#123;&#123; page.password &#125;&#125;') if ($('.password').val() == '&#123;&#123; page.password &#125;&#125;') &#123; //恢复文章内容 (div).appendTo($(\".post-header\")) //恢复目录 toc.appendTo($(\".sidebar-inner\")) //删除本页面的输入密码组件 $(\".description\").remove(); $(\".qiang\").remove(); $(\".password\").remove(); //重新处理pjax事件,如果没有加pjax的从下面这行起到下面的else之间的代码需要去掉。 //图片懒加载，没有加入此功能的这个函数需要去掉 $('img').lazyload(&#123; placeholder: '/images/loading.gif', effect: 'fadeIn', threshold : 100, failure_limit : 20, skip_invisible : false &#125;); //pjax后出现文章不显示，没有pjax的下面四行需要去掉 $(\".post-block\").css(&#123;opacity:1&#125;); $(\".post-header\").css(&#123;opacity:1&#125;); $(\".post-body\").css(&#123;opacity:1&#125;); $(\".pagination\").css(&#123;opacity:1&#125;); &#125;else &#123; alert(\"对不起，密码输入错误。\") &#125; &#125; //将document的keyup移除，防止在pjax的情况下会重复绑定事件 &#125;); &#125; &#125; password();&lt;/script&gt; 使用新建一个 test.md ，内容如下 12345678title: 测试date: 2019-03-30 21:18:02password: aaa---# aaaaaa我就很反感大家老是那么说我，## bbbbbb除了有才，就只剩下那无可比拟的颜值。 上面的 password 后面的值自定义。 注意如果自己的博客源码中的这篇文章上传到 github ，密码也就公诸于世了，可以在 push 到 github 的时候将这篇文章忽略。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"},{"name":"Next","slug":"Next","permalink":"https://hasaik.com/tags/Next/"},{"name":"Password","slug":"Password","permalink":"https://hasaik.com/tags/Password/"},{"name":"Security","slug":"Security","permalink":"https://hasaik.com/tags/Security/"}]},{"title":"Hexo+NexT 博客搭建相册","slug":"about-hexo-photo","date":"2019-10-15T09:26:09.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/39d47c89.html","link":"","permalink":"https://hasaik.com/posts/39d47c89.html","excerpt":"","text":"首先说一下实现想法，在 腾讯云开发者平台 上面创建一个相册库（PS：腾讯云开发者平台是腾讯云与 CODING 共同为开发者打造的云端工具平台，旨在为更多的开发者带去便捷、高效的开发体验，提供包括需求管理、代码编写、代码管理、代码运行的整套系统），当有更新时，提交到腾讯云开发者平台上面，同时在博客 resource 下面生成一个 data.json 来生成所有相册文件的 json 文件，博客读取 data.json 来展示相册。 实现效果链接： Photos 创建相册在腾讯云开发者平台上面创建一个仓库,命名为 Blog_Back_Up (仓库名字随便). 用 git clone 把仓库 clone 到本地来. 1cd Blog_Back_Up 创建 photos 和 min_photos 两个目录,把要上传的相册图片 放到 photos 文件夹下面. ***相册图片命名方式 : yyyy-MM-dd_des.jpg/png/jpef/gif. &emsp;eg: 2017-9-18_风景.jpg*** 处理图片图片的处理我用 python 脚本来处理，这样每次只要执行脚本就可以了。如果您的电脑没有 Python ，自行上网搜索安装教程，一搜一大把。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211#coding: utf-8from PIL import Imageimport osimport sysimport jsonfrom datetime import datetimefrom ImageProcess import Graphics# 定义压缩比，数值越大，压缩越小SIZE_normal = 1.0SIZE_small = 1.5SIZE_more_small = 2.0SIZE_more_small_small = 3.0def make_directory(directory): \"\"\"创建目录\"\"\" os.makedirs(directory)def directory_exists(directory): \"\"\"判断目录是否存在\"\"\" if os.path.exists(directory): return True else: return Falsedef list_img_file(directory): \"\"\"列出目录下所有文件，并筛选出图片文件列表返回\"\"\" old_list = sorted(os.listdir(directory), reverse=True) print(old_list) new_list = [] for filename in old_list: name, fileformat = filename.split(\".\") if fileformat.lower() == \"jpg\" or fileformat.lower() == \"png\" or fileformat.lower() == \"gif\" or fileformat.lower() == \"jpeg\": new_list.append(filename) # print new_list return new_listdef print_help(): print(\"\"\" This program helps compress many image files you can choose which scale you want to compress your img(jpg/png/etc) 1) normal compress(4M to 1M around) 2) small compress(4M to 500K around) 3) smaller compress(4M to 300K around) \"\"\")def compress(choose, des_dir, src_dir, file_list): \"\"\"压缩算法，img.thumbnail对图片进行压缩， 参数 ----------- choose: str 选择压缩的比例，有4个选项，越大压缩后的图片越小 \"\"\" if choose == '1': scale = SIZE_normal if choose == '2': scale = SIZE_small if choose == '3': scale = SIZE_more_small if choose == '4': scale = SIZE_more_small_small for infile in file_list: img = Image.open(src_dir+infile) # size_of_file = os.path.getsize(infile) w, h = img.size img.thumbnail((int(w/scale), int(h/scale))) img.save(des_dir + infile)def compress_photo(): '''调用压缩图片的函数 ''' src_dir, des_dir = \"photos/\", \"min_photos/\" if directory_exists(src_dir): if not directory_exists(src_dir): make_directory(src_dir) # business logic file_list_src = list_img_file(src_dir) if directory_exists(des_dir): if not directory_exists(des_dir): make_directory(des_dir) file_list_des = list_img_file(des_dir) # print file_list '''如果已经压缩了，就不再压缩''' for i in range(len(file_list_des)): if file_list_des[i] in file_list_src: file_list_src.remove(file_list_des[i]) compress('4', des_dir, src_dir, file_list_src)def handle_photo(): '''根据图片的文件名处理成需要的json格式的数据 ----------- 最后将data.json文件存到博客的source/photos文件夹下 ''' src_dir, des_dir = \"photos/\", \"min_photos/\" file_list = list_img_file(src_dir) print(file_list) list_info = [] for i in range(len(file_list)): filename = file_list[i] date_str, info = filename.split(\"_\") info, _ = info.split(\".\") date = datetime.strptime(date_str, \"%Y-%m-%d\") year_month = date_str[0:7] if i == 0: # 处理第一个文件 new_dict = &#123;\"date\": year_month, \"arr\":&#123;'year': date.year, 'month': date.month, 'link': [filename], 'text': [info], 'type': ['image'] &#125; &#125; list_info.append(new_dict) elif year_month != list_info[-1]['date']: # 不是最后的一个日期，就新建一个dict new_dict = &#123;\"date\": year_month, \"arr\":&#123;'year': date.year, 'month': date.month, 'link': [filename], 'text': [info], 'type': ['image'] &#125; &#125; list_info.append(new_dict) else: # 同一个日期 list_info[-1]['arr']['link'].append(filename) list_info[-1]['arr']['text'].append(info) list_info[-1]['arr']['type'].append('image') list_info.reverse() # 翻转 tmp = bubbleYear(list_info) bubble(tmp) final_dict = &#123;\"list\": list_info&#125; with open(\"../xuxugood.github.io/source/photos/data.json\",\"w\") as fp: json.dump(final_dict, fp)def cut_photo(): \"\"\"裁剪算法 ---------- 调用Graphics类中的裁剪算法，将src_dir目录下的文件进行裁剪（裁剪成正方形） \"\"\" src_dir = \"photos/\" if directory_exists(src_dir): if not directory_exists(src_dir): make_directory(src_dir) # business logic file_list = list_img_file(src_dir) # print file_list if file_list: print_help() for infile in file_list: img = Image.open(src_dir+infile) Graphics(infile=src_dir+infile, outfile=src_dir + infile).cut_by_ratio() else: pass else: print(\"source directory not exist!\") def git_operation(): ''' git 命令行函数，将仓库提交 ---------- 需要安装git命令行工具，并且添加到环境变量中 ''' os.system('git add --all') os.system('git commit -m \"add photos\"') os.system('git push origin master')def bubble(bubbleList): listLength = len(bubbleList) while listLength &gt; 0: for i in range(listLength - 1): # 这个循环负责设置冒泡排序进行的次数 # print(bubbleList[i]) for j in range(listLength-i-1): # ｊ为列表下标 if(bubbleList[j].get('arr').get('year') == bubbleList[j+1].get('arr').get('year')): if bubbleList[j].get('arr').get('month') &lt; bubbleList[j+1].get('arr').get('month'): bubbleList[j], bubbleList[j+1] = bubbleList[j+1], bubbleList[j] return bubbleList # for i in range(listLength - 1): # if(bubbleList[i].get('arr').get('year') == bubbleList[i+1].get('arr').get('year')): # if bubbleList[i].get('arr').get('month') &gt; bubbleList[i+1].get('arr').get('month'): # bubbleList[i] = bubbleList[i] + bubbleList[i+1] # bubbleList[i+1] = bubbleList[i] - bubbleList[i+1] # bubbleList[i] = bubbleList[i] - bubbleList[i+1] # listLength -= 1 def bubbleYear(bubbleList): listLength = len(bubbleList) while listLength &gt; 0: for i in range(listLength - 1): for j in range(listLength-i-1): if bubbleList[j].get('arr').get('year') &lt; bubbleList[j+1].get('arr').get('year'): bubbleList[j], bubbleList[j+1] = bubbleList[j+1], bubbleList[j] # print(bubbleList) return bubbleListif __name__ == \"__main__\": cut_photo() # 裁剪图片，裁剪成正方形，去中间部分 compress_photo() # 压缩图片，并保存到mini_photos文件夹下 git_operation() # 提交到github仓库 handle_photo() # 将文件处理成json格式，存到博客仓库中 其中 ../xuxugood.github.io/source/photos/data.json 是我博客地址，这里换成你的博客地址。 使用方法执行命令 python3 tool.py ，因为我用的是 python3 这里可以根据你的 python 版本来使用。 问题如果出现 from PIL import Image 这种报错，说明没有 PIL 这个库，执行 python3 -m pip install Pillow 增加相册style在 Next 主题下面增加 photo.swig 页面，路径如下 next/layout 1234567891011121314151617181920212223242526272829&#123;% extends '_layout.swig' %&#125;&#123;% import '_macro/post-collapse.swig' as post_template %&#125;&#123;% import '_macro/sidebar.swig' as sidebar_template %&#125;&#123;% block title %&#125;&#123;&#123; page.title &#125;&#125; | &#123;&#123; config.title &#125;&#125;&#123;% endblock %&#125;&#123;% block content %&#125; &#123;#################&#125; &#123;### Photo BLOCK ###&#125; &#123;#################&#125; &lt;div class=\"post-block photo\"&gt; &lt;div id=\"posts\" class=\"posts-collapse\"&gt; &lt;/div&gt; &lt;/div&gt; &#123;#####################&#125; &#123;### END Photo BLOCK ###&#125; &#123;#####################&#125; &#123;% include '_partials/pagination.swig' %&#125;&#123;% endblock %&#125;&#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(false) &#125;&#125;&#123;% endblock %&#125; 生成相册页面生成相册页面 hexo new page photos，修改 photos 下的 index.md 文件如下 123456789101112131415161718192021222324252627title: 我的相册date: 2017-09-15 09:51:05type: \"photos\"comments: false---&lt;link rel=\"stylesheet\" href=\"./ins.css\"&gt; &lt;link rel=\"stylesheet\" href=\"./photoswipe.css\"&gt; &lt;link rel=\"stylesheet\" href=\"./default-skin/default-skin.css\"&gt; &lt;div class=\"photos-btn-wrap\"&gt; &lt;a class=\"photos-btn active\" href=\"javascript:void(0)\"&gt;Photos&lt;/a&gt;&lt;/div&gt;&lt;div class=\"instagram itemscope\"&gt; &lt;a href=\"https://xuxugood.github.io\" target=\"_blank\" class=\"open-ins\"&gt;图片正在加载中…&lt;/a&gt;&lt;/div&gt; &lt;script&gt; (function() &#123; var loadScript = function(path) &#123; var $script = document.createElement('script') document.getElementsByTagName('body')[0].appendChild($script) $script.setAttribute('src', path) &#125; setTimeout(function() &#123; loadScript('./ins.js') &#125;, 0) &#125;)()&lt;/script&gt; 其中 &lt;a href=&quot;https://xuxugood.github.io&quot; target=&quot;_blank&quot; class=&quot;open-ins&quot;&gt;图片正在加载中…&lt;/a&gt; 中的 url 替换成你的博客网址。 需要三个 css 文件和一个 js 文件放在 photos 文件夹下，其文件都在我的 腾讯云开发者平台 上面，需要修改 ins.js 的 120 和 121 行的 url 为你腾讯云开发者平台图片的网址。 查看相册插件 photoswipe上面 index.md 中加入了两个 css 文件，这是我们用 photoswipe 查看相册用到的，具体可以参考网址 photoswipe 。这里我们已经把 css 文件加上了，之后我们要加上 js 文件 photoswipe.min.js 和 photoswipe-ui-default.min.js，js 资源下载地址 photoswipe ，js 存放路径为 next/source/js/src 引用 js 文件在 layout/_scripts/pages/post-details.swig 中插入 12&lt;script src=\"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;\"&gt;&lt;/script&gt;&lt;script src=\"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;\"&gt;&lt;/script&gt; 在根目录加入标签在 _layout.swig 中的body标签里最前面插入以下内容 1234567891011121314151617181920212223242526272829303132333435363738394041&#123;% if page.type === \"photos\" %&#125;&lt;!-- Root element of PhotoSwipe. Must have class pswp. --&gt;&lt;div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"&gt; &lt;div class=\"pswp__bg\"&gt;&lt;/div&gt; &lt;div class=\"pswp__scroll-wrap\"&gt; &lt;div class=\"pswp__container\"&gt; &lt;div class=\"pswp__item\"&gt;&lt;/div&gt; &lt;div class=\"pswp__item\"&gt;&lt;/div&gt; &lt;div class=\"pswp__item\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"pswp__ui pswp__ui--hidden\"&gt; &lt;div class=\"pswp__top-bar\"&gt; &lt;div class=\"pswp__counter\"&gt;&lt;/div&gt; &lt;button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"&gt;&lt;/button&gt; &lt;button class=\"pswp__button pswp__button--share\" title=\"Share\"&gt;&lt;/button&gt; &lt;button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"&gt;&lt;/button&gt; &lt;button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"&gt;&lt;/button&gt; &lt;!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR --&gt; &lt;!-- element will get class pswp__preloader--active when preloader is running --&gt; &lt;div class=\"pswp__preloader\"&gt; &lt;div class=\"pswp__preloader__icn\"&gt; &lt;div class=\"pswp__preloader__cut\"&gt; &lt;div class=\"pswp__preloader__donut\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\"&gt; &lt;div class=\"pswp__share-tooltip\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"&gt; &lt;/button&gt; &lt;button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"&gt; &lt;/button&gt; &lt;div class=\"pswp__caption\"&gt; &lt;div class=\"pswp__caption__center\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 至此相册查看插件 photoswipe 已经配置完毕。 整个流程使用 在 Blog_Back_Up 里面加入图片,图片路径在 photos 里面 图片命名方式 yyyy-MM-dd_des.jpg/jpeg/gif/png 执行 python3 tool.py 切换到博客 resource 目录下 在 photos 里面生成了 data.json 文件，提交到腾讯云开发者平台仓库上面 输入网址查看照片","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"},{"name":"Next","slug":"Next","permalink":"https://hasaik.com/tags/Next/"},{"name":"Photos","slug":"Photos","permalink":"https://hasaik.com/tags/Photos/"}]},{"title":"Hexo NexT主题之代码块Mac Panel特效","slug":"about-hexo4","date":"2019-10-14T14:45:29.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/d7399e80.html","link":"","permalink":"https://hasaik.com/posts/d7399e80.html","excerpt":"","text":"偶然间发现一款不错的文章代码块样式，类似Mac的面板效果。能设置阴影效果和实现文本编辑功能，不过文本只存在浏览器页面上，不会真正保存。配置的方式也很简单，觉得不错的朋友可以试一下。 引入 JS这里需要新建两个 js 文件 events.js 和 codeblock.js ，路径位于 /themes/next/scripts/ 包下。 events.js 代码： 1234567// mac Panel效果代码块相关var exec = require('child_process').exec;// new 后自动打开编辑器hexo.on('new', function(data)&#123; exec('open -a MacDown ' + data.path);&#125;); 这个js会在你敲 hexo new xxx 命令后，调用本地的MarkDown编辑器打开新建的md文件 xxx codeblock.js 代码： 12345678910111213141516171819202122// mac Panel效果代码块相关var attributes = [ 'autocomplete=\"off\"', 'autocorrect=\"off\"', 'autocapitalize=\"off\"', 'spellcheck=\"false\"', 'contenteditable=\"true\"']var attributesStr = attributes.join(' ')hexo.extend.filter.register('after_post_render', function (data) &#123; while (/&lt;figure class=\"highlight ([a-zA-Z]+)\"&gt;.*?&lt;\\/figure&gt;/.test(data.content)) &#123; data.content = data.content.replace(/&lt;figure class=\"highlight ([a-zA-Z]+)\"&gt;.*?&lt;\\/figure&gt;/, function () &#123; var language = RegExp.$1 || 'plain' var lastMatch = RegExp.lastMatch lastMatch = lastMatch.replace(/&lt;figure class=\"highlight /, '&lt;figure class=\"iseeu highlight /') return '&lt;div class=\"highlight-wrap\"' + attributesStr + 'data-rel=\"' + language.toUpperCase() + '\"&gt;' + lastMatch + '&lt;/div&gt;' &#125;) &#125; return data&#125;) 引入 CSS在 /themes/next/source/css/_common/components/highlight/ 目录下新建 macPanel.styl 文件，内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/*mac Panel效果代码块相关*/.highlight-wrap[data-rel] &#123; position: relative; overflow: hidden; border-radius: 5px; /*box-shadow: 0 10px 30px 0px rgba(0, 0, 0, 0.4);*/ box-shadow:18px 18px 15px 0px rgba(0,0,0,.4); margin: 35px 0; margin-top: 10px; margin-bottom: 25px; ::-webkit-scrollbar &#123; height: 10px; &#125; ::-webkit-scrollbar-track &#123; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; &#125; ::-webkit-scrollbar-thumb &#123; border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5); &#125; &amp;::before &#123; content: attr(data-rel); height: 38px; line-height: 38px; background: #21252b; /*background: #108414de;*/ color: #fff; font-size: 16px; /*position: absolute;*/ top: 0; left: 0; width: 100%; /*font-family: 'Source Sans Pro', sans-serif;*/ font-weight: bold; padding: 0px 80px; text-indent: 15px; float: left; &#125; &amp;::after &#123; content: ' '; position: absolute; -webkit-border-radius: 50%; border-radius: 50%; background: #fc625d; width: 12px; height: 12px; top: 0; left: 20px; margin-top: 13px; -webkit-box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; z-index: 3; &#125;&#125; 此css是根据我本地的样式做过调整，注释的代码为原有的，根据需要调整样式即可。 配置引用在 /themes/next/source/css/_common/components/highlight/highlight.styl 中引入刚才新建的 macPanel.styl： 1@require \"macPanel\" 配置在文件的顶部位置即可。 到此Mac Panel配置完成，根据需要可调整主题配置文件中的 highlight_theme 的值，选择自己喜欢的样式。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"},{"name":"Next","slug":"Next","permalink":"https://hasaik.com/tags/Next/"},{"name":"代码块","slug":"代码块","permalink":"https://hasaik.com/tags/代码块/"}]},{"title":"Hexo博客静态资源压缩","slug":"about-hexo3","date":"2019-10-13T12:52:32.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/495d0b23.html","link":"","permalink":"https://hasaik.com/posts/495d0b23.html","excerpt":"","text":"针对于博文静态资源压缩，介绍一下两种压缩方式，第一种方式是使用Gulp来进行压缩，Gulp 是 Node.js 下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。第二种方式就是使用由rozbo大佬开发的 Hexo-Neat 压缩插件，配置简单，无需额外命令。 附上大佬的 Github 链接： Hexo-Neat Hexo-Neat使用1、在站点根目录下安装 Hexo-Neat 1$ npm install hexo-neat --save 2、在站点配置文件中末尾添加以下相关配置即可，也可以按照自己的需求去自定义配置。 12345678910111213141516171819202122# hexo-neat# 博文压缩neat_enable: true# 压缩htmlneat_html: enable: true exclude:# 压缩cssneat_css: enable: true exclude: - '*/*.min.css'# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - '**/*.min.js' - '**/jquery.fancybox.pack.js' - '**/index.js' Gulp使用1、在站点的根目录下执行以下命令 12$ npm install gulp -g$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 2、在博客根目录下新建 gulpfile.js ，并填入以下内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var imagemin = require('gulp-imagemin');// 压缩htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; collapseWhitespace: true, //从字面意思应该可以看出来，清除空格，压缩html，这一条比较重要，作用比较大，引起的改变压缩量也特别大 collapseBooleanAttributes: true, //省略布尔属性的值，比如：&lt;input checked=\"checked\"/&gt;,那么设置这个属性后，就会变成 &lt;input checked/&gt; removeComments: true, //清除html中注释的部分 removeEmptyAttributes: true, //清除所有的空属性 removeScriptTypeAttributes: true, //清除所有script标签中的type=\"text/javascript\"属性。 removeStyleLinkTypeAttributes: true, //清楚所有Link标签上的type属性。 minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'));&#125;);// 压缩cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss(&#123; compatibility: 'ie8' &#125;)) .pipe(gulp.dest('./public'));&#125;);// 压缩js !代表排除的js,例如['!./public/js/**/*min.js']gulp.task('minify-js', function() &#123; return gulp.src(['./public/js/**/.js']) .pipe(uglify()) //压缩混淆 .pipe(gulp.dest('./public'));&#125;);// 压缩图片gulp.task('minify-images', function() &#123; return gulp.src('./public/images/**/*.*') .pipe(imagemin( [imagemin.gifsicle(&#123;'optimizationLevel': 3&#125;), imagemin.jpegtran(&#123;'progressive': true&#125;), imagemin.optipng(&#123;'optimizationLevel': 7&#125;), imagemin.svgo()], &#123;'verbose': true&#125;)) .pipe(gulp.dest('./public/images'));&#125;);// 默认任务gulp.task('default',gulp.series(gulp.parallel('minify-html','minify-css','minify-js','minify-images'))); 3、生成博文时执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。 以上就是关于博文静态资源压缩的两种方式，欢迎自由选择引用，如有不明白的地方欢迎下方留言 o(^▽^)o ，谢谢阅读。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"},{"name":"Gulp","slug":"Gulp","permalink":"https://hasaik.com/tags/Gulp/"},{"name":"Neat","slug":"Neat","permalink":"https://hasaik.com/tags/Neat/"}]},{"title":"基于 TravisCI 实现 Hexo 在 Github 和 Coding 的同步部署","slug":"about-hexo2","date":"2019-10-12T14:43:34.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/3e5a3bb6.html","link":"","permalink":"https://hasaik.com/posts/3e5a3bb6.html","excerpt":"","text":"关于TravisCI我这里简单介绍一下，TravisCI是一个在线的、分布式的持续集成服务，可以用来构建和测试托管在Github上的代码，并且其本身就是开源的。TravisCI提供了主流编程语言如C#、Java、JavaScript、Ruby、PHP、Node.js等的支持，相比Jenkins而言，它是一个轻量级的持续集成平台，它会在每次提交代码后，根据配置文件来创建一个虚拟机，并执行用户定义的Build任务，这个虚拟机提供版本控制(Git)、项目构建(Node.js)等，在此前提下，我们下面着手Hexo的自动化部署。 其原理就是Github和Coding（小插曲：Coding现在已经被腾讯收购了）各为TravisCI分配一个token，当我们向 Github 推送新的代码以后，TravisCI就会从代码仓库中拉取代码，并通过 npm 安装依赖生成静态页面，我们将这些静态页面推送到 master 分支，即可完成对Hexo的部署操作。 对于我个人博客是以 Github 作为代码的主仓库，其上面的 blog-source 分支存放博客的源代码，master 分支存放博客的静态页面，在此基础上，我们同时推送静态页面到 Github 和 Coding 的代码仓库，这样就可以实现两个平台的同步部署，这里的部署自然是指由 Travis 完成的自动化部署。整体的流程如下图所示： Github相关操作1、按规定仓库名称为 XXXXX.github.io，其中 XXXXX 为你的用户名，进行创建仓库。 2、建好仓库以后我们在仓库中新建一个分支放博客源码，我这里命名为 blog-source，建好以后将源码提交到该分支下即可。 3、为了使 Travis 能够将编译好的文件 push 回咱们的 Github，我们需要生成 token，步骤如下： 在 Github 上 Setting 中找到 Personal access tokens 设置。 点 Generate new token，为 token 起一个名字，勾选 repo，然后点击生成一个新的 token ，并复制下来记录好，待会下面 Travis 配置会用到。（这个只会出现一次！！） Coding相关操作1、因为腾讯云已经收购了 Coding ，所以我们直接在 腾讯云开发者平台 注册账号来管理我们的仓库。 2、注册完毕后我们新建一个名为 XXXXX.coding.me 的项目，其中 XXXXX 为你的用户名，基本操作与 Github 一致，实在不会的可以留言。 3、Coding可以和 Github 一样可以生成一个 token 如下图，成功以后将 token 保存好，一会下面会用到。 Travis相关操作1、使用 github 帐号登录 TravisCI ，左上方按钮点击同步项目，下方打开需要集成的项目，最后点击齿轮进入项目配置页面 2、具体 Travis 配置如下图 3、配置好 Travis 后，回到终端，进入 blog 所在的文件夹下，新建 .travis.yml 文件，并添加以下内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364sudo: falselanguage: node_jsnode_js: - 10 # use nodejs v10 LTS# 指定缓存模块，可选。缓存可加快编译速度。cache: directories: - node_modules# 指定博客的仓库地址env: global: # Github Pages - GH_REF: github.com/XuxuGood/XuxuGood.github.io # Coding Pages - CO_REF: git.dev.tencent.com/XuxuGood/XuxuGood.coding.me.git# 指定博客分支branches: only: - blog-source # build master branch onlybefore_install: - npm install -g hexo-cli# Start: Build Lifecycleinstall: - npm install - npm install hexo-deployer-git --save# 执行清缓存，生成网页操作script: - hexo clean - hexo generate #gulp压缩文件 - gulp# 设置git提交名，邮箱；替换真实token到_config.yml文件，最后depoy部署after_script: - cd ./public - git init - git config user.name \"xuxu\" - git config user.email \"22476705@qq.com\" - git add . - git commit -m \"TravisCI 自动部署\" # Github Pages - git push --force --quiet \"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\" master:master # Coding Pages - git push --force --quiet \"https://XuxuGood:$&#123;CO_TOKEN&#125;@$&#123;CO_REF&#125;\" master:master - git tag v0.0.$TRAVIS_BUILD_NUMBER -a -m \"Auto Taged By TravisCI With Build $TRAVIS_BUILD_NUMBER\" # Github Pages - git push --quiet \"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\" master:master --tags # Coding Pages - git push --quiet \"https://XuxuGood:$&#123;CO_TOKEN&#125;@$&#123;CO_REF&#125;\" master:master --tags # Build Salver Repository(Github Pages) #- git push --force --quiet \"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\" master:master # Build Salver Repository(Github Pages) #- git push --force --quiet \"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\" master:master# End: Build LifeCycle 4、然后，准备 push 该项目到 github ，看下是否成功，最终成功则会看到 Travis 构建页面显示如下图 以上就是基于 TravisCI 实现 Hexo 在 Github 和 Coding 同步部署的全部介绍，如有不明白的地方欢迎下方留言 o(^▽^)o ，谢谢阅读。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://hasaik.com/tags/Github/"},{"name":"Coding","slug":"Coding","permalink":"https://hasaik.com/tags/Coding/"},{"name":"TravisCI","slug":"TravisCI","permalink":"https://hasaik.com/tags/TravisCI/"}]},{"title":"Hexo搭建本地个人博客（基础篇）","slug":"about-hexo1","date":"2019-10-12T09:21:07.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/e1b9c6c5.html","link":"","permalink":"https://hasaik.com/posts/e1b9c6c5.html","excerpt":"","text":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装Hexo建立 Hexo 只需要几分钟，安装 Hexo 非常简单。但是，您首先需要安装其他一些东西。 Node.js &nbsp;&nbsp;(Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本) Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 1$ npm install -g hexo-cli 如果没有，那就一起来看下面吧 (这里只说一下 windows 的安装，因为本人现在比较穷，买不起mac啊 テ_デ，其他相关教程大家就去搜搜很多的。) 安装git 安装地址 一切按照默认走就行了，没什么特殊的地方，安装完成之后检查git是否安装成功（执行一下cmd命令），显示版本号即为成功！ 1git --version 安装Node.js 安装地址 我们这里简单点，直接下载并运行安装程序就完了，还是走默认就行，安装完成之后检查 node 是否安装成功（执行一下cmd命令），显示版本号即为成功！ 1node -v 安装Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1$ npm install -g hexo-cli 利用Hexo初始化我们的站点跟目录(文件)123$ hexo init &lt;文件夹&gt;$ cd &lt;文件夹&gt;$ npm install 选择你想要的盘符来建立我们的博客站点文件,我这里选择 D:\\blog ，这里的 blog 是你的文件夹名字（根据自己的喜好建一个文件夹） cd 到你的站点目录下，然后 初始化站点 $ npm install，执行成功后到你的 blog 文件夹下看看是否这样的（一致就成功啦~~） 介绍几个个命令 ,以后经常要用到的 123hexo g: 编译,生成静态文件，也就是public文件夹的东西。hexo s: 开启本地服务(以上两步的操作可以合并成hexo s -g)。hexo clean: 顾名思义就是清除缓存的意思了啦，这招一般在你改动之后网站没有变化时候用。 接下来看看 你博客的初步成果吧。 进入 blog 文件根目录: 执行命令: hexo g 和 hexo s 然后在你的浏览器输入http://localhost:4000，查看你的博客。 到此为止，你的个人博客就已经搭建完成了。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://hasaik.com/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-11T12:08:00.000Z","updated":"2020-03-18T08:08:35.860Z","comments":true,"path":"posts/27514.html","link":"","permalink":"https://hasaik.com/posts/27514.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}